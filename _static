jQuery(document).ready(function ($) {

  var macsCookies = new function () {

    var self = this

    self.config = {
      'consentLifeDays': 90,
      'cookieGroups': [
        'necessary',
        'functional',
        'statistics',
        'targeting'
      ]
    }

    // Hide overlay
    $('body').click( function() {
      $('.cookieConsent__overlay.overlay-on').hide();
    } );

    // Local variable cache for user preferences
    self.allowedCookies = [];

    /**
     * Kicks it off
     */
    self.init = function () {

      /**
       * If popup is initialized, we setup GTM scripts only after user's action.
       * Otherwise we can do it based on current cookie preferences.
       */
      if ( ! self.popupInit() ){
        self.setupGTMscripts()
      }

      // PREFERENCES PAGE
      self.bindPreferencesActions()
      self.checkAllowedBoxes()

      // Block embeds
      self.blockEmbeds() // Block  embeds function

      self.trackUserConsent() // track user consent
    }

    /**
     * Cookie helpers
     */
    self.getCookie = function (name) {
      var re = new RegExp(name + '=([^;]+)')
      var value = re.exec(document.cookie)
      return (value != null) ? unescape(value[1]) : null
    }

    self.setCookie = function (name, value, days) {
      var t = new Date()
      t.setTime(t.getTime() + 24 * days * 60 * 60 * 1e3)
      var expires = 'expires=' + t.toUTCString()
      document.cookie = name + '=' + value + ';' + expires + ';path=/'
    }

    self.deleteCookie = function(name) {
      document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }

    self.cookieExists = function(name) {
      return self.getCookie(name) !== null
    }

    /**
     * Clears local variable cache
     */
    self.resetAllowedCookies = function() {
      self.allowedCookies = []
    }

    /**
     * Rebuilds local variable cache for user preferences based on saved cookies
     */
    self.getAllowedCookies = function() {

      self.resetAllowedCookies()

      $( self.config.cookieGroups ).each( function(i,val) {
        var cookieName = 'macs_cookies_' + val + '_' + MACS_COOKIES.ID

        if ( self.cookieExists(cookieName) ) {
          self.allowedCookies.push( val )
        }

      } )
    }

    /**
     * Recreates GTM scripts based on plain text templates
     */
    self.setupGTMscripts = function() {
      self.getAllowedCookies()

      window.dataLayer = window.dataLayer || [];

      $( self.allowedCookies ).map(function(val){
        var gtmTemplate = $( '.macs_cookies_gtm_' + self.allowedCookies[val] )

        gtmTemplate.each( function(){
          if ( $(this).length && $(this).text() != '' ) {
            self.insertScriptElement( $(this).text() )
          }
        } )
      })
    }

    /**
     * Insets script element into DOM
     */
    self.insertScriptElement = function( scriptText ) {
      $el = $( '<script>', { 'text' : scriptText } )
      $el.appendTo($('body'))
    }

    /**
     * Refreshes general consent data by setting it up to current date and current policy version
     */
    self.refreshConsentData = function() {
      self.deleteCookie('macs_cookies_consent_' + MACS_COOKIES.ID);
      self.deleteCookie('macs_cookies_policy_v_' + MACS_COOKIES.ID);
      self.setCookie( 'macs_cookies_consent_' + MACS_COOKIES.ID, 1, self.config.consentLifeDays );
      self.setCookie( 'macs_cookies_policy_v_' + MACS_COOKIES.ID, MACS_COOKIES.coookiePolicyVersion, self.config.consentLifeDays );
    }

    // USER PREFERENCES METHODS

    /**
     * Binds actions to save button
     */
    self.bindPreferencesActions = function(){
      $('#macs_cookies_save_preferences').click(function(e){
        e.preventDefault()
        self.resetUserSettings();
        self.saveUserSettings();
        $('#popup-cookieConsent').hide();
        $('.cookieConsent__overlay.overlay-on').hide();
        $('.macs_cookies_saved').fadeIn(200, function(){
          setTimeout( function(){ $('.macs_cookies_saved').fadeOut(200) }, 2000 )
        })
      })
    }

    /**
     * Checks checkboxes on settings page based on existing cookies
     */
    self.checkAllowedBoxes = function() {
      self.getAllowedCookies();
      $( self.allowedCookies ).map(function(val){
        $('#accept_cookie_' + self.allowedCookies[val]).prop('checked', true)
      })
    }

    /**
     * Resets all user preferences (not the concent itself)
     */
    self.resetUserSettings = function() {
      $( self.config.cookieGroups ).each( function(i,val) {
        var cookieName = 'macs_cookies_' + val + '_' + MACS_COOKIES.ID
        self.deleteCookie(cookieName);
      })
    }

    /**
     * Saves user settings as cookies
     */
    self.saveUserSettings = function () {
      $('input[name="accept_cookies[]"]:checked').each(function(){
          self.setCookie( 'macs_cookies_' + $(this).val() + '_' + MACS_COOKIES.ID, 1, self.config.consentLifeDays )
      })

      // always set necessary when settings are saved (since the checkbox is required)
      self.setCookie( 'macs_cookies_necessary_' + MACS_COOKIES.ID, 1, self.config.consentLifeDays )

      // Set general consent cookies
      self.refreshConsentData()

      // Hide the popup
      $('#popup-cookieConsent').hide();
      $('.cookieConsent__overlay.overlay-on').hide();
      // Do the GTM switcheroo from plaintext to script.
      self.setupGTMscripts()
    }

    // POPUP

    /**
     * Initializes popup in following scenarios
     * - User did not accept cookies yet
     * - Cookie Policy version is changed since the user accepted policy
     *
     * NOTE: will also reset existing user settings in the cases described above.
     */
    self.popupInit = function() {
      if (
        self.cookieExists( 'macs_cookies_consent_' + MACS_COOKIES.ID ) &&
        self.cookieExists( 'macs_cookies_policy_v_' + MACS_COOKIES.ID ) &&
        self.getCookie( 'macs_cookies_policy_v_' + MACS_COOKIES.ID ) === MACS_COOKIES.coookiePolicyVersion )
      {
        return false;
      }

      // Reset user preferences, they're outdated anyway
      self.resetUserSettings()

      // Show popup
      $('#popup-cookieConsent').show();
      $('.cookieConsent__overlay.overlay-on').show();
      self.bindPopupActions()

      return true;
    }

    /**
     * Binds actions to user clicks
     */
    self.bindPopupActions = function() {
      $('.macs_cookies_accept_necessary').click(function(e) {
        e.preventDefault()

        // 1. Reset previous consent cookies if exist
        self.resetUserSettings()
        // 2. Set only necessary consent cookie
        self.setCookie( 'macs_cookies_necessary_' + MACS_COOKIES.ID, 1, self.config.consentLifeDays )
        // 3. Refresh consent date and cookie policy version to renew the consent lifespan
        self.refreshConsentData()
        // 4. Hide the popup
        $('#popup-cookieConsent').hide();
        $('.cookieConsent__overlay.overlay-on').hide()
        // 5. Do the GTM switcheroo from plaintext to script.
        self.setupGTMscripts()
      })

      $('.macs_cookies_accept_all').click(function(e) {
        e.preventDefault()

        // 1. Reset previous consent cookies if exist
        self.resetUserSettings()
        // 2. Set all consent cookies
        $( self.config.cookieGroups ).each( function(i,val) {
          var cookieName = 'macs_cookies_' + val + '_' + MACS_COOKIES.ID
          self.setCookie( cookieName, 1, self.config.consentLifeDays )
        })
        // 3. Refresh consent date and cookie policy version to renew the consent lifespan
        self.refreshConsentData()
        // 4. Hide the popup
        $('#popup-cookieConsent').hide();
        $('.cookieConsent__overlay.overlay-on').hide();
        // 5. Do the GTM switcheroo from plaintext to script.
        self.setupGTMscripts()
        // 6. Reflect data on settings page if it's currently viewed
        self.checkAllowedBoxes()
        // 7. Print embeds
        self.printEmbeds() // Print embeds function
      })

      // Hide overlay if cookie settings page
      var isCookieSettingsPage = document.getElementsByClassName('cookie_section--settings');
      if (isCookieSettingsPage.length > 0) {
        $('.cookieConsent__overlay.overlay-on').hide();
      }
    }


    // If cookies non exist, hide the iframe embeds
    self.blockEmbeds = function() {

      // If cookies non exist, hide the embeds
      if ( self.cookieExists( 'macs_cookies_statistics_' + MACS_COOKIES.ID ) ) {
        return true;
      }

      var frames = document.getElementsByTagName('iframe');

      if ( ! frames.length ) {
        return
      }

      //  check if are iframes
      $(frames).each(function() {
        $(this).addClass('iframe_withoutcookies')
      });

      $('.iframe_withoutcookies').each(function() {
       var src = $(this).attr('src');

       // Soundcloud iframe
      var exp = new RegExp(/(snd\.sc|soundcloud\.com)/);

        if ( exp.test(src) == true ){

          var sndbUrl = src;
          var sndbH = $(this).attr('height');
          var sndbW = $(this).attr('width');

          var fieldIdInput = $('<div />', {
            'class': 'embed_placeholder_soundcloud embed_placeholder',
            'data-url': sndbUrl,
            'data-height': sndbH,
            'data-width':sndbW,
          })

          fieldIdInput.html(MACS_COOKIES.embedCookiesSnd)
          $(this).replaceWith(fieldIdInput)

        }
      });

      $('.iframe_withoutcookies').each(function() {
        var src = $(this).attr('src');

        // Youtube iframe
        var exp = new RegExp(/(youtu\.be|youtube\.com)/);

        if( exp.test(src) ) {

          $(this).addClass('youtube')

            var ytbUrl = src;
            var ytbH = $(this).height();
            var ytbW = $(this).width();

            var fieldIdInput = $('<div />', {
              'class': 'embed_placeholder_youtube embed_placeholder',
              'data-url': ytbUrl,
              'data-height': ytbH,
              'data-width':ytbW,
            })

            fieldIdInput.html(MACS_COOKIES.embedCookiesYtb)
            $(this).replaceWith(fieldIdInput)

        }
      });

    }

    self.printEmbeds = function() {

      $('.embed_placeholder_youtube').each(function() {

        var url = $(this).attr('data-url');
            iframeH = $(this).attr('data-height');
            iframeW = $(this).attr('data-width');

        var fieldIdInput = $('<iframe />', {
          'class': 'embed_new_youtube',
          'src': url,
          'height': iframeH,
          'width':iframeW,
        })

        $(this).replaceWith(fieldIdInput)

      });

      $('.embed_placeholder_soundcloud').each(function() {

        var url = $(this).attr('data-url');
            iframeH = $(this).attr('data-height');
            iframeW = $(this).attr('data-width');

        var fieldIdInput = $('<iframe />', {
          'class': 'embed_new_soundcloud',
          'src': url,
          'height': iframeH,
          'width': iframeW,
        })

        $(this).replaceWith(fieldIdInput)

      });

    }

    self.trackUserConsent = function() {

      $('#macs_cookies_accept_all').click(function(e) {
        e.preventDefault()
        // add GTM to track user consent- user accepted all cookies
        if (typeof dataLayer !== 'undefined') {
          dataLayer.push({ 'event' : 'user_consent', 'consent_type': 'accept_all' })
        }
      })

      $('#macs_cookies_save_preferences').click(function(e) {
        e.preventDefault()

        $('.cookieConsent__checkbox_container').each(function() {
          if($(this).find('input').is(':checked')){
            var input = $(this).find('input').attr('id');

            if( input === 'accept_cookie_statistics' ){
              // add GTM to track user consent- user accepted statistics cookies
              if (typeof dataLayer !== 'undefined') {
                dataLayer.push({ 'event' : 'user_consent', 'consent_type': 'accept_statistics' })
              }
            }
          }
        })
      })

    }

  }
    macsCookies.init()
})
;
jQuery(document).ready(function ($) {
  var ElasticJobs = new function () {
    var self = this
    var ajaxUrl

    self.component = {}

    self.apiUrl = ELASTIC_JOBS.api_url

    self.siteCountryCode = ELASTIC_JOBS.country_code

    self.siteCountryCodeParam = ELASTIC_JOBS.country_code_param

    self.siteCountryNameParam = ELASTIC_JOBS.country_name_param

    self.init = function () {
      self.component = $('.js-elastic-jobs-loading')

      if (!self.component.length || !self.apiUrl) {
        return
      }

      var queryString = self.buildQueryString()

      if (!queryString) {
        return
      }

      ajaxUrl = self.apiUrl + '/api/jobs?size=500&query=' + queryString
      self.fetchJobs(ajaxUrl)

    }

    self.buildQueryString = function () {

      var params = [ '_exists_:wp_url', '!_exists_:deleted_at', '!_exists_:wp_deleted_at', 'status:1' ]
      var htmlData = self.component.data()

      for (var key in htmlData) {
        if (key === 'keyword') {
          params.push(htmlData[key])
        } else {
          params.push(key + ':' + htmlData[key])
        }
      }

      if (self.siteCountryCode !== 'global' ) {
        params.push('(country_code:' + self.siteCountryCodeParam + '%20OR%20country_name:' + self.siteCountryNameParam + ')')
      }  

      return params.join('%20AND%20')
    }

    self.fetchJobs = function (ajaxurl) {
      $.ajax({
        type: 'GET',
        url: ajaxurl,
        success: function (response, textStatus, jqXHR) {
          var cardTemplate = $('#job_content_template').html()
          // the HTML template located in /content/themes/capgemini-2018-02/template-parts/component/grid/jobs
          var used = 0
          var i

          if (!response.data) {
            self.component.hide()
            return false
          }

          for (i = 0; i < response.data.length; i++) {
            if (used > 6) {
              break
            }

            if (!response.data[i].wp_url || !response.data[i].title) {
              continue
            }

            if (response.data[i].hidden && response.data[i].hidden !== 'false') {
              continue
            }

            var savedData = {
              country: response.data[i].country_name || response.data[i].location || '',
              url: response.data[i].wp_url || '',
              title: response.data[i].title
            }

            if (!savedData.url) {
              continue
            }

            // make sure we are not showing jobs from other regional sites
            if (!self.isProperSite(savedData.url)) {
              continue
            }

            var html = cardTemplate.replace(/{{\s*([a-z]+)\s*}}/g, function (match, val) {
              return savedData[ val ] || ''
            })

            // get first empty placeholder available
            var cardParent = self.component.find('.js-job-placeholder').first()
            cardParent.find('.card_textcard__content').append(html)
            cardParent.removeClass('js-job-placeholder')

            used++
          }

          // remove unused placeholders
          $('.js-job-placeholder').remove()
        },
        error: function (jqXHR, textStatus, errorThrown) {
          self.component.hide()
        }
      })
    }

    // check job's url against the site's country code
    self.isProperSite = function (wpUrl) {
      var regex = /^https?:\/\/www.capgemini.com\/(.+)\/jobs\/.+/gm

      var match = regex.exec(wpUrl)

      // no country code is in url and the site is global, so we're fine
      if (self.siteCountryCode === 'global' && !match) {
        return true
      }

      // no country code in url and we're not on global page
      if (!match || !match[1]) {
        return false
      }

      // country code in job url is the same as site's country code
      if (self.siteCountryCode === match[1]) {
        return true
      }

      return false
    }
  }()

  ElasticJobs.init()
})
;
(function(a){if(typeof define==="function"&&define.amd&&define.amd.jQuery){define(["jquery"],a)}else{if(typeof module!=="undefined"&&module.exports){a(require("jquery"))}else{a(jQuery)}}}(function(f){var y="1.6.15",p="left",o="right",e="up",x="down",c="in",A="out",m="none",s="auto",l="swipe",t="pinch",B="tap",j="doubletap",b="longtap",z="hold",E="horizontal",u="vertical",i="all",r=10,g="start",k="move",h="end",q="cancel",a="ontouchstart" in window,v=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled&&!a,d=(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&!a,C="TouchSwipe";var n={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:true,triggerOnTouchLeave:false,allowPageScroll:"auto",fallbackToMouseEvents:true,excludedElements:"label, button, input, select, textarea, a, .noSwipe",preventDefaultEvents:true};f.fn.swipe=function(H){var G=f(this),F=G.data(C);if(F&&typeof H==="string"){if(F[H]){return F[H].apply(this,Array.prototype.slice.call(arguments,1))}else{f.error("Method "+H+" does not exist on jQuery.swipe")}}else{if(F&&typeof H==="object"){F.option.apply(this,arguments)}else{if(!F&&(typeof H==="object"||!H)){return w.apply(this,arguments)}}}return G};f.fn.swipe.version=y;f.fn.swipe.defaults=n;f.fn.swipe.phases={PHASE_START:g,PHASE_MOVE:k,PHASE_END:h,PHASE_CANCEL:q};f.fn.swipe.directions={LEFT:p,RIGHT:o,UP:e,DOWN:x,IN:c,OUT:A};f.fn.swipe.pageScroll={NONE:m,HORIZONTAL:E,VERTICAL:u,AUTO:s};f.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:i};function w(F){if(F&&(F.allowPageScroll===undefined&&(F.swipe!==undefined||F.swipeStatus!==undefined))){F.allowPageScroll=m}if(F.click!==undefined&&F.tap===undefined){F.tap=F.click}if(!F){F={}}F=f.extend({},f.fn.swipe.defaults,F);return this.each(function(){var H=f(this);var G=H.data(C);if(!G){G=new D(this,F);H.data(C,G)}})}function D(a5,au){var au=f.extend({},au);var az=(a||d||!au.fallbackToMouseEvents),K=az?(d?(v?"MSPointerDown":"pointerdown"):"touchstart"):"mousedown",ax=az?(d?(v?"MSPointerMove":"pointermove"):"touchmove"):"mousemove",V=az?(d?(v?"MSPointerUp":"pointerup"):"touchend"):"mouseup",T=az?(d?"mouseleave":null):"mouseleave",aD=(d?(v?"MSPointerCancel":"pointercancel"):"touchcancel");var ag=0,aP=null,a2=null,ac=0,a1=0,aZ=0,H=1,ap=0,aJ=0,N=null;var aR=f(a5);var aa="start";var X=0;var aQ={};var U=0,a3=0,a6=0,ay=0,O=0;var aW=null,af=null;try{aR.bind(K,aN);aR.bind(aD,ba)}catch(aj){f.error("events not supported "+K+","+aD+" on jQuery.swipe")}this.enable=function(){aR.bind(K,aN);aR.bind(aD,ba);return aR};this.disable=function(){aK();return aR};this.destroy=function(){aK();aR.data(C,null);aR=null};this.option=function(bd,bc){if(typeof bd==="object"){au=f.extend(au,bd)}else{if(au[bd]!==undefined){if(bc===undefined){return au[bd]}else{au[bd]=bc}}else{if(!bd){return au}else{f.error("Option "+bd+" does not exist on jQuery.swipe.options")}}}return null};function aN(be){if(aB()){return}if(f(be.target).closest(au.excludedElements,aR).length>0){return}var bf=be.originalEvent?be.originalEvent:be;var bd,bg=bf.touches,bc=bg?bg[0]:bf;aa=g;if(bg){X=bg.length}else{if(au.preventDefaultEvents!==false){be.preventDefault()}}ag=0;aP=null;a2=null;aJ=null;ac=0;a1=0;aZ=0;H=1;ap=0;N=ab();S();ai(0,bc);if(!bg||(X===au.fingers||au.fingers===i)||aX()){U=ar();if(X==2){ai(1,bg[1]);a1=aZ=at(aQ[0].start,aQ[1].start)}if(au.swipeStatus||au.pinchStatus){bd=P(bf,aa)}}else{bd=false}if(bd===false){aa=q;P(bf,aa);return bd}else{if(au.hold){af=setTimeout(f.proxy(function(){aR.trigger("hold",[bf.target]);if(au.hold){bd=au.hold.call(aR,bf,bf.target)}},this),au.longTapThreshold)}an(true)}return null}function a4(bf){var bi=bf.originalEvent?bf.originalEvent:bf;if(aa===h||aa===q||al()){return}var be,bj=bi.touches,bd=bj?bj[0]:bi;var bg=aH(bd);a3=ar();if(bj){X=bj.length}if(au.hold){clearTimeout(af)}aa=k;if(X==2){if(a1==0){ai(1,bj[1]);a1=aZ=at(aQ[0].start,aQ[1].start)}else{aH(bj[1]);aZ=at(aQ[0].end,aQ[1].end);aJ=aq(aQ[0].end,aQ[1].end)}H=a8(a1,aZ);ap=Math.abs(a1-aZ)}if((X===au.fingers||au.fingers===i)||!bj||aX()){aP=aL(bg.start,bg.end);a2=aL(bg.last,bg.end);ak(bf,a2);ag=aS(bg.start,bg.end);ac=aM();aI(aP,ag);be=P(bi,aa);if(!au.triggerOnTouchEnd||au.triggerOnTouchLeave){var bc=true;if(au.triggerOnTouchLeave){var bh=aY(this);bc=F(bg.end,bh)}if(!au.triggerOnTouchEnd&&bc){aa=aC(k)}else{if(au.triggerOnTouchLeave&&!bc){aa=aC(h)}}if(aa==q||aa==h){P(bi,aa)}}}else{aa=q;P(bi,aa)}if(be===false){aa=q;P(bi,aa)}}function M(bc){var bd=bc.originalEvent?bc.originalEvent:bc,be=bd.touches;if(be){if(be.length&&!al()){G(bd);return true}else{if(be.length&&al()){return true}}}if(al()){X=ay}a3=ar();ac=aM();if(bb()||!am()){aa=q;P(bd,aa)}else{if(au.triggerOnTouchEnd||(au.triggerOnTouchEnd==false&&aa===k)){if(au.preventDefaultEvents!==false){bc.preventDefault()}aa=h;P(bd,aa)}else{if(!au.triggerOnTouchEnd&&a7()){aa=h;aF(bd,aa,B)}else{if(aa===k){aa=q;P(bd,aa)}}}}an(false);return null}function ba(){X=0;a3=0;U=0;a1=0;aZ=0;H=1;S();an(false)}function L(bc){var bd=bc.originalEvent?bc.originalEvent:bc;if(au.triggerOnTouchLeave){aa=aC(h);P(bd,aa)}}function aK(){aR.unbind(K,aN);aR.unbind(aD,ba);aR.unbind(ax,a4);aR.unbind(V,M);if(T){aR.unbind(T,L)}an(false)}function aC(bg){var bf=bg;var be=aA();var bd=am();var bc=bb();if(!be||bc){bf=q}else{if(bd&&bg==k&&(!au.triggerOnTouchEnd||au.triggerOnTouchLeave)){bf=h}else{if(!bd&&bg==h&&au.triggerOnTouchLeave){bf=q}}}return bf}function P(be,bc){var bd,bf=be.touches;if(J()||W()){bd=aF(be,bc,l)}if((Q()||aX())&&bd!==false){bd=aF(be,bc,t)}if(aG()&&bd!==false){bd=aF(be,bc,j)}else{if(ao()&&bd!==false){bd=aF(be,bc,b)}else{if(ah()&&bd!==false){bd=aF(be,bc,B)}}}if(bc===q){if(W()){bd=aF(be,bc,l)}if(aX()){bd=aF(be,bc,t)}ba(be)}if(bc===h){if(bf){if(!bf.length){ba(be)}}else{ba(be)}}return bd}function aF(bf,bc,be){var bd;if(be==l){aR.trigger("swipeStatus",[bc,aP||null,ag||0,ac||0,X,aQ,a2]);if(au.swipeStatus){bd=au.swipeStatus.call(aR,bf,bc,aP||null,ag||0,ac||0,X,aQ,a2);if(bd===false){return false}}if(bc==h&&aV()){clearTimeout(aW);clearTimeout(af);aR.trigger("swipe",[aP,ag,ac,X,aQ,a2]);if(au.swipe){bd=au.swipe.call(aR,bf,aP,ag,ac,X,aQ,a2);if(bd===false){return false}}switch(aP){case p:aR.trigger("swipeLeft",[aP,ag,ac,X,aQ,a2]);if(au.swipeLeft){bd=au.swipeLeft.call(aR,bf,aP,ag,ac,X,aQ,a2)}break;case o:aR.trigger("swipeRight",[aP,ag,ac,X,aQ,a2]);if(au.swipeRight){bd=au.swipeRight.call(aR,bf,aP,ag,ac,X,aQ,a2)}break;case e:aR.trigger("swipeUp",[aP,ag,ac,X,aQ,a2]);if(au.swipeUp){bd=au.swipeUp.call(aR,bf,aP,ag,ac,X,aQ,a2)}break;case x:aR.trigger("swipeDown",[aP,ag,ac,X,aQ,a2]);if(au.swipeDown){bd=au.swipeDown.call(aR,bf,aP,ag,ac,X,aQ,a2)}break}}}if(be==t){aR.trigger("pinchStatus",[bc,aJ||null,ap||0,ac||0,X,H,aQ]);if(au.pinchStatus){bd=au.pinchStatus.call(aR,bf,bc,aJ||null,ap||0,ac||0,X,H,aQ);if(bd===false){return false}}if(bc==h&&a9()){switch(aJ){case c:aR.trigger("pinchIn",[aJ||null,ap||0,ac||0,X,H,aQ]);if(au.pinchIn){bd=au.pinchIn.call(aR,bf,aJ||null,ap||0,ac||0,X,H,aQ)}break;case A:aR.trigger("pinchOut",[aJ||null,ap||0,ac||0,X,H,aQ]);if(au.pinchOut){bd=au.pinchOut.call(aR,bf,aJ||null,ap||0,ac||0,X,H,aQ)}break}}}if(be==B){if(bc===q||bc===h){clearTimeout(aW);clearTimeout(af);if(Z()&&!I()){O=ar();aW=setTimeout(f.proxy(function(){O=null;aR.trigger("tap",[bf.target]);if(au.tap){bd=au.tap.call(aR,bf,bf.target)}},this),au.doubleTapThreshold)}else{O=null;aR.trigger("tap",[bf.target]);if(au.tap){bd=au.tap.call(aR,bf,bf.target)}}}}else{if(be==j){if(bc===q||bc===h){clearTimeout(aW);clearTimeout(af);O=null;aR.trigger("doubletap",[bf.target]);if(au.doubleTap){bd=au.doubleTap.call(aR,bf,bf.target)}}}else{if(be==b){if(bc===q||bc===h){clearTimeout(aW);O=null;aR.trigger("longtap",[bf.target]);if(au.longTap){bd=au.longTap.call(aR,bf,bf.target)}}}}}return bd}function am(){var bc=true;if(au.threshold!==null){bc=ag>=au.threshold}return bc}function bb(){var bc=false;if(au.cancelThreshold!==null&&aP!==null){bc=(aT(aP)-ag)>=au.cancelThreshold}return bc}function ae(){if(au.pinchThreshold!==null){return ap>=au.pinchThreshold}return true}function aA(){var bc;if(au.maxTimeThreshold){if(ac>=au.maxTimeThreshold){bc=false}else{bc=true}}else{bc=true}return bc}function ak(bc,bd){if(au.preventDefaultEvents===false){return}if(au.allowPageScroll===m){bc.preventDefault()}else{var be=au.allowPageScroll===s;switch(bd){case p:if((au.swipeLeft&&be)||(!be&&au.allowPageScroll!=E)){bc.preventDefault()}break;case o:if((au.swipeRight&&be)||(!be&&au.allowPageScroll!=E)){bc.preventDefault()}break;case e:if((au.swipeUp&&be)||(!be&&au.allowPageScroll!=u)){bc.preventDefault()}break;case x:if((au.swipeDown&&be)||(!be&&au.allowPageScroll!=u)){bc.preventDefault()}break}}}function a9(){var bd=aO();var bc=Y();var be=ae();return bd&&bc&&be}function aX(){return !!(au.pinchStatus||au.pinchIn||au.pinchOut)}function Q(){return !!(a9()&&aX())}function aV(){var bf=aA();var bh=am();var be=aO();var bc=Y();var bd=bb();var bg=!bd&&bc&&be&&bh&&bf;return bg}function W(){return !!(au.swipe||au.swipeStatus||au.swipeLeft||au.swipeRight||au.swipeUp||au.swipeDown)}function J(){return !!(aV()&&W())}function aO(){return((X===au.fingers||au.fingers===i)||!a)}function Y(){return aQ[0].end.x!==0}function a7(){return !!(au.tap)}function Z(){return !!(au.doubleTap)}function aU(){return !!(au.longTap)}function R(){if(O==null){return false}var bc=ar();return(Z()&&((bc-O)<=au.doubleTapThreshold))}function I(){return R()}function aw(){return((X===1||!a)&&(isNaN(ag)||ag<au.threshold))}function a0(){return((ac>au.longTapThreshold)&&(ag<r))}function ah(){return !!(aw()&&a7())}function aG(){return !!(R()&&Z())}function ao(){return !!(a0()&&aU())}function G(bc){a6=ar();ay=bc.touches.length+1}function S(){a6=0;ay=0}function al(){var bc=false;if(a6){var bd=ar()-a6;if(bd<=au.fingerReleaseThreshold){bc=true}}return bc}function aB(){return !!(aR.data(C+"_intouch")===true)}function an(bc){if(!aR){return}if(bc===true){aR.bind(ax,a4);aR.bind(V,M);if(T){aR.bind(T,L)}}else{aR.unbind(ax,a4,false);aR.unbind(V,M,false);if(T){aR.unbind(T,L,false)}}aR.data(C+"_intouch",bc===true)}function ai(be,bc){var bd={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};bd.start.x=bd.last.x=bd.end.x=bc.pageX||bc.clientX;bd.start.y=bd.last.y=bd.end.y=bc.pageY||bc.clientY;aQ[be]=bd;return bd}function aH(bc){var be=bc.identifier!==undefined?bc.identifier:0;var bd=ad(be);if(bd===null){bd=ai(be,bc)}bd.last.x=bd.end.x;bd.last.y=bd.end.y;bd.end.x=bc.pageX||bc.clientX;bd.end.y=bc.pageY||bc.clientY;return bd}function ad(bc){return aQ[bc]||null}function aI(bc,bd){bd=Math.max(bd,aT(bc));N[bc].distance=bd}function aT(bc){if(N[bc]){return N[bc].distance}return undefined}function ab(){var bc={};bc[p]=av(p);bc[o]=av(o);bc[e]=av(e);bc[x]=av(x);return bc}function av(bc){return{direction:bc,distance:0}}function aM(){return a3-U}function at(bf,be){var bd=Math.abs(bf.x-be.x);var bc=Math.abs(bf.y-be.y);return Math.round(Math.sqrt(bd*bd+bc*bc))}function a8(bc,bd){var be=(bd/bc)*1;return be.toFixed(2)}function aq(){if(H<1){return A}else{return c}}function aS(bd,bc){return Math.round(Math.sqrt(Math.pow(bc.x-bd.x,2)+Math.pow(bc.y-bd.y,2)))}function aE(bf,bd){var bc=bf.x-bd.x;var bh=bd.y-bf.y;var be=Math.atan2(bh,bc);var bg=Math.round(be*180/Math.PI);if(bg<0){bg=360-Math.abs(bg)}return bg}function aL(bd,bc){var be=aE(bd,bc);if((be<=45)&&(be>=0)){return p}else{if((be<=360)&&(be>=315)){return p}else{if((be>=135)&&(be<=225)){return o}else{if((be>45)&&(be<135)){return x}else{return e}}}}}function ar(){var bc=new Date();return bc.getTime()}function aY(bc){bc=f(bc);var be=bc.offset();var bd={left:be.left,right:be.left+bc.outerWidth(),top:be.top,bottom:be.top+bc.outerHeight()};return bd}function F(bc,bd){return(bc.x>bd.left&&bc.x<bd.right&&bc.y>bd.top&&bc.y<bd.bottom)}}}));;
(function ($) {
  function MobileSlider (container) {
    var self = this

    self.config = {
      breakpoint: 767,
      speed: 400,
      padding: 15,
      perSlide: 1,
      resizeTimeout: 250
    }

    // collect slider data from DOM
    self.container = container
    self.slides = self.container.children('div')

    /**
     * 'Desktop version' flag
     *
     * can be set with element's data attribute
     *
     * NOTE: By default slider is activated only for small resolutions and slider's specific markup is build/destroyed with JS depending on screen size.
     *       On big screens slider is off, and elements keep their initial markup. That means no additional wrappers, no bullet nav and so on.
     *
     *       Desktop Version allows to initialize slider also on big screens. In that case we do not build, destroy or modify HTML, all wrappers and slider elements
     *       need to be provided in html file.
     */
    self.isDesktopVer = self.container.data('is-desktop') || 0

    // current slide - starts with first one and gets updated when slider is in use
    self.currentSlide = 0

    /**
     * Multiple elements in slide
     *
     * can be set with element's data attribute
     */
    if (self.container.data('per-slide') > self.config.perSlide) {
      self.config.perSlide = self.container.data('per-slide')
    }

    /**
     * Initialize slider
     */
    self.init = function () {
      var defaultPerSlide = 1
      if (self.config.perSlide > defaultPerSlide) {
        self.wrapItems()
      }

      if (!self.isDesktopVer) {
        if ($(window).width() <= self.config.breakpoint) {
          self.createMarkup()
        } else {
          self.destroyMarkup()
        }
      }

      self.slides.eq(0).addClass('slider__item--active')

      self.initBulletNav()

      if (self.isDesktopVer) {
        self.initArrows()
      }

      self.container.parents('.slider').swipe({
        allowPageScroll: 'vertical',
        preventDefaultEvents: false,
        excludedElements: 'label, button, input, select, textarea, .noSwipe',
        swipe: function (event, direction) {
          if ($(window).width() <= self.config.breakpoint) {
            var current = self.container.find('.slider__item--active'),
              index = current.index(),
              step = 1

            if (direction === 'left' && current.next().length > 0) {
              self.goToSlide(index + step)
            } else if (direction === 'right' && current.prev().length > 0) {
              self.goToSlide(index - step)
            }
          }
        }
      })

      self.resizeSlider()
      $(window).resize(lodash.debounce(self.resizeSlider, 100))
    }

    self.createMarkup = function () {
      if (self.container.hasClass('slider__swipe-list')) {
        self.goToSlide(self.currentSlide)
        return false
      }

      var swipeWindow = $('<div />', { 'class': 'slider__swipe-window' }),
        sliderContainer = $('<div />', { 'class': 'slider' }),
        bullets = $('<nav />', { 'class': 'slider__bullets' })

      self.container.addClass('slider__swipe-list')
        .wrap(sliderContainer.append(swipeWindow))

      self.slides.addClass('slider__item')
      if (!self.bulletNav) {
        self.bulletNav = bullets.appendTo(self.container.parents('.slider'))
        self.initBulletNav()
      }
      return false
    }

    self.destroyMarkup = function () {
      if (self.container.parents('.slider').length) {
        self.container.removeClass('slider__swipe-list')
          .unwrap('.slider__swipe-window')
          .unwrap('.slider')
        self.slides.removeClass('slider__item')
      }
    }

    self.wrapItems = function () {
      for (var i = 0; i < self.slides.length; i += self.config.perSlide) {
        var slideContainer = $('<div />', { 'class': 'col-12 multislide-wrap' }),
          slideRow = $('<div />', { 'class': 'row' }),
          wrapper = slideContainer.append(slideRow)

        self.slides.slice(i, i + self.config.perSlide).wrapAll(wrapper)
      }
      self.slides = self.container.find('.multislide-wrap')
    }

    self.initBulletNav = function () {
      if (self.slides.length < 2) {
        return
      }

      self.bulletsNav = self.container.parents('.slider').find('.slider__bullets')
      self.bulletsNav.empty()
      $(self.slides).each(function (index) {
        var indexModifier = 1,
          indexForPeople = index + indexModifier,
          linkItem = $('<button />', { 'type': 'button', 'class': 'slider__bullet-item', 'data-index': index }),
          label = $('<span />', { 'class': 'sr-only' }).text('Go to slide ' + indexForPeople)

        linkItem.append(label)
          .appendTo(self.bulletsNav)
          .click(function (e) {
            e.preventDefault()
            self.goToSlide($(this).data('index'))
          })
        self.bulletsNav.find('.slider__bullet-item').first().addClass('slider__bullet-item--active')
      })
    }

    self.goToSlide = function (index) {
      if (index > self.slides.length - 1) {
        index = 0
      }

      if (index < 0) {
        index = self.slides.length - 1
      }

      var targeted = self.container.find('.slider__item').eq(index)

      if (!targeted || !targeted.length) {
        return
      }

      var distance = targeted.position().left + self.container.parents('.slider__swipe-window').scrollLeft()

      self.container.find('.slider__item.slider__item--active')
        .removeClass('slider__item--active')

      targeted.addClass('slider__item--active')

      self.container.parents('.slider__swipe-window')
        .animate({ scrollLeft: distance }, self.config.speed)

      self.currentSlide = index
      self.updateBulletNav()
    }

    self.updateBulletNav = function () {
      if (self.slides.length < 2) {
        return
      }

      var index = self.container.find('.slider__item.slider__item--active')
        .index()

      self.bulletsNav.find('.slider__bullet-item')
        .removeClass('slider__bullet-item--active')
        .blur()
        .eq(index)
        .addClass('slider__bullet-item--active')
    }

    self.initArrows = function () {
      var outerWrapper = self.container.closest('.container--slider')

      if (outerWrapper) {
        var btnNext = outerWrapper.find('.slider__btn--next') || 0,
          btnPrev = outerWrapper.find('.slider__btn--prev') || 0

        if (btnNext) {
          btnNext.click(function () {
            self.goToSlide(self.currentSlide + 1)
          })
        }

        if (btnPrev) {
          btnPrev.click(function () {
            self.goToSlide(self.currentSlide - 1)
          })
        }
      }
    }

    self.resizeSlider = function () {
      if (!self.isDesktopVer) {
        if ($(window).width() <= self.config.breakpoint) {
          clearTimeout(self.resizeEnd)
          self.resizeEnd = setTimeout(function () {
            self.createMarkup()
          }, self.config.resizeTimeout)
        } else {
          self.destroyMarkup()
        }
      } else {
        self.goToSlide(self.currentSlide)
      }
    }
  }

  $(document).ready(function () {
    $('.slider-mobile').each(function () {
      var ms = new MobileSlider($(this))
      ms.init()
    })
  })
})(jQuery)
;
!function(e){var t={};function i(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(s,a,function(t){return e[t]}.bind(null,a));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p=".",i(i.s=0)}([function(e,t,i){i(1),e.exports=i(8)},function(e,t,i){i(2),i(3),i(4),i(5),i(6),i(7)},function(e,t){var i;(i=jQuery)(".card_accordion").find(".card_accordion__title").click((function(){i(this).next().slideToggle("fast"),i(this).toggleClass("current-arrow"),i(".card_accordion_content").not(i(this).next()).slideUp("fast")}))},function(e,t){var i,s;i=jQuery,s={menu:"",startDistance:0,breakpoint:1200,isMobile:0,menuLabelEl:"",init:function(){s.menu=i("#fixedbar"),s.startDistance=i(".hero").outerHeight()+i(".header").outerHeight(),s.menuLabelEl=i(".fixednav__label > span").first(),s.adaptToSize(i(window).width()),i(".nav--cloud-services.cs_nav--cloud-services").css("top",s.startDistance),i(".component__hero-subpage__link--more").click((function(e){e.preventDefault(),s.softscroll(s.startDistance+30)})),i(".cs_container--nav a ").click((function(e){href=i(this).attr("href"),s.softscroll(i(href).position().top-90),s.isMobile&&(i(".cs_menu-cloud-services").slideUp(100),e.preventDefault())})),i(".fixednav__label").click((function(e){i(".cs_menu-cloud-services").slideToggle()})),i(".cs_container--nav a ").each((function(){var e=i(this).attr("href");e&&"#"===e[0]&&i(e).addClass("js-in-menu")})),i(window).on("resize",_.debounce((function(){s.adaptToSize(i(window).width())}),100))},maybeFix:function(e){s.menu&&(e>=s.startDistance?(s.menu.addClass("menu--fixed"),s.menu.css("top","0")):(s.menu.removeClass("menu--fixed"),s.menu.css("top",s.startDistance),s.isMobile&&s.menuLabelEl.text("Menu")))},softscroll:function(e){i("html, body").animate({scrollTop:e},500)},followScroll:function(){var e;i(".js-in-menu").each((function(){if(i(window).scrollTop()>i(this).offset().top-91){var t="#"+i(this).attr("id");e=i(".cs_menu-item a").filter((function(){return i(this).attr("href")===t})).first().closest("li")}})),e?e.hasClass("active")||(i(".cs_menu-item").removeClass("active"),e.addClass("active"),s.isMobile&&s.menuLabelEl.text(e.find("a").text())):i(".cs_menu-item").removeClass("active")},adaptToSize:function(e){e<s.breakpoint?(s.isMobile=1,i("#fixedbar").css("display","none")):(s.isMobile=0,i(".cs_menu-cloud-services").css("display",""),i("#fixedbar").css("display","inline-block"))}},i(document).ready((function(){i("#fixedbar").length&&s.init(),setTimeout((function(){var e;(e=i(".js-to-show").first()).length&&e.offset().top<i(window).height()&&(e.addClass("js-shown"),setTimeout((function(){e.addClass("js-shown-notrans")}),1e3))}),300)})),i(window).on("scroll",lodash.debounce((function(){i("#fixedbar").length&&(s.maybeFix(i(this).scrollTop()),s.followScroll()),i(".js-to-show").each((function(){if(i(this).offset().top<=i(window).scrollTop()+i(window).height()){i(this).addClass("js-shown");var e=i(this);setTimeout((function(){e.addClass("js-shown-notrans")}),1e3)}}))}),10))},function(e,t){!function(e){var t,i,s,a=e.Deferred();function n(){e(".video_full__button").fadeIn(200)}function o(t){i=t.data,setTimeout((function(){0===i&&(l(),e(".video_full__button").text(CG_hero.replayString)),2===i&&(e(".video_full__button").text(CG_hero.resumeString),l())}),1e3)}function l(){e(".video_full").removeClass("active"),s.removeClass("active"),t.pauseVideo()}window.onYouTubeIframeAPIReady=function(){a.resolve(window.YT)},e(document).ready((function(){if(e(".video_full__embed").length){if("YT"in window)a.resolve(window.YT);else{var l=document.createElement("script");l.src="https://www.youtube.com/iframe_api";var r=document.getElementsByTagName("script")[0];r.parentNode.insertBefore(l,r)}i=-1,s=e(".video_full__embed");var d=function(e){t=new e.Player("hero-player",{height:s.height(),width:s.width(),videoId:s.data("youtube-id"),playerVars:{rel:0,modestbranding:1},events:{onReady:n,onStateChange:o}})};"YT"in window?d(window.YT):a.done(d),e(".video_full__button").hover((function(){e(".video_full__inner").toggleClass("hovered")})),e(".video_full__button").click((function(){e(".video_full").addClass("active"),s.addClass("active"),t.playVideo()}))}}))}(jQuery)},function(e,t){!function(e){if(0!==e(".tabs").length){var t,i,s,a,n=e.map(e(".tabs__list ul li"),(function(t){return e(t).outerWidth(!0)}));function o(){var i=e(".tabs__nav li.active a").attr("href");if(window.location.hash&&e(".tabs__nav li a[href='"+window.location.hash+"']").length>0){window.location.hash!==i&&(i=(i=window.location.hash).replace("#",""),e(".tabs__nav li").removeClass("active"),e(".tabs__nav li a").attr("aria-selected",!1),e(".tabs__nav li a[href='#"+i+"']").attr("aria-selected",!0),e(".tabs__nav li a[href='#"+i+"']").parent().addClass("active"),e(".tabs__tab[data-id="+i+"]").attr("tabindex",-1).focus()),i=i.replace("#","");var n=e(".tabs__tab[data-id="+i+"]").parents(".section").offset().top;window.setTimeout((function(){e("html, body").animate({scrollTop:n},600)}),150)}if(i=i.replace("#",""),e(".tabs__tab[data-id="+i+"]").attr("aria-hidden",!1).fadeIn(),e(".tabs__sections").height(e(".tabs__tab[data-id="+i+"]").height()),t>=s)if(e(".tabs__nav li.active").is(":first-child")||e(".tabs__nav li.active").is(":last-child"))e(".tabs__nav li.active").is(":first-child")?(e(".tabs__nav .tabs__list--services ul").animate({left:0},1e3),e(".tabs__previous").addClass("opacity"),e(".tabs__next").removeClass("opacity")):e(".tabs__nav li.active").is(":last-child")&&(e(".tabs__nav .tabs__list--services ul").animate({left:-a},1e3),e(".tabs__next").addClass("opacity"),e(".tabs__previous").removeClass("opacity"));else{var o=e(".tabs__nav li.active").position().left-e(".tabs__list").width()/2+e(".tabs__nav li.active").width()/2;o>=a?(o=a,e(".tabs__next").addClass("opacity"),e(".tabs__previous").removeClass("opacity")):o<=0?(o=0,e(".tabs__previous").addClass("opacity"),e(".tabs__next").removeClass("opacity")):(e(".tabs__previous").removeClass("opacity"),e(".tabs__next").removeClass("opacity")),e(".tabs__nav .tabs__list--services ul").animate({left:-o},1e3)}}function l(){n=e.map(e(".tabs__list ul li"),(function(t){return e(t).outerWidth(!0)})),t=n.reduce((function(e,t){return e+t}),0),i=e(".tabs__list--services ul").css("left"),Math.abs(t-parseFloat(i)),s=e(".tabs__list--services").innerWidth(),t>=s?(e(".tabs__next").removeClass("inactive"),e(".tabs__previous").removeClass("inactive")):(e(".tabs__next").addClass("inactive"),e(".tabs__previous").addClass("inactive")),s=e(".tabs__list--services").innerWidth(),a=Math.floor(t-s)}e(".tabs__nav .tabs__list li a").on("click",(function(){e(".tabs__tab").attr("aria-hidden",!0).fadeOut().promise().done((function(){o()}))})),e(".tabs__next").mouseover((function(){e(".tabs__nav .tabs__list--services ul").animate({left:-a},{duration:1e3,specialEasing:{left:"linear"}})})).mouseout((function(){e(".tabs__nav .tabs__list--services ul").stop().animate();var t=Math.floor(parseFloat(e(".tabs__nav .tabs__list--services ul").css("left")));t<=-a?(t=a,e(".tabs__next").addClass("opacity"),e(".tabs__previous").removeClass("opacity")):t>=0?(t=0,e(".tabs__previous").addClass("opacity"),e(".tabs__next").removeClass("opacity")):(e(".tabs__previous").removeClass("opacity"),e(".tabs__next").removeClass("opacity"))})),e(".tabs__previous").mouseover((function(){e(".tabs__nav .tabs__list--services ul").animate({left:0},{duration:1e3,specialEasing:{left:"linear"}})})).mouseout((function(){e(".tabs__nav .tabs__list--services ul").stop().animate();var t=Math.floor(parseFloat(e(".tabs__nav .tabs__list--services ul").css("left")));t<=-a?(t=a,e(".tabs__next").addClass("opacity"),e(".tabs__previous").removeClass("opacity")):t>=0?(t=0,e(".tabs__previous").addClass("opacity"),e(".tabs__next").removeClass("opacity")):(e(".tabs__previous").removeClass("opacity"),e(".tabs__next").removeClass("opacity"))})),e(document).ready((function(){l(),o()})),e(window).resize(lodash.debounce((function(){l(),o()}),100))}}(jQuery)},function(e,t){!function(e){var t=e(".logos_and_quotes__slideshow");this.container=t,this.slides=this.container.children("blockquote"),e(".logos_and_quotes__slideshow > .logos_and_quotes__quote:gt(0)").hide();var i=0;e(".logos_and_quotes__slideshow > .logos_and_quotes__quote").each((function(){e(this).height()>i&&(i=e(this).height())})),e(".logos_and_quotes__slideshow").height(i),this.slides.length>1&&setInterval((function(){e(".logos_and_quotes__slideshow > .logos_and_quotes__quote:first").fadeOut(1e3).next().fadeIn(1e3).end().appendTo(".logos_and_quotes__slideshow")}),9e3)}(jQuery)},function(e,t){!function(e){function t(t){var i=this;i.config={breakpoint:767,speed:400,padding:15,perSlide:1,resizeTimeout:250},i.container=t,i.slides=i.container.children("div"),i.isDesktopVer=i.container.data("is-desktop")||0,i.currentSlide=0,i.container.data("per-slide")>i.config.perSlide&&(i.config.perSlide=i.container.data("per-slide")),i.init=function(){i.config.perSlide>1&&i.wrapItems(),i.isDesktopVer||(e(window).width()<=i.config.breakpoint?i.createMarkup():i.destroyMarkup()),i.slides.eq(0).addClass("slider__item--active"),i.initBulletNav(),i.isDesktopVer&&i.initArrows(),i.container.parents(".slider").swipe({allowPageScroll:"vertical",preventDefaultEvents:!1,excludedElements:"label, button, input, select, textarea, .noSwipe",swipe:function(t,s){if(e(window).width()<=i.config.breakpoint){var a=i.container.find(".slider__item--active"),n=a.index();"left"===s&&a.next().length>0?i.goToSlide(n+1):"right"===s&&a.prev().length>0&&i.goToSlide(n-1)}}}),i.resizeSlider(),e(window).resize(lodash.debounce(i.resizeSlider,100))},i.createMarkup=function(){if(i.container.hasClass("slider__swipe-list"))return i.goToSlide(i.currentSlide),!1;var t=e("<div />",{class:"slider__swipe-window"}),s=e("<div />",{class:"slider"}),a=e("<nav />",{class:"slider__bullets"});return i.container.addClass("slider__swipe-list").wrap(s.append(t)),i.slides.addClass("slider__item"),i.bulletNav||(i.bulletNav=a.appendTo(i.container.parents(".slider")),i.initBulletNav()),!1},i.destroyMarkup=function(){i.container.parents(".slider").length&&(i.container.removeClass("slider__swipe-list").unwrap(".slider__swipe-window").unwrap(".slider"),i.slides.removeClass("slider__item"))},i.wrapItems=function(){for(var t=0;t<i.slides.length;t+=i.config.perSlide){var s=e("<div />",{class:"col-12 multislide-wrap"}),a=e("<div />",{class:"row"}),n=s.append(a);i.slides.slice(t,t+i.config.perSlide).wrapAll(n)}i.slides=i.container.find(".multislide-wrap")},i.initBulletNav=function(){i.slides.length<2||(i.bulletsNav=i.container.parents(".slider").find(".slider__bullets"),i.bulletsNav.empty(),e(i.slides).each((function(t){var s=t+1,a=e("<button />",{type:"button",class:"slider__bullet-item","data-index":t}),n=e("<span />",{class:"sr-only"}).text("Go to slide "+s);a.append(n).appendTo(i.bulletsNav).click((function(t){t.preventDefault(),i.goToSlide(e(this).data("index"))})),i.bulletsNav.find(".slider__bullet-item").first().addClass("slider__bullet-item--active")})))},i.goToSlide=function(e){e>i.slides.length-1&&(e=0),e<0&&(e=i.slides.length-1);var t=i.container.find(".slider__item").eq(e);if(t&&t.length){var s=t.position().left+i.container.parents(".slider__swipe-window").scrollLeft();i.container.find(".slider__item.slider__item--active").removeClass("slider__item--active"),t.addClass("slider__item--active"),i.container.parents(".slider__swipe-window").animate({scrollLeft:s},i.config.speed),i.currentSlide=e,i.updateBulletNav()}},i.updateBulletNav=function(){if(!(i.slides.length<2)){var e=i.container.find(".slider__item.slider__item--active").index();i.bulletsNav.find(".slider__bullet-item").removeClass("slider__bullet-item--active").blur().eq(e).addClass("slider__bullet-item--active")}},i.initArrows=function(){var e=i.container.closest(".container--slider");if(e){var t=e.find(".slider__btn--next")||0,s=e.find(".slider__btn--prev")||0;t&&t.click((function(){i.goToSlide(i.currentSlide+1)})),s&&s.click((function(){i.goToSlide(i.currentSlide-1)}))}},i.resizeSlider=function(){i.isDesktopVer?i.goToSlide(i.currentSlide):e(window).width()<=i.config.breakpoint?(clearTimeout(i.resizeEnd),i.resizeEnd=setTimeout((function(){i.createMarkup()}),i.config.resizeTimeout)):i.destroyMarkup()}}e(document).ready((function(){e(".slider-mobile").each((function(){new t(e(this)).init()}))}))}(jQuery)},function(e,t,i){}]);
//# sourceMappingURL=bundle.js.map;
( function ( $ ){

	$( '.ourcompany__contact__textcard .card_map__contact a' ).addClass( 'popup-open' ).attr( 'data-popup', 'popup-regular' )

	$( '.panel__content .card_map a' ).on( 'click', function ( e ){
		e.preventDefault()
		var myCard = $( this ).parents( '.card_map' ),
			  myCountry = $( this ).parents( '.panel' ).find( '.panel__header span' ).text(),
			  myCardTitle = myCard.find( '.card_map__title' ).text(),
			  myCardText = myCard.find( '.card_map__text' ).html(),
			  pos = $( '.ourcompany__contact__textcard' ).offset().top

		$( '.ourcompany__contact__country-name' ).text( myCountry )
		$( '.ourcompany__contact__textcard .card_map__title' ).text( myCardTitle )
		$( '.ourcompany__contact__textcard .card_map__text' ).html( myCardText )
		$( '.ourcompany__contact__textcard .card_map__contact a' ).attr( 'data-reference', $( this ).data( 'reference' ) )
		$('#map').height($('.ourcompany__contact__map').height())
	} )

	$( '.ourcompany__contact__textcard .card_map__contact a' ).on( 'click', function () {
		$( '#contact-popup .col-right' ).html( $( this ).parents( '.ourcompany__contact__textcard' ).html() )
	} )

} )(jQuery);
;
(function ($) {
  var lastFocus

  $('.popup-open').on('click', function (e) {
    e.preventDefault()
    lastFocus = $(this)
    var myPopup = $(this).attr('data-popup'),
		    $popup = $('.popup__overlay[data-popup="' + myPopup + '"]').first(),
		    $form = $popup.find('.form')
    $popup.fadeIn(function () {
      // Select2 reset
      $popup.find('select').each(function () {
        $(this).width('100%')
        $(this).select2()
      })
    })
    $('body').addClass('nooverflow')
    $('> div', $popup).attr('tabindex', -1).focus()
    // Set reference hidden field if data attribute present.
    if ($form.length && $(this).data('reference') && typeof nfRadio !== 'undefined') {
      var refField = nfRadio.channel('form-' + $form.data('form-id'))
        .request('get:fieldByKey', 'reference')
      if (refField) {
        refField
          .set('value', $(this).data('reference'))
          .trigger('reRender')
      }
    }
  })

  // BTB Submit - MOCKUP

  var interval

  $('.form__send--btb').on('click', function (e) {
    e.preventDefault()
    $('.popup--btb__content-step1').hide()
    $('.popup--btb__content-step2').show()
    var secondsToFade = 4
    $('.popup--btb__timeinfo span').text(secondsToFade)
    interval = setInterval(function () {
      secondsToFade--
      $('.popup--btb__timeinfo span').text(secondsToFade)
      if (secondsToFade === 0) {
        closePopup($('.popup__overlay[data-popup="popup-btb"]'))
      }
    }, 1000)
  })

  // Close

  function closePopup (myContext) {
    $('.popup__overlay').fadeOut().promise().done(function () {
      if (myContext.attr('data-popup') === 'popup-btb' && interval) {
        clearInterval(interval)
        $('.popup--btb__content-step2').hide()
        $('.popup--btb__content-step1').show()
      }
    })
    $('body').removeClass('nooverflow')
    if (lastFocus) {
      lastFocus.focus()
    }
  }

  $('.popup__close').on('click', function () {
    closePopup($(this).parents('.popup__overlay'))
  })

  $('.popup__overlay').unbind().on('click', function (event) {
    // do not close the popup on clicking send button if there are ninja form errors
    if ($(event.target).hasClass('form__send')) {
      return false
    }

    if (!$(event.target).hasClass('select-clear') && !$(event.target).hasClass('popup__box') && !$(event.target).parents('.popup__box').length && !$(event.target).parents('.popup--btb__box').length) {
      closePopup($(this))
    }
  })

  // ESCAPE key

  $(document).keydown(function (e) {
    if (e.keyCode === 27) {
      if ($('.popup__overlay[data-popup="popup-regular"]').is(':visible')) {
        closePopup($('.popup__overlay[data-popup="popup-regular"]'))
      } else if ($('.popup__overlay[data-popup="popup-btb"]').is(':visible')) {
        closePopup($('.popup__overlay[data-popup="popup-btb"]'))
      }
    }
  })
})(jQuery)
;
( function ( $ ) {
	var lastFocus

	function resizeVideo() {
		var myPopupVideoH = $( '.popup--video__box' ).width() * 315/560
		if ( myPopupVideoH > $( window ).height() ) {
			myPopupVideoH = $( window ).height()
			var myPopupVideoW = myPopupVideoH * 560 / 315
			$( '.popup--video__box iframe' ).width( myPopupVideoW )
		} else {
			$( '.popup--video__box iframe' ).width( '100%' )
		}
		$( '.popup--video__box iframe' ).height( myPopupVideoH )
		if ( $( '.popup--video__box' ).height() > $( window ).height() + 20 ) {
			$( '.popup__overlay' ).addClass( 'popup__overlay--responsive' )
		} else {
			$( '.popup__overlay' ).removeClass( 'popup__overlay--responsive' )
		}
	}

	$( '.popup-video-open' ).on( 'click', function ( e ) {
		e.preventDefault()
		lastFocus = $( this )
		$( '.popup__overlay[data-popup="popup-video"]' ).fadeIn().attr( 'tabindex', - 1 ).focus()
		$( 'body' ).addClass( 'nooverflow' )
		resizeVideo()
	} )

	$( window ).resize( lodash.debounce( resizeVideo, 100 ) )

	// Close

	function closeVideoPopup( myContext ) {
		$( '.popup__overlay' ).fadeOut()
		$( 'body' ).removeClass( 'nooverflow' )
		var keeper = myContext.find( '.popup--video__iframe' ).attr( 'src' )
		myContext.find( '.popup--video__iframe' ).attr( 'src', '' )
		myContext.find( '.popup--video__iframe' ).attr( 'src', keeper )
		lastFocus.focus()
	}

	$( '.popup--video__close' ).on( 'click', function () {
		closeVideoPopup( $( this ).parents( '.popup__overlay' ) )
	} )

	$( '.popup__overlay[data-popup="popup-video"]' ).unbind().on( 'click', function () {
		closeVideoPopup( $( this ) )
	} ).children().on( 'click', function () {
		return false
	} )

	// ESCAPE key

	$( document ).keydown( function ( e ) {
		if ( e.keyCode === 27 && $( '.popup__overlay[data-popup="popup-video"]' ).is( ':visible' ) ) {
			closeVideoPopup( $( '.popup__overlay[data-popup="popup-video"]:visible' ) )
		}
	} )

} )( jQuery );
;
( function ( $ ){

	var player,
	    heroCurrentState,
		  heroVideoWrapper,
		  YTdeferred = $.Deferred()			

	// create deferred object so we can use YT api outside of global scope

	window.onYouTubeIframeAPIReady = function() {
		YTdeferred.resolve( window.YT )
	}

	// show button only if video is loaded

	function onPlayerReady() {
		$( '.video_full__button' ).fadeIn( 200 )
	}

	// hide player when stopped or paused

	function onPlayerStateChange( event ) {
		heroCurrentState = event.data
		setTimeout( function() {
			if ( heroCurrentState === 0 ){
				hideHeroPlayer()
				$( '.video_full__button' ).text( CG_hero.replayString )
			}

			if ( heroCurrentState === 2 ){
				$( '.video_full__button' ).text( CG_hero.resumeString )
				hideHeroPlayer()
			}
		}, 1000 )
	}

	// function to hide the player

	function hideHeroPlayer() {
		$( '.video_full' ).removeClass( 'active' )
		heroVideoWrapper.removeClass( 'active' )
		player.pauseVideo()
	}

	// function to show the player
	function showHeroPlayer() {
		$( '.video_full' ).addClass( 'active' )
		heroVideoWrapper.addClass( 'active' )
		player.playVideo()
	}

	$( document ).ready( function () {

		if ( $( '.video_full__embed' ).length ) {

			// embedding youtube iframe api
			if ( 'YT' in window ) {
				YTdeferred.resolve( window.YT );
			} else {
				var tag = document.createElement( 'script' )
				tag.src = 'https://www.youtube.com/iframe_api'
				var firstScriptTag = document.getElementsByTagName( 'script' )[ 0 ]
				firstScriptTag.parentNode.insertBefore( tag, firstScriptTag )
			}

			heroCurrentState = - 1
			heroVideoWrapper = $( '.video_full__embed' )

			// create a player when Youtuve API is loaded
			var callback = function( YT ) {
				player = new YT.Player( 'hero-player', {
					height: heroVideoWrapper.height(),
					width: heroVideoWrapper.width(),
					videoId: heroVideoWrapper.data( 'youtube-id' ),
					playerVars: {
						'rel': 0,
						'modestbranding': 1
					},
					events: {
						'onReady': onPlayerReady,
						'onStateChange': onPlayerStateChange
					}
				} );
			};

			if ( 'YT' in window ) {
				callback( window.YT );
			} else {
				YTdeferred.done( callback );
			}

			// play button events

			$( '.video_full__button' ).hover( function () {
				$( '.video_full__inner' ).toggleClass( 'hovered' )
			} )

			$( '.video_full__button' ).click( function () {
				showHeroPlayer()
			} )

		}
	} )

} )( jQuery )
;
/*!
 * SelectWoo 5.0.0
 * https://github.com/woocommerce/selectWoo
 *
 * Released under the MIT license
 * https://github.com/woocommerce/selectWoo/blob/master/LICENSE.md
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node/CommonJS
    module.exports = function (root, jQuery) {
      if (jQuery === undefined) {
        // require('jQuery') returns a factory that requires window to
        // build a jQuery instance, we normalize how we use modules
        // that require this pattern but the window provided is a noop
        // if it's defined (how jquery works)
        if (typeof window !== 'undefined') {
          jQuery = require('jquery');
        }
        else {
          jQuery = require('jquery')(root);
        }
      }
      factory(jQuery);
      return jQuery;
    };
  } else {
    // Browser globals
    factory(jQuery);
  }
} (function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 =(function () {
  // Restore the Select2 AMD loader so it can be used
  // Needed mostly in the language files, where the loader is not inserted
  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
    var S2 = jQuery.fn.select2.amd;
  }
var S2;(function () { if (!S2 || !S2.requirejs) {
if (!S2) { S2 = {}; } else { require = S2; }
/**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name) {
            name = name.split('/');
            lastIndex = name.length - 1;

            // If wanting node ID compatibility, strip .js from end
            // of IDs. Have to do this here, and not in nameToUrl
            // because node allows either .js or non .js to map
            // to same file.
            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
            }

            // Starts with a '.' so need the baseName
            if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
            }

            //start trimDots
            for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                    name.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        name.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
            //end trimDots

            name = name.join('/');
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    //Creates a parts array for a relName where first part is plugin ID,
    //second part is resource ID. Assumes relName has already been normalized.
    function makeRelParts(relName) {
        return relName ? splitPrefix(relName) : [];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relParts) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0],
            relResourceName = relParts[1];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relResourceName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
            } else {
                name = normalize(name, relResourceName);
            }
        } else {
            name = normalize(name, relResourceName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i, relParts,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;
        relParts = makeRelParts(relName);

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, makeRelParts(callback)).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

S2.requirejs = requirejs;S2.require = require;S2.define = define;
}
}());
S2.define("almond", function(){});

/* global jQuery:false, $:false */
S2.define('jquery',[],function () {
  var _$ = jQuery || $;

  if (_$ == null && console && console.error) {
    console.error(
      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
      'found. Make sure that you are including jQuery before Select2 on your ' +
      'web page.'
    );
  }

  return _$;
});

S2.define('select2/utils',[
  'jquery'
], function ($) {
  var Utils = {};

  Utils.Extend = function (ChildClass, SuperClass) {
    var __hasProp = {}.hasOwnProperty;

    function BaseConstructor () {
      this.constructor = ChildClass;
    }

    for (var key in SuperClass) {
      if (__hasProp.call(SuperClass, key)) {
        ChildClass[key] = SuperClass[key];
      }
    }

    BaseConstructor.prototype = SuperClass.prototype;
    ChildClass.prototype = new BaseConstructor();
    ChildClass.__super__ = SuperClass.prototype;

    return ChildClass;
  };

  function getMethods (theClass) {
    var proto = theClass.prototype;

    var methods = [];

    for (var methodName in proto) {
      var m = proto[methodName];

      if (typeof m !== 'function') {
        continue;
      }

      if (methodName === 'constructor') {
        continue;
      }

      methods.push(methodName);
    }

    return methods;
  }

  Utils.Decorate = function (SuperClass, DecoratorClass) {
    var decoratedMethods = getMethods(DecoratorClass);
    var superMethods = getMethods(SuperClass);

    function DecoratedClass () {
      var unshift = Array.prototype.unshift;

      var argCount = DecoratorClass.prototype.constructor.length;

      var calledConstructor = SuperClass.prototype.constructor;

      if (argCount > 0) {
        unshift.call(arguments, SuperClass.prototype.constructor);

        calledConstructor = DecoratorClass.prototype.constructor;
      }

      calledConstructor.apply(this, arguments);
    }

    DecoratorClass.displayName = SuperClass.displayName;

    function ctr () {
      this.constructor = DecoratedClass;
    }

    DecoratedClass.prototype = new ctr();

    for (var m = 0; m < superMethods.length; m++) {
        var superMethod = superMethods[m];

        DecoratedClass.prototype[superMethod] =
          SuperClass.prototype[superMethod];
    }

    var calledMethod = function (methodName) {
      // Stub out the original method if it's not decorating an actual method
      var originalMethod = function () {};

      if (methodName in DecoratedClass.prototype) {
        originalMethod = DecoratedClass.prototype[methodName];
      }

      var decoratedMethod = DecoratorClass.prototype[methodName];

      return function () {
        var unshift = Array.prototype.unshift;

        unshift.call(arguments, originalMethod);

        return decoratedMethod.apply(this, arguments);
      };
    };

    for (var d = 0; d < decoratedMethods.length; d++) {
      var decoratedMethod = decoratedMethods[d];

      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
    }

    return DecoratedClass;
  };

  var Observable = function () {
    this.listeners = {};
  };

  Observable.prototype.on = function (event, callback) {
    this.listeners = this.listeners || {};

    if (event in this.listeners) {
      this.listeners[event].push(callback);
    } else {
      this.listeners[event] = [callback];
    }
  };

  Observable.prototype.trigger = function (event) {
    var slice = Array.prototype.slice;
    var params = slice.call(arguments, 1);

    this.listeners = this.listeners || {};

    // Params should always come in as an array
    if (params == null) {
      params = [];
    }

    // If there are no arguments to the event, use a temporary object
    if (params.length === 0) {
      params.push({});
    }

    // Set the `_type` of the first object to the event
    params[0]._type = event;

    if (event in this.listeners) {
      this.invoke(this.listeners[event], slice.call(arguments, 1));
    }

    if ('*' in this.listeners) {
      this.invoke(this.listeners['*'], arguments);
    }
  };

  Observable.prototype.invoke = function (listeners, params) {
    for (var i = 0, len = listeners.length; i < len; i++) {
      listeners[i].apply(this, params);
    }
  };

  Utils.Observable = Observable;

  Utils.generateChars = function (length) {
    var chars = '';

    for (var i = 0; i < length; i++) {
      var randomChar = Math.floor(Math.random() * 36);
      chars += randomChar.toString(36);
    }

    return chars;
  };

  Utils.bind = function (func, context) {
    return function () {
      func.apply(context, arguments);
    };
  };

  Utils._convertData = function (data) {
    for (var originalKey in data) {
      var keys = originalKey.split('-');

      var dataLevel = data;

      if (keys.length === 1) {
        continue;
      }

      for (var k = 0; k < keys.length; k++) {
        var key = keys[k];

        // Lowercase the first letter
        // By default, dash-separated becomes camelCase
        key = key.substring(0, 1).toLowerCase() + key.substring(1);

        if (!(key in dataLevel)) {
          dataLevel[key] = {};
        }

        if (k == keys.length - 1) {
          dataLevel[key] = data[originalKey];
        }

        dataLevel = dataLevel[key];
      }

      delete data[originalKey];
    }

    return data;
  };

  Utils.hasScroll = function (index, el) {
    // Adapted from the function created by @ShadowScripter
    // and adapted by @BillBarry on the Stack Exchange Code Review website.
    // The original code can be found at
    // http://codereview.stackexchange.com/q/13338
    // and was designed to be used with the Sizzle selector engine.

    var $el = $(el);
    var overflowX = el.style.overflowX;
    var overflowY = el.style.overflowY;

    //Check both x and y declarations
    if (overflowX === overflowY &&
        (overflowY === 'hidden' || overflowY === 'visible')) {
      return false;
    }

    if (overflowX === 'scroll' || overflowY === 'scroll') {
      return true;
    }

    return ($el.innerHeight() < el.scrollHeight ||
      $el.innerWidth() < el.scrollWidth);
  };

  Utils.escapeMarkup = function (markup) {
    var replaceMap = {
      '\\': '&#92;',
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;',
      '/': '&#47;'
    };

    // Do not try to escape the markup if it's not a string
    if (typeof markup !== 'string') {
      return markup;
    }

    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
      return replaceMap[match];
    });
  };

  // Append an array of jQuery nodes to a given element.
  Utils.appendMany = function ($element, $nodes) {
    // jQuery 1.7.x does not support $.fn.append() with an array
    // Fall back to a jQuery object collection using $.fn.add()
    if ($.fn.jquery.substr(0, 3) === '1.7') {
      var $jqNodes = $();

      $.map($nodes, function (node) {
        $jqNodes = $jqNodes.add(node);
      });

      $nodes = $jqNodes;
    }

    $element.append($nodes);
  };

  return Utils;
});

S2.define('select2/results',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Results ($element, options, dataAdapter) {
    this.$element = $element;
    this.data = dataAdapter;
    this.options = options;

    Results.__super__.constructor.call(this);
  }

  Utils.Extend(Results, Utils.Observable);

  Results.prototype.render = function () {
    var $results = $(
      '<ul class="select2-results__options" role="listbox"></ul>'
    );

    if (this.options.get('multiple')) {
      $results.attr('aria-multiselectable', 'true');
    }

    this.$results = $results;

    return $results;
  };

  Results.prototype.clear = function () {
    this.$results.empty();
  };

  Results.prototype.displayMessage = function (params) {
    var escapeMarkup = this.options.get('escapeMarkup');

    this.clear();
    this.hideLoading();

    var $message = $(
      '<li role="alert" aria-live="assertive"' +
      ' class="select2-results__option"></li>'
    );

    var message = this.options.get('translations').get(params.message);

    $message.append(
      escapeMarkup(
        message(params.args)
      )
    );

    $message[0].className += ' select2-results__message';

    this.$results.append($message);
  };

  Results.prototype.hideMessages = function () {
    this.$results.find('.select2-results__message').remove();
  };

  Results.prototype.append = function (data) {
    this.hideLoading();

    var $options = [];

    if (data.results == null || data.results.length === 0) {
      if (this.$results.children().length === 0) {
        this.trigger('results:message', {
          message: 'noResults'
        });
      }

      return;
    }

    data.results = this.sort(data.results);

    for (var d = 0; d < data.results.length; d++) {
      var item = data.results[d];

      var $option = this.option(item);

      $options.push($option);
    }

    this.$results.append($options);
  };

  Results.prototype.position = function ($results, $dropdown) {
    var $resultsContainer = $dropdown.find('.select2-results');
    $resultsContainer.append($results);
  };

  Results.prototype.sort = function (data) {
    var sorter = this.options.get('sorter');

    return sorter(data);
  };

  Results.prototype.highlightFirstItem = function () {
    var $options = this.$results
      .find('.select2-results__option[data-selected]');

    var $selected = $options.filter('[data-selected=true]');

    // Check if there are any selected options
    if ($selected.length > 0) {
      // If there are selected options, highlight the first
      $selected.first().trigger('mouseenter');
    } else {
      // If there are no selected options, highlight the first option
      // in the dropdown
      $options.first().trigger('mouseenter');
      $('.single-input .select2-results__option:first-child').css('display', 'block');
    }

    this.ensureHighlightVisible();
  };

  Results.prototype.setClasses = function () {
    var self = this;

    this.data.current(function (selected) {
      var selectedIds = $.map(selected, function (s) {
        return s.id.toString();
      });

      var $options = self.$results
        .find('.select2-results__option[data-selected]');

      $options.each(function () {
        var $option = $(this);

        var item = $.data(this, 'data');

        // id needs to be converted to a string when comparing
        var id = '' + item.id;

        if ((item.element != null && item.element.selected) ||
            (item.element == null && $.inArray(id, selectedIds) > -1)) {
          $option.attr('data-selected', 'true');
        } else {
          $option.attr('data-selected', 'false');
        }
      });

    });
  };

  Results.prototype.showLoading = function (params) {
    this.hideLoading();

    var loadingMore = this.options.get('translations').get('searching');

    var loading = {
      disabled: true,
      loading: true,
      text: loadingMore(params)
    };
    var $loading = this.option(loading);
    $loading.className += ' loading-results';

    this.$results.prepend($loading);
  };

  Results.prototype.hideLoading = function () {
    this.$results.find('.loading-results').remove();
  };

  Results.prototype.option = function (data) {
    var option = document.createElement('li');
    option.className = 'select2-results__option';

    var attrs = {
      'role': 'option',
      'data-selected': 'false'
    };

    if (data.disabled) {
      delete attrs['data-selected'];
      attrs['aria-disabled'] = 'true';
    }

    if (data.id == null) {
      delete attrs['data-selected'];
    }

    if (data._resultId != null) {
      option.id = data._resultId;
    }

    if (data.title) {
      option.title = data.title;
    }

    if (data.children) {
      attrs['aria-label'] = data.text;
      delete attrs['data-selected'];
    }

    for (var attr in attrs) {
      var val = attrs[attr];

      option.setAttribute(attr, val);
    }

    if (data.children) {
      var $option = $(option);

      var label = document.createElement('strong');
      label.className = 'select2-results__group';

      var $label = $(label);
      this.template(data, label);

      var $children = [];

      for (var c = 0; c < data.children.length; c++) {
        var child = data.children[c];

        var $child = this.option(child);

        $children.push($child);
      }

      var $childrenContainer = $('<ul></ul>', {
        'class': 'select2-results__options select2-results__options--nested'
      });

      $childrenContainer.append($children);

      $option.append(label);
      $option.append($childrenContainer);
    } else {
      this.template(data, option);
    }

    $.data(option, 'data', data);

    return option;
  };

  Results.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-results';

    this.$results.attr('id', id);

    container.on('results:all', function (params) {
      self.clear();
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
        self.highlightFirstItem();
      }
    });

    container.on('results:append', function (params) {
      self.append(params.data);

      if (container.isOpen()) {
        self.setClasses();
      }
    });

    container.on('query', function (params) {
      self.hideMessages();
      self.showLoading(params);
    });

    container.on('select', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();
      self.highlightFirstItem();
    });

    container.on('unselect', function () {
      if (!container.isOpen()) {
        return;
      }

      self.setClasses();
      self.highlightFirstItem();
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expended="true"
      self.$results.attr('aria-expanded', 'true');
      self.$results.attr('aria-hidden', 'false');

      self.setClasses();
      self.ensureHighlightVisible();
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expended="false"
      self.$results.attr('aria-expanded', 'false');
      self.$results.attr('aria-hidden', 'true');
      self.$results.removeAttr('aria-activedescendant');
    });

    container.on('results:toggle', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      $highlighted.trigger('mouseup');
    });

    container.on('results:select', function () {
      var $highlighted = self.getHighlightedResults();

      if ($highlighted.length === 0) {
        return;
      }

      var data = $highlighted.data('data');

      if ($highlighted.attr('data-selected') == 'true') {
        self.trigger('close', {});
      } else {
        self.trigger('select', {
          data: data
        });
      }
    });

    container.on('results:previous', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[data-selected]');

      var currentIndex = $options.index($highlighted);

      // If we are already at te top, don't move further
      if (currentIndex === 0) {
        return;
      }

      var nextIndex = currentIndex - 1;

      // If none are highlighted, highlight the first
      if ($highlighted.length === 0) {
        nextIndex = 0;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top;
      var nextTop = $next.offset().top;
      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextTop - currentOffset < 0) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:next', function () {
      var $highlighted = self.getHighlightedResults();

      var $options = self.$results.find('[data-selected]');

      var currentIndex = $options.index($highlighted);

      var nextIndex = currentIndex + 1;

      // If we are at the last option, stay there
      if (nextIndex >= $options.length) {
        return;
      }

      var $next = $options.eq(nextIndex);

      $next.trigger('mouseenter');

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var nextBottom = $next.offset().top + $next.outerHeight(false);
      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

      if (nextIndex === 0) {
        self.$results.scrollTop(0);
      } else if (nextBottom > currentOffset) {
        self.$results.scrollTop(nextOffset);
      }
    });

    container.on('results:focus', function (params) {
      params.element.addClass('select2-results__option--highlighted').attr('aria-selected', 'true');
      self.$results.attr('aria-activedescendant', params.element.attr('id'));
    });

    container.on('results:message', function (params) {
      self.displayMessage(params);
    });

    if ($.fn.mousewheel) {
      this.$results.on('mousewheel', function (e) {
        var top = self.$results.scrollTop();

        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

        if (isAtTop) {
          self.$results.scrollTop(0);

          e.preventDefault();
          e.stopPropagation();
        } else if (isAtBottom) {
          self.$results.scrollTop(
            self.$results.get(0).scrollHeight - self.$results.height()
          );

          e.preventDefault();
          e.stopPropagation();
        }
      });
    }

    this.$results.on('click', '.select2-results__option[data-selected]',
      function (evt) {
      var $this = $(this);

      var data = $this.data('data');

      if ($this.attr('data-selected') === 'true') {
        if (self.options.get('multiple')) {
          self.trigger('unselect', {
            originalEvent: evt,
            data: data
          });
        } else {
          self.trigger('close', {});
        }

        return;
      }

      self.trigger('select', {
        originalEvent: evt,
        data: data
      });
    });

    this.$results.on('mouseenter', '.select2-results__option[data-selected]',
      function (evt) {
      var data = $(this).data('data');

      self.getHighlightedResults()
          .removeClass('select2-results__option--highlighted')
          .attr('aria-selected', 'false');

      self.trigger('results:focus', {
        data: data,
        element: $(this)
      });
    });
  };

  Results.prototype.getHighlightedResults = function () {
    var $highlighted = this.$results
    .find('.select2-results__option--highlighted');

    return $highlighted;
  };

  Results.prototype.destroy = function () {
    this.$results.remove();
  };

  Results.prototype.ensureHighlightVisible = function () {
    var $highlighted = this.getHighlightedResults();

    if ($highlighted.length === 0) {
      return;
    }

    var $options = this.$results.find('[data-selected]');

    var currentIndex = $options.index($highlighted);

    var currentOffset = this.$results.offset().top;
    var nextTop = $highlighted.offset().top;
    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

    var offsetDelta = nextTop - currentOffset;
    nextOffset -= $highlighted.outerHeight(false) * 2;

    if (currentIndex <= 2) {
      this.$results.scrollTop(0);
    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
      this.$results.scrollTop(nextOffset);
    }
  };

  Results.prototype.template = function (result, container) {
    var template = this.options.get('templateResult');
    var escapeMarkup = this.options.get('escapeMarkup');

    var content = template(result, container);

    if (content == null) {
      container.style.display = 'none';
    } else if (typeof content === 'string') {
      container.innerHTML = escapeMarkup(content);
    } else {
      $(container).append(content);
    }
  };

  return Results;
});

S2.define('select2/keys',[

], function () {
  var KEYS = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DELETE: 46
  };

  return KEYS;
});

S2.define('select2/selection/base',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function BaseSelection ($element, options) {
    this.$element = $element;
    this.options = options;

    BaseSelection.__super__.constructor.call(this);
  }

  Utils.Extend(BaseSelection, Utils.Observable);

  BaseSelection.prototype.render = function () {
    var $selection = $(
      '<span class="select2-selection" ' +
      ' aria-haspopup="true" aria-expanded="false">' +
      '</span>'
    );

    this._tabindex = 0;

    if (this.$element.data('old-tabindex') != null) {
      this._tabindex = this.$element.data('old-tabindex');
    } else if (this.$element.attr('tabindex') != null) {
      this._tabindex = this.$element.attr('tabindex');
    }

    $selection.attr('title', this.$element.attr('title'));
    $selection.attr('tabindex', this._tabindex);

    this.$selection = $selection;

    return $selection;
  };

  BaseSelection.prototype.bind = function (container, $container) {
    var self = this;

    var id = container.id + '-container';
    var resultsId = container.id + '-results';
    var searchHidden = this.options.get('minimumResultsForSearch') === Infinity;

    this.container = container;

    this.$selection.on('focus', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('blur', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      if (evt.which === KEYS.SPACE) {
        evt.preventDefault();
      }
    });

    container.on('results:focus', function (params) {
      self.$selection.attr('aria-activedescendant', params.data._resultId);
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });

    container.on('open', function () {
      // When the dropdown is open, aria-expanded="true"
      self.$selection.attr('aria-expanded', 'true');
      self.$selection.attr('aria-owns', resultsId);

      self._attachCloseHandler(container);
    });

    container.on('close', function () {
      // When the dropdown is closed, aria-expanded="false"
      self.$selection.attr('aria-expanded', 'false');
      self.$selection.removeAttr('aria-activedescendant');
      self.$selection.removeAttr('aria-owns');

      // This needs to be delayed as the active element is the body when the
      // key is pressed.
      window.setTimeout(function () {
        self.$selection.focus();
      }, 1);

      self._detachCloseHandler(container);
    });

    container.on('enable', function () {
      self.$selection.attr('tabindex', self._tabindex);
    });

    container.on('disable', function () {
      self.$selection.attr('tabindex', '-1');
    });
  };

  BaseSelection.prototype._handleBlur = function (evt) {
    var self = this;

    // This needs to be delayed as the active element is the body when the tab
    // key is pressed, possibly along with others.
    window.setTimeout(function () {
      // Don't trigger `blur` if the focus is still in the selection
      if (
        (document.activeElement == self.$selection[0]) ||
        ($.contains(self.$selection[0], document.activeElement))
      ) {
        return;
      }

      self.trigger('blur', evt);
    }, 1);
  };

  BaseSelection.prototype._attachCloseHandler = function (container) {
    var self = this;

    $(document.body).on('mousedown.select2.' + container.id, function (e) {
      var $target = $(e.target);

      var $select = $target.closest('.select2');

      var $all = $('.select2.select2-container--open');

      $all.each(function () {
        var $this = $(this);

        if (this == $select[0]) {
          return;
        }

        var $element = $this.data('element');

        $element.select2('close');
      });
    });
  };

  BaseSelection.prototype._detachCloseHandler = function (container) {
    $(document.body).off('mousedown.select2.' + container.id);
  };

  BaseSelection.prototype.position = function ($selection, $container) {
    var $selectionContainer = $container.find('.selection');
    $selectionContainer.append($selection);
  };

  BaseSelection.prototype.destroy = function () {
    this._detachCloseHandler(this.container);
  };

  BaseSelection.prototype.update = function (data) {
    throw new Error('The `update` method must be defined in child classes.');
  };

  return BaseSelection;
});

S2.define('select2/selection/single',[
  'jquery',
  './base',
  '../utils',
  '../keys'
], function ($, BaseSelection, Utils, KEYS) {
  function SingleSelection () {
    SingleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(SingleSelection, BaseSelection);

  SingleSelection.prototype.render = function () {
    var $selection = SingleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--single');

    $selection.html(
      '<span class="select2-selection__rendered"></span>' +
      '<span class="select2-selection__arrow" role="presentation">' +
        '<b role="presentation"></b>' +
      '</span>'
    );

    return $selection;
  };

  SingleSelection.prototype.bind = function (container, $container) {
    var self = this;

    SingleSelection.__super__.bind.apply(this, arguments);

    var id = container.id + '-container';

    this.$selection.find('.select2-selection__rendered')
      .attr('id', id)
      .attr('role', 'textbox')
      .attr('aria-readonly', 'true');
    this.$selection.attr('aria-labelledby', id);

    // This makes single non-search selects work in screen readers. If it causes problems elsewhere, remove.
    this.$selection.attr('role', 'combobox');

    this.$selection.on('mousedown', function (evt) {
      // Only respond to left clicks
      if (evt.which !== 1) {
        return;
      }

      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on('focus', function (evt) {
      // User focuses on the container
    });

    this.$selection.on('keydown', function (evt) {
      // If user starts typing an alphanumeric key on the keyboard, open if not opened.
      if (!container.isOpen() && evt.which >= 48 && evt.which <= 90) {
        container.open();
      }
    });

    this.$selection.on('blur', function (evt) {
      // User exits the container
    });

    container.on('focus', function (evt) {
      if (!container.isOpen()) {
        self.$selection.focus();
      }
    });

    container.on('selection:update', function (params) {
      self.update(params.data);
    });
  };

  SingleSelection.prototype.clear = function () {
    this.$selection.find('.select2-selection__rendered').empty();
  };

  SingleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  SingleSelection.prototype.selectionContainer = function () {
    return $('<span></span>');
  };

  SingleSelection.prototype.update = function (data) {
    if (data.length === 0) {
      this.clear();
      return;
    }

    var selection = data[0];

    var $rendered = this.$selection.find('.select2-selection__rendered');
    var formatted = this.display(selection, $rendered);

    $rendered.empty().append(formatted);
    $rendered.prop('title', selection.title || selection.text);
  };

  return SingleSelection;
});

S2.define('select2/selection/multiple',[
  'jquery',
  './base',
  '../utils'
], function ($, BaseSelection, Utils) {
  function MultipleSelection ($element, options) {
    MultipleSelection.__super__.constructor.apply(this, arguments);
  }

  Utils.Extend(MultipleSelection, BaseSelection);

  MultipleSelection.prototype.render = function () {
    var $selection = MultipleSelection.__super__.render.call(this);

    $selection.addClass('select2-selection--multiple');

    $selection.html(
      '<ul class="select2-selection__rendered" aria-live="polite" aria-relevant="additions removals" aria-atomic="true"></ul>'
    );

    return $selection;
  };

  MultipleSelection.prototype.bind = function (container, $container) {
    var self = this;

    MultipleSelection.__super__.bind.apply(this, arguments);

    this.$selection.on('click', function (evt) {
      self.trigger('toggle', {
        originalEvent: evt
      });
    });

    this.$selection.on(
      'click',
      '.select2-selection__choice__remove',
      function (evt) {
        // Ignore the event if it is disabled
        if (self.options.get('disabled')) {
          return;
        }

        var $remove = $(this);
        var $selection = $remove.parent();

        var data = $selection.data('data');

        self.trigger('unselect', {
          originalEvent: evt,
          data: data
        });
      }
    );
  };

  MultipleSelection.prototype.clear = function () {
    this.$selection.find('.select2-selection__rendered').empty();
  };

  MultipleSelection.prototype.display = function (data, container) {
    var template = this.options.get('templateSelection');
    var escapeMarkup = this.options.get('escapeMarkup');

    return escapeMarkup(template(data, container));
  };

  MultipleSelection.prototype.selectionContainer = function () {
    var $container = $(
      '<li class="select2-selection__choice">' +
        '<span class="select2-selection__choice__remove" role="presentation" aria-hidden="true">' +
          '&times;' +
        '</span>' +
      '</li>'
    );

    return $container;
  };

  MultipleSelection.prototype.update = function (data) {
    this.clear();

    if (data.length === 0) {
      return;
    }

    var $selections = [];

    for (var d = 0; d < data.length; d++) {
      var selection = data[d];

      var $selection = this.selectionContainer();
      var formatted = this.display(selection, $selection);

      $selection.append(formatted);
      $selection.prop('title', selection.title || selection.text);

      $selection.data('data', selection);

      $selections.push($selection);
    }

    var $rendered = this.$selection.find('.select2-selection__rendered');

    Utils.appendMany($rendered, $selections);
  };

  return MultipleSelection;
});

S2.define('select2/selection/placeholder',[
  '../utils'
], function (Utils) {
  function Placeholder (decorated, $element, options) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options);
  }

  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
    var $placeholder = this.selectionContainer();

    $placeholder.html(this.display(placeholder));
    $placeholder.addClass('select2-selection__placeholder')
                .removeClass('select2-selection__choice');

    return $placeholder;
  };

  Placeholder.prototype.update = function (decorated, data) {
    var singlePlaceholder = (
      data.length == 1 && data[0].id != this.placeholder.id
    );
    var multipleSelections = data.length > 1;

    if (multipleSelections || singlePlaceholder) {
      return decorated.call(this, data);
    }

    this.clear();

    var $placeholder = this.createPlaceholder(this.placeholder);

    this.$selection.find('.select2-selection__rendered').append($placeholder);
  };

  return Placeholder;
});

S2.define('select2/selection/allowClear',[
  'jquery',
  '../keys'
], function ($, KEYS) {
  function AllowClear () { }

  AllowClear.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    if (this.placeholder == null) {
      if (this.options.get('debug') && window.console && console.error) {
        console.error(
          'Select2: The `allowClear` option should be used in combination ' +
          'with the `placeholder` option.'
        );
      }
    }

    this.$selection.on('mousedown', '.select2-selection__clear',
      function (evt) {
        self._handleClear(evt);
    });

    container.on('keypress', function (evt) {
      self._handleKeyboardClear(evt, container);
    });
  };

  AllowClear.prototype._handleClear = function (_, evt) {
    // Ignore the event if it is disabled
    if (this.options.get('disabled')) {
      return;
    }

    var $clear = this.$selection.find('.select2-selection__clear');

    // Ignore the event if nothing has been selected
    if ($clear.length === 0) {
      return;
    }

    evt.stopPropagation();

    var data = $clear.data('data');

    for (var d = 0; d < data.length; d++) {
      var unselectData = {
        data: data[d]
      };

      // Trigger the `unselect` event, so people can prevent it from being
      // cleared.
      this.trigger('unselect', unselectData);

      // If the event was prevented, don't clear it out.
      if (unselectData.prevented) {
        return;
      }
    }

    this.$element.val(this.placeholder.id).trigger('change');

    this.trigger('toggle', {});
  };

  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
    if (container.isOpen()) {
      return;
    }

    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
      this._handleClear(evt);
    }
  };

  AllowClear.prototype.update = function (decorated, data) {
    decorated.call(this, data);

    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
        data.length === 0) {
      return;
    }

    var $remove = $(
      '<span class="select2-selection__clear">' +
        '&times;' +
      '</span>'
    );
    $remove.data('data', data);

    this.$selection.find('.select2-selection__rendered').prepend($remove);
  };

  return AllowClear;
});

S2.define('select2/selection/search',[
  'jquery',
  '../utils',
  '../keys'
], function ($, Utils, KEYS) {
  function Search (decorated, $element, options) {
    decorated.call(this, $element, options);
  }

  Search.prototype.render = function (decorated) {
    var $search = $(
      '<li class="select2-search select2-search--inline">' +
        '<input class="select2-search__field" type="text" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
        ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
      '</li>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    var $rendered = decorated.call(this);

    this._transferTabIndex();

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;
    var resultsId = container.id + '-results';

    decorated.call(this, container, $container);

    container.on('open', function () {
      self.$search.attr('aria-owns', resultsId);
      self.$search.trigger('focus');
    });

    container.on('close', function () {
      self.$search.val('');
      self.$search.removeAttr('aria-activedescendant');
      self.$search.removeAttr('aria-owns');
      self.$search.trigger('focus');
    });

    container.on('enable', function () {
      self.$search.prop('disabled', false);

      self._transferTabIndex();
    });

    container.on('disable', function () {
      self.$search.prop('disabled', true);
    });

    container.on('focus', function (evt) {
      self.$search.trigger('focus');
    });

    container.on('results:focus', function (params) {
      self.$search.attr('aria-activedescendant', params.data._resultId);
    });

    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
      self.trigger('focus', evt);
    });

    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
      self._handleBlur(evt);
    });

    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
      evt.stopPropagation();

      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();

      var key = evt.which;

      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
        var $previousChoice = self.$searchContainer
          .prev('.select2-selection__choice');

        if ($previousChoice.length > 0) {
          var item = $previousChoice.data('data');

          self.searchRemoveChoice(item);

          evt.preventDefault();
        }
      }
    });

    // Try to detect the IE version should the `documentMode` property that
    // is stored on the document. This is only implemented in IE and is
    // slightly cleaner than doing a user agent check.
    // This property is not available in Edge, but Edge also doesn't have
    // this bug.
    var msie = document.documentMode;
    var disableInputEvents = msie && msie <= 11;

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$selection.on(
      'input.searchcheck',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents) {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        // Unbind the duplicated `keyup` event
        self.$selection.off('keyup.search');
      }
    );

    this.$selection.on(
      'keyup.search input.search',
      '.select2-search--inline',
      function (evt) {
        // IE will trigger the `input` event when a placeholder is used on a
        // search box. To get around this issue, we are forced to ignore all
        // `input` events in IE and keep using `keyup`.
        if (disableInputEvents && evt.type === 'input') {
          self.$selection.off('input.search input.searchcheck');
          return;
        }

        var key = evt.which;

        // We can freely ignore events from modifier keys
        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
          return;
        }

        // Tabbing will be handled during the `keydown` phase
        if (key == KEYS.TAB) {
          return;
        }

        self.handleSearch(evt);
      }
    );
  };

  /**
   * This method will transfer the tabindex attribute from the rendered
   * selection to the search box. This allows for the search box to be used as
   * the primary focus instead of the selection container.
   *
   * @private
   */
  Search.prototype._transferTabIndex = function (decorated) {
    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
    this.$selection.attr('tabindex', '-1');
  };

  Search.prototype.createPlaceholder = function (decorated, placeholder) {
    this.$search.attr('placeholder', placeholder.text);
  };

  Search.prototype.update = function (decorated, data) {
    var searchHadFocus = this.$search[0] == document.activeElement;

    this.$search.attr('placeholder', '');

    decorated.call(this, data);

    this.$selection.find('.select2-selection__rendered')
                   .append(this.$searchContainer);

    this.resizeSearch();
    if (searchHadFocus) {
      this.$search.focus();
    }
  };

  Search.prototype.handleSearch = function () {
    this.resizeSearch();

    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.searchRemoveChoice = function (decorated, item) {
    this.trigger('unselect', {
      data: item
    });

    this.$search.val(item.text);
    this.handleSearch();
  };

  Search.prototype.resizeSearch = function () {
    this.$search.css('width', '25px');

    var width = '';

    if (this.$search.attr('placeholder') !== '') {
      width = this.$selection.find('.select2-selection__rendered').innerWidth();
    } else {
      var minimumWidth = this.$search.val().length + 1;

      width = (minimumWidth * 0.75) + 'em';
    }

    this.$search.css('width', width);
  };

  return Search;
});

S2.define('select2/selection/eventRelay',[
  'jquery'
], function ($) {
  function EventRelay () { }

  EventRelay.prototype.bind = function (decorated, container, $container) {
    var self = this;
    var relayEvents = [
      'open', 'opening',
      'close', 'closing',
      'select', 'selecting',
      'unselect', 'unselecting'
    ];

    var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

    decorated.call(this, container, $container);

    container.on('*', function (name, params) {
      // Ignore events that should not be relayed
      if ($.inArray(name, relayEvents) === -1) {
        return;
      }

      // The parameters should always be an object
      params = params || {};

      // Generate the jQuery event for the Select2 event
      var evt = $.Event('select2:' + name, {
        params: params
      });

      self.$element.trigger(evt);

      // Only handle preventable events if it was one
      if ($.inArray(name, preventableEvents) === -1) {
        return;
      }

      params.prevented = evt.isDefaultPrevented();
    });
  };

  return EventRelay;
});

S2.define('select2/translation',[
  'jquery',
  'require'
], function ($, require) {
  function Translation (dict) {
    this.dict = dict || {};
  }

  Translation.prototype.all = function () {
    return this.dict;
  };

  Translation.prototype.get = function (key) {
    return this.dict[key];
  };

  Translation.prototype.extend = function (translation) {
    this.dict = $.extend({}, translation.all(), this.dict);
  };

  // Static functions

  Translation._cache = {};

  Translation.loadPath = function (path) {
    if (!(path in Translation._cache)) {
      var translations = require(path);

      Translation._cache[path] = translations;
    }

    return new Translation(Translation._cache[path]);
  };

  return Translation;
});

S2.define('select2/diacritics',[

], function () {
  var diacritics = {
    '\u24B6': 'A',
    '\uFF21': 'A',
    '\u00C0': 'A',
    '\u00C1': 'A',
    '\u00C2': 'A',
    '\u1EA6': 'A',
    '\u1EA4': 'A',
    '\u1EAA': 'A',
    '\u1EA8': 'A',
    '\u00C3': 'A',
    '\u0100': 'A',
    '\u0102': 'A',
    '\u1EB0': 'A',
    '\u1EAE': 'A',
    '\u1EB4': 'A',
    '\u1EB2': 'A',
    '\u0226': 'A',
    '\u01E0': 'A',
    '\u00C4': 'A',
    '\u01DE': 'A',
    '\u1EA2': 'A',
    '\u00C5': 'A',
    '\u01FA': 'A',
    '\u01CD': 'A',
    '\u0200': 'A',
    '\u0202': 'A',
    '\u1EA0': 'A',
    '\u1EAC': 'A',
    '\u1EB6': 'A',
    '\u1E00': 'A',
    '\u0104': 'A',
    '\u023A': 'A',
    '\u2C6F': 'A',
    '\uA732': 'AA',
    '\u00C6': 'AE',
    '\u01FC': 'AE',
    '\u01E2': 'AE',
    '\uA734': 'AO',
    '\uA736': 'AU',
    '\uA738': 'AV',
    '\uA73A': 'AV',
    '\uA73C': 'AY',
    '\u24B7': 'B',
    '\uFF22': 'B',
    '\u1E02': 'B',
    '\u1E04': 'B',
    '\u1E06': 'B',
    '\u0243': 'B',
    '\u0182': 'B',
    '\u0181': 'B',
    '\u24B8': 'C',
    '\uFF23': 'C',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010A': 'C',
    '\u010C': 'C',
    '\u00C7': 'C',
    '\u1E08': 'C',
    '\u0187': 'C',
    '\u023B': 'C',
    '\uA73E': 'C',
    '\u24B9': 'D',
    '\uFF24': 'D',
    '\u1E0A': 'D',
    '\u010E': 'D',
    '\u1E0C': 'D',
    '\u1E10': 'D',
    '\u1E12': 'D',
    '\u1E0E': 'D',
    '\u0110': 'D',
    '\u018B': 'D',
    '\u018A': 'D',
    '\u0189': 'D',
    '\uA779': 'D',
    '\u01F1': 'DZ',
    '\u01C4': 'DZ',
    '\u01F2': 'Dz',
    '\u01C5': 'Dz',
    '\u24BA': 'E',
    '\uFF25': 'E',
    '\u00C8': 'E',
    '\u00C9': 'E',
    '\u00CA': 'E',
    '\u1EC0': 'E',
    '\u1EBE': 'E',
    '\u1EC4': 'E',
    '\u1EC2': 'E',
    '\u1EBC': 'E',
    '\u0112': 'E',
    '\u1E14': 'E',
    '\u1E16': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u00CB': 'E',
    '\u1EBA': 'E',
    '\u011A': 'E',
    '\u0204': 'E',
    '\u0206': 'E',
    '\u1EB8': 'E',
    '\u1EC6': 'E',
    '\u0228': 'E',
    '\u1E1C': 'E',
    '\u0118': 'E',
    '\u1E18': 'E',
    '\u1E1A': 'E',
    '\u0190': 'E',
    '\u018E': 'E',
    '\u24BB': 'F',
    '\uFF26': 'F',
    '\u1E1E': 'F',
    '\u0191': 'F',
    '\uA77B': 'F',
    '\u24BC': 'G',
    '\uFF27': 'G',
    '\u01F4': 'G',
    '\u011C': 'G',
    '\u1E20': 'G',
    '\u011E': 'G',
    '\u0120': 'G',
    '\u01E6': 'G',
    '\u0122': 'G',
    '\u01E4': 'G',
    '\u0193': 'G',
    '\uA7A0': 'G',
    '\uA77D': 'G',
    '\uA77E': 'G',
    '\u24BD': 'H',
    '\uFF28': 'H',
    '\u0124': 'H',
    '\u1E22': 'H',
    '\u1E26': 'H',
    '\u021E': 'H',
    '\u1E24': 'H',
    '\u1E28': 'H',
    '\u1E2A': 'H',
    '\u0126': 'H',
    '\u2C67': 'H',
    '\u2C75': 'H',
    '\uA78D': 'H',
    '\u24BE': 'I',
    '\uFF29': 'I',
    '\u00CC': 'I',
    '\u00CD': 'I',
    '\u00CE': 'I',
    '\u0128': 'I',
    '\u012A': 'I',
    '\u012C': 'I',
    '\u0130': 'I',
    '\u00CF': 'I',
    '\u1E2E': 'I',
    '\u1EC8': 'I',
    '\u01CF': 'I',
    '\u0208': 'I',
    '\u020A': 'I',
    '\u1ECA': 'I',
    '\u012E': 'I',
    '\u1E2C': 'I',
    '\u0197': 'I',
    '\u24BF': 'J',
    '\uFF2A': 'J',
    '\u0134': 'J',
    '\u0248': 'J',
    '\u24C0': 'K',
    '\uFF2B': 'K',
    '\u1E30': 'K',
    '\u01E8': 'K',
    '\u1E32': 'K',
    '\u0136': 'K',
    '\u1E34': 'K',
    '\u0198': 'K',
    '\u2C69': 'K',
    '\uA740': 'K',
    '\uA742': 'K',
    '\uA744': 'K',
    '\uA7A2': 'K',
    '\u24C1': 'L',
    '\uFF2C': 'L',
    '\u013F': 'L',
    '\u0139': 'L',
    '\u013D': 'L',
    '\u1E36': 'L',
    '\u1E38': 'L',
    '\u013B': 'L',
    '\u1E3C': 'L',
    '\u1E3A': 'L',
    '\u0141': 'L',
    '\u023D': 'L',
    '\u2C62': 'L',
    '\u2C60': 'L',
    '\uA748': 'L',
    '\uA746': 'L',
    '\uA780': 'L',
    '\u01C7': 'LJ',
    '\u01C8': 'Lj',
    '\u24C2': 'M',
    '\uFF2D': 'M',
    '\u1E3E': 'M',
    '\u1E40': 'M',
    '\u1E42': 'M',
    '\u2C6E': 'M',
    '\u019C': 'M',
    '\u24C3': 'N',
    '\uFF2E': 'N',
    '\u01F8': 'N',
    '\u0143': 'N',
    '\u00D1': 'N',
    '\u1E44': 'N',
    '\u0147': 'N',
    '\u1E46': 'N',
    '\u0145': 'N',
    '\u1E4A': 'N',
    '\u1E48': 'N',
    '\u0220': 'N',
    '\u019D': 'N',
    '\uA790': 'N',
    '\uA7A4': 'N',
    '\u01CA': 'NJ',
    '\u01CB': 'Nj',
    '\u24C4': 'O',
    '\uFF2F': 'O',
    '\u00D2': 'O',
    '\u00D3': 'O',
    '\u00D4': 'O',
    '\u1ED2': 'O',
    '\u1ED0': 'O',
    '\u1ED6': 'O',
    '\u1ED4': 'O',
    '\u00D5': 'O',
    '\u1E4C': 'O',
    '\u022C': 'O',
    '\u1E4E': 'O',
    '\u014C': 'O',
    '\u1E50': 'O',
    '\u1E52': 'O',
    '\u014E': 'O',
    '\u022E': 'O',
    '\u0230': 'O',
    '\u00D6': 'O',
    '\u022A': 'O',
    '\u1ECE': 'O',
    '\u0150': 'O',
    '\u01D1': 'O',
    '\u020C': 'O',
    '\u020E': 'O',
    '\u01A0': 'O',
    '\u1EDC': 'O',
    '\u1EDA': 'O',
    '\u1EE0': 'O',
    '\u1EDE': 'O',
    '\u1EE2': 'O',
    '\u1ECC': 'O',
    '\u1ED8': 'O',
    '\u01EA': 'O',
    '\u01EC': 'O',
    '\u00D8': 'O',
    '\u01FE': 'O',
    '\u0186': 'O',
    '\u019F': 'O',
    '\uA74A': 'O',
    '\uA74C': 'O',
    '\u01A2': 'OI',
    '\uA74E': 'OO',
    '\u0222': 'OU',
    '\u24C5': 'P',
    '\uFF30': 'P',
    '\u1E54': 'P',
    '\u1E56': 'P',
    '\u01A4': 'P',
    '\u2C63': 'P',
    '\uA750': 'P',
    '\uA752': 'P',
    '\uA754': 'P',
    '\u24C6': 'Q',
    '\uFF31': 'Q',
    '\uA756': 'Q',
    '\uA758': 'Q',
    '\u024A': 'Q',
    '\u24C7': 'R',
    '\uFF32': 'R',
    '\u0154': 'R',
    '\u1E58': 'R',
    '\u0158': 'R',
    '\u0210': 'R',
    '\u0212': 'R',
    '\u1E5A': 'R',
    '\u1E5C': 'R',
    '\u0156': 'R',
    '\u1E5E': 'R',
    '\u024C': 'R',
    '\u2C64': 'R',
    '\uA75A': 'R',
    '\uA7A6': 'R',
    '\uA782': 'R',
    '\u24C8': 'S',
    '\uFF33': 'S',
    '\u1E9E': 'S',
    '\u015A': 'S',
    '\u1E64': 'S',
    '\u015C': 'S',
    '\u1E60': 'S',
    '\u0160': 'S',
    '\u1E66': 'S',
    '\u1E62': 'S',
    '\u1E68': 'S',
    '\u0218': 'S',
    '\u015E': 'S',
    '\u2C7E': 'S',
    '\uA7A8': 'S',
    '\uA784': 'S',
    '\u24C9': 'T',
    '\uFF34': 'T',
    '\u1E6A': 'T',
    '\u0164': 'T',
    '\u1E6C': 'T',
    '\u021A': 'T',
    '\u0162': 'T',
    '\u1E70': 'T',
    '\u1E6E': 'T',
    '\u0166': 'T',
    '\u01AC': 'T',
    '\u01AE': 'T',
    '\u023E': 'T',
    '\uA786': 'T',
    '\uA728': 'TZ',
    '\u24CA': 'U',
    '\uFF35': 'U',
    '\u00D9': 'U',
    '\u00DA': 'U',
    '\u00DB': 'U',
    '\u0168': 'U',
    '\u1E78': 'U',
    '\u016A': 'U',
    '\u1E7A': 'U',
    '\u016C': 'U',
    '\u00DC': 'U',
    '\u01DB': 'U',
    '\u01D7': 'U',
    '\u01D5': 'U',
    '\u01D9': 'U',
    '\u1EE6': 'U',
    '\u016E': 'U',
    '\u0170': 'U',
    '\u01D3': 'U',
    '\u0214': 'U',
    '\u0216': 'U',
    '\u01AF': 'U',
    '\u1EEA': 'U',
    '\u1EE8': 'U',
    '\u1EEE': 'U',
    '\u1EEC': 'U',
    '\u1EF0': 'U',
    '\u1EE4': 'U',
    '\u1E72': 'U',
    '\u0172': 'U',
    '\u1E76': 'U',
    '\u1E74': 'U',
    '\u0244': 'U',
    '\u24CB': 'V',
    '\uFF36': 'V',
    '\u1E7C': 'V',
    '\u1E7E': 'V',
    '\u01B2': 'V',
    '\uA75E': 'V',
    '\u0245': 'V',
    '\uA760': 'VY',
    '\u24CC': 'W',
    '\uFF37': 'W',
    '\u1E80': 'W',
    '\u1E82': 'W',
    '\u0174': 'W',
    '\u1E86': 'W',
    '\u1E84': 'W',
    '\u1E88': 'W',
    '\u2C72': 'W',
    '\u24CD': 'X',
    '\uFF38': 'X',
    '\u1E8A': 'X',
    '\u1E8C': 'X',
    '\u24CE': 'Y',
    '\uFF39': 'Y',
    '\u1EF2': 'Y',
    '\u00DD': 'Y',
    '\u0176': 'Y',
    '\u1EF8': 'Y',
    '\u0232': 'Y',
    '\u1E8E': 'Y',
    '\u0178': 'Y',
    '\u1EF6': 'Y',
    '\u1EF4': 'Y',
    '\u01B3': 'Y',
    '\u024E': 'Y',
    '\u1EFE': 'Y',
    '\u24CF': 'Z',
    '\uFF3A': 'Z',
    '\u0179': 'Z',
    '\u1E90': 'Z',
    '\u017B': 'Z',
    '\u017D': 'Z',
    '\u1E92': 'Z',
    '\u1E94': 'Z',
    '\u01B5': 'Z',
    '\u0224': 'Z',
    '\u2C7F': 'Z',
    '\u2C6B': 'Z',
    '\uA762': 'Z',
    '\u24D0': 'a',
    '\uFF41': 'a',
    '\u1E9A': 'a',
    '\u00E0': 'a',
    '\u00E1': 'a',
    '\u00E2': 'a',
    '\u1EA7': 'a',
    '\u1EA5': 'a',
    '\u1EAB': 'a',
    '\u1EA9': 'a',
    '\u00E3': 'a',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u1EB1': 'a',
    '\u1EAF': 'a',
    '\u1EB5': 'a',
    '\u1EB3': 'a',
    '\u0227': 'a',
    '\u01E1': 'a',
    '\u00E4': 'a',
    '\u01DF': 'a',
    '\u1EA3': 'a',
    '\u00E5': 'a',
    '\u01FB': 'a',
    '\u01CE': 'a',
    '\u0201': 'a',
    '\u0203': 'a',
    '\u1EA1': 'a',
    '\u1EAD': 'a',
    '\u1EB7': 'a',
    '\u1E01': 'a',
    '\u0105': 'a',
    '\u2C65': 'a',
    '\u0250': 'a',
    '\uA733': 'aa',
    '\u00E6': 'ae',
    '\u01FD': 'ae',
    '\u01E3': 'ae',
    '\uA735': 'ao',
    '\uA737': 'au',
    '\uA739': 'av',
    '\uA73B': 'av',
    '\uA73D': 'ay',
    '\u24D1': 'b',
    '\uFF42': 'b',
    '\u1E03': 'b',
    '\u1E05': 'b',
    '\u1E07': 'b',
    '\u0180': 'b',
    '\u0183': 'b',
    '\u0253': 'b',
    '\u24D2': 'c',
    '\uFF43': 'c',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010B': 'c',
    '\u010D': 'c',
    '\u00E7': 'c',
    '\u1E09': 'c',
    '\u0188': 'c',
    '\u023C': 'c',
    '\uA73F': 'c',
    '\u2184': 'c',
    '\u24D3': 'd',
    '\uFF44': 'd',
    '\u1E0B': 'd',
    '\u010F': 'd',
    '\u1E0D': 'd',
    '\u1E11': 'd',
    '\u1E13': 'd',
    '\u1E0F': 'd',
    '\u0111': 'd',
    '\u018C': 'd',
    '\u0256': 'd',
    '\u0257': 'd',
    '\uA77A': 'd',
    '\u01F3': 'dz',
    '\u01C6': 'dz',
    '\u24D4': 'e',
    '\uFF45': 'e',
    '\u00E8': 'e',
    '\u00E9': 'e',
    '\u00EA': 'e',
    '\u1EC1': 'e',
    '\u1EBF': 'e',
    '\u1EC5': 'e',
    '\u1EC3': 'e',
    '\u1EBD': 'e',
    '\u0113': 'e',
    '\u1E15': 'e',
    '\u1E17': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u00EB': 'e',
    '\u1EBB': 'e',
    '\u011B': 'e',
    '\u0205': 'e',
    '\u0207': 'e',
    '\u1EB9': 'e',
    '\u1EC7': 'e',
    '\u0229': 'e',
    '\u1E1D': 'e',
    '\u0119': 'e',
    '\u1E19': 'e',
    '\u1E1B': 'e',
    '\u0247': 'e',
    '\u025B': 'e',
    '\u01DD': 'e',
    '\u24D5': 'f',
    '\uFF46': 'f',
    '\u1E1F': 'f',
    '\u0192': 'f',
    '\uA77C': 'f',
    '\u24D6': 'g',
    '\uFF47': 'g',
    '\u01F5': 'g',
    '\u011D': 'g',
    '\u1E21': 'g',
    '\u011F': 'g',
    '\u0121': 'g',
    '\u01E7': 'g',
    '\u0123': 'g',
    '\u01E5': 'g',
    '\u0260': 'g',
    '\uA7A1': 'g',
    '\u1D79': 'g',
    '\uA77F': 'g',
    '\u24D7': 'h',
    '\uFF48': 'h',
    '\u0125': 'h',
    '\u1E23': 'h',
    '\u1E27': 'h',
    '\u021F': 'h',
    '\u1E25': 'h',
    '\u1E29': 'h',
    '\u1E2B': 'h',
    '\u1E96': 'h',
    '\u0127': 'h',
    '\u2C68': 'h',
    '\u2C76': 'h',
    '\u0265': 'h',
    '\u0195': 'hv',
    '\u24D8': 'i',
    '\uFF49': 'i',
    '\u00EC': 'i',
    '\u00ED': 'i',
    '\u00EE': 'i',
    '\u0129': 'i',
    '\u012B': 'i',
    '\u012D': 'i',
    '\u00EF': 'i',
    '\u1E2F': 'i',
    '\u1EC9': 'i',
    '\u01D0': 'i',
    '\u0209': 'i',
    '\u020B': 'i',
    '\u1ECB': 'i',
    '\u012F': 'i',
    '\u1E2D': 'i',
    '\u0268': 'i',
    '\u0131': 'i',
    '\u24D9': 'j',
    '\uFF4A': 'j',
    '\u0135': 'j',
    '\u01F0': 'j',
    '\u0249': 'j',
    '\u24DA': 'k',
    '\uFF4B': 'k',
    '\u1E31': 'k',
    '\u01E9': 'k',
    '\u1E33': 'k',
    '\u0137': 'k',
    '\u1E35': 'k',
    '\u0199': 'k',
    '\u2C6A': 'k',
    '\uA741': 'k',
    '\uA743': 'k',
    '\uA745': 'k',
    '\uA7A3': 'k',
    '\u24DB': 'l',
    '\uFF4C': 'l',
    '\u0140': 'l',
    '\u013A': 'l',
    '\u013E': 'l',
    '\u1E37': 'l',
    '\u1E39': 'l',
    '\u013C': 'l',
    '\u1E3D': 'l',
    '\u1E3B': 'l',
    '\u017F': 'l',
    '\u0142': 'l',
    '\u019A': 'l',
    '\u026B': 'l',
    '\u2C61': 'l',
    '\uA749': 'l',
    '\uA781': 'l',
    '\uA747': 'l',
    '\u01C9': 'lj',
    '\u24DC': 'm',
    '\uFF4D': 'm',
    '\u1E3F': 'm',
    '\u1E41': 'm',
    '\u1E43': 'm',
    '\u0271': 'm',
    '\u026F': 'm',
    '\u24DD': 'n',
    '\uFF4E': 'n',
    '\u01F9': 'n',
    '\u0144': 'n',
    '\u00F1': 'n',
    '\u1E45': 'n',
    '\u0148': 'n',
    '\u1E47': 'n',
    '\u0146': 'n',
    '\u1E4B': 'n',
    '\u1E49': 'n',
    '\u019E': 'n',
    '\u0272': 'n',
    '\u0149': 'n',
    '\uA791': 'n',
    '\uA7A5': 'n',
    '\u01CC': 'nj',
    '\u24DE': 'o',
    '\uFF4F': 'o',
    '\u00F2': 'o',
    '\u00F3': 'o',
    '\u00F4': 'o',
    '\u1ED3': 'o',
    '\u1ED1': 'o',
    '\u1ED7': 'o',
    '\u1ED5': 'o',
    '\u00F5': 'o',
    '\u1E4D': 'o',
    '\u022D': 'o',
    '\u1E4F': 'o',
    '\u014D': 'o',
    '\u1E51': 'o',
    '\u1E53': 'o',
    '\u014F': 'o',
    '\u022F': 'o',
    '\u0231': 'o',
    '\u00F6': 'o',
    '\u022B': 'o',
    '\u1ECF': 'o',
    '\u0151': 'o',
    '\u01D2': 'o',
    '\u020D': 'o',
    '\u020F': 'o',
    '\u01A1': 'o',
    '\u1EDD': 'o',
    '\u1EDB': 'o',
    '\u1EE1': 'o',
    '\u1EDF': 'o',
    '\u1EE3': 'o',
    '\u1ECD': 'o',
    '\u1ED9': 'o',
    '\u01EB': 'o',
    '\u01ED': 'o',
    '\u00F8': 'o',
    '\u01FF': 'o',
    '\u0254': 'o',
    '\uA74B': 'o',
    '\uA74D': 'o',
    '\u0275': 'o',
    '\u01A3': 'oi',
    '\u0223': 'ou',
    '\uA74F': 'oo',
    '\u24DF': 'p',
    '\uFF50': 'p',
    '\u1E55': 'p',
    '\u1E57': 'p',
    '\u01A5': 'p',
    '\u1D7D': 'p',
    '\uA751': 'p',
    '\uA753': 'p',
    '\uA755': 'p',
    '\u24E0': 'q',
    '\uFF51': 'q',
    '\u024B': 'q',
    '\uA757': 'q',
    '\uA759': 'q',
    '\u24E1': 'r',
    '\uFF52': 'r',
    '\u0155': 'r',
    '\u1E59': 'r',
    '\u0159': 'r',
    '\u0211': 'r',
    '\u0213': 'r',
    '\u1E5B': 'r',
    '\u1E5D': 'r',
    '\u0157': 'r',
    '\u1E5F': 'r',
    '\u024D': 'r',
    '\u027D': 'r',
    '\uA75B': 'r',
    '\uA7A7': 'r',
    '\uA783': 'r',
    '\u24E2': 's',
    '\uFF53': 's',
    '\u00DF': 's',
    '\u015B': 's',
    '\u1E65': 's',
    '\u015D': 's',
    '\u1E61': 's',
    '\u0161': 's',
    '\u1E67': 's',
    '\u1E63': 's',
    '\u1E69': 's',
    '\u0219': 's',
    '\u015F': 's',
    '\u023F': 's',
    '\uA7A9': 's',
    '\uA785': 's',
    '\u1E9B': 's',
    '\u24E3': 't',
    '\uFF54': 't',
    '\u1E6B': 't',
    '\u1E97': 't',
    '\u0165': 't',
    '\u1E6D': 't',
    '\u021B': 't',
    '\u0163': 't',
    '\u1E71': 't',
    '\u1E6F': 't',
    '\u0167': 't',
    '\u01AD': 't',
    '\u0288': 't',
    '\u2C66': 't',
    '\uA787': 't',
    '\uA729': 'tz',
    '\u24E4': 'u',
    '\uFF55': 'u',
    '\u00F9': 'u',
    '\u00FA': 'u',
    '\u00FB': 'u',
    '\u0169': 'u',
    '\u1E79': 'u',
    '\u016B': 'u',
    '\u1E7B': 'u',
    '\u016D': 'u',
    '\u00FC': 'u',
    '\u01DC': 'u',
    '\u01D8': 'u',
    '\u01D6': 'u',
    '\u01DA': 'u',
    '\u1EE7': 'u',
    '\u016F': 'u',
    '\u0171': 'u',
    '\u01D4': 'u',
    '\u0215': 'u',
    '\u0217': 'u',
    '\u01B0': 'u',
    '\u1EEB': 'u',
    '\u1EE9': 'u',
    '\u1EEF': 'u',
    '\u1EED': 'u',
    '\u1EF1': 'u',
    '\u1EE5': 'u',
    '\u1E73': 'u',
    '\u0173': 'u',
    '\u1E77': 'u',
    '\u1E75': 'u',
    '\u0289': 'u',
    '\u24E5': 'v',
    '\uFF56': 'v',
    '\u1E7D': 'v',
    '\u1E7F': 'v',
    '\u028B': 'v',
    '\uA75F': 'v',
    '\u028C': 'v',
    '\uA761': 'vy',
    '\u24E6': 'w',
    '\uFF57': 'w',
    '\u1E81': 'w',
    '\u1E83': 'w',
    '\u0175': 'w',
    '\u1E87': 'w',
    '\u1E85': 'w',
    '\u1E98': 'w',
    '\u1E89': 'w',
    '\u2C73': 'w',
    '\u24E7': 'x',
    '\uFF58': 'x',
    '\u1E8B': 'x',
    '\u1E8D': 'x',
    '\u24E8': 'y',
    '\uFF59': 'y',
    '\u1EF3': 'y',
    '\u00FD': 'y',
    '\u0177': 'y',
    '\u1EF9': 'y',
    '\u0233': 'y',
    '\u1E8F': 'y',
    '\u00FF': 'y',
    '\u1EF7': 'y',
    '\u1E99': 'y',
    '\u1EF5': 'y',
    '\u01B4': 'y',
    '\u024F': 'y',
    '\u1EFF': 'y',
    '\u24E9': 'z',
    '\uFF5A': 'z',
    '\u017A': 'z',
    '\u1E91': 'z',
    '\u017C': 'z',
    '\u017E': 'z',
    '\u1E93': 'z',
    '\u1E95': 'z',
    '\u01B6': 'z',
    '\u0225': 'z',
    '\u0240': 'z',
    '\u2C6C': 'z',
    '\uA763': 'z',
    '\u0386': '\u0391',
    '\u0388': '\u0395',
    '\u0389': '\u0397',
    '\u038A': '\u0399',
    '\u03AA': '\u0399',
    '\u038C': '\u039F',
    '\u038E': '\u03A5',
    '\u03AB': '\u03A5',
    '\u038F': '\u03A9',
    '\u03AC': '\u03B1',
    '\u03AD': '\u03B5',
    '\u03AE': '\u03B7',
    '\u03AF': '\u03B9',
    '\u03CA': '\u03B9',
    '\u0390': '\u03B9',
    '\u03CC': '\u03BF',
    '\u03CD': '\u03C5',
    '\u03CB': '\u03C5',
    '\u03B0': '\u03C5',
    '\u03C9': '\u03C9',
    '\u03C2': '\u03C3'
  };

  return diacritics;
});

S2.define('select2/data/base',[
  '../utils'
], function (Utils) {
  function BaseAdapter ($element, options) {
    BaseAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(BaseAdapter, Utils.Observable);

  BaseAdapter.prototype.current = function (callback) {
    throw new Error('The `current` method must be defined in child classes.');
  };

  BaseAdapter.prototype.query = function (params, callback) {
    throw new Error('The `query` method must be defined in child classes.');
  };

  BaseAdapter.prototype.bind = function (container, $container) {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.destroy = function () {
    // Can be implemented in subclasses
  };

  BaseAdapter.prototype.generateResultId = function (container, data) {
    var id = '';

    if (container != null) {
      id += container.id
    } else {
      id += Utils.generateChars(4);
    }

    id += '-result-';
    id += Utils.generateChars(4);

    if (data.id != null) {
      id += '-' + data.id.toString();
    } else {
      id += '-' + Utils.generateChars(4);
    }
    return id;
  };

  return BaseAdapter;
});

S2.define('select2/data/select',[
  './base',
  '../utils',
  'jquery'
], function (BaseAdapter, Utils, $) {
  function SelectAdapter ($element, options) {
    this.$element = $element;
    this.options = options;

    SelectAdapter.__super__.constructor.call(this);
  }

  Utils.Extend(SelectAdapter, BaseAdapter);

  SelectAdapter.prototype.current = function (callback) {
    var data = [];
    var self = this;

    this.$element.find(':selected').each(function () {
      var $option = $(this);

      var option = self.item($option);

      data.push(option);
    });

    callback(data);
  };

  SelectAdapter.prototype.select = function (data) {
    var self = this;

    data.selected = true;

    // If data.element is a DOM node, use it instead
    if ($(data.element).is('option')) {
      data.element.selected = true;

      this.$element.trigger('change');

      return;
    }

    if (this.$element.prop('multiple')) {
      this.current(function (currentData) {
        var val = [];

        data = [data];
        data.push.apply(data, currentData);

        for (var d = 0; d < data.length; d++) {
          var id = data[d].id;

          if ($.inArray(id, val) === -1) {
            val.push(id);
          }
        }

        self.$element.val(val);
        self.$element.trigger('change');
      });
    } else {
      var val = data.id;

      this.$element.val(val);
      this.$element.trigger('change');
    }
  };

  SelectAdapter.prototype.unselect = function (data) {
    var self = this;

    if (!this.$element.prop('multiple')) {
      return;
    }

    data.selected = false;

    if ($(data.element).is('option')) {
      data.element.selected = false;

      this.$element.trigger('change');

      return;
    }

    this.current(function (currentData) {
      var val = [];

      for (var d = 0; d < currentData.length; d++) {
        var id = currentData[d].id;

        if (id !== data.id && $.inArray(id, val) === -1) {
          val.push(id);
        }
      }

      self.$element.val(val);

      self.$element.trigger('change');
    });
  };

  SelectAdapter.prototype.bind = function (container, $container) {
    var self = this;

    this.container = container;

    container.on('select', function (params) {
      self.select(params.data);
    });

    container.on('unselect', function (params) {
      self.unselect(params.data);
    });
  };

  SelectAdapter.prototype.destroy = function () {
    // Remove anything added to child elements
    this.$element.find('*').each(function () {
      // Remove any custom data set by Select2
      $.removeData(this, 'data');
    });
  };

  SelectAdapter.prototype.query = function (params, callback) {
    var data = [];
    var self = this;

    var $options = this.$element.children();

    $options.each(function () {
      var $option = $(this);

      if (!$option.is('option') && !$option.is('optgroup')) {
        return;
      }

      var option = self.item($option);

      var matches = self.matches(params, option);

      if (matches !== null) {
        data.push(matches);
      }
    });

    callback({
      results: data
    });
  };

  SelectAdapter.prototype.addOptions = function ($options) {
    Utils.appendMany(this.$element, $options);
  };

  SelectAdapter.prototype.option = function (data) {
    var option;

    if (data.children) {
      option = document.createElement('optgroup');
      option.label = data.text;
    } else {
      option = document.createElement('option');

      if (option.textContent !== undefined) {
        option.textContent = data.text;
      } else {
        option.innerText = data.text;
      }
    }

    if (data.id !== undefined) {
      option.value = data.id;
    }

    if (data.disabled) {
      option.disabled = true;
    }

    if (data.selected) {
      option.selected = true;
    }

    if (data.title) {
      option.title = data.title;
    }

    var $option = $(option);

    var normalizedData = this._normalizeItem(data);
    normalizedData.element = option;

    // Override the option's data with the combined data
    $.data(option, 'data', normalizedData);

    return $option;
  };

  SelectAdapter.prototype.item = function ($option) {
    var data = {};

    data = $.data($option[0], 'data');

    if (data != null) {
      return data;
    }

    if ($option.is('option')) {
      data = {
        id: $option.val(),
        text: $option.text(),
        disabled: $option.prop('disabled'),
        selected: $option.prop('selected'),
        title: $option.prop('title')
      };
    } else if ($option.is('optgroup')) {
      data = {
        text: $option.prop('label'),
        children: [],
        title: $option.prop('title')
      };

      var $children = $option.children('option');
      var children = [];

      for (var c = 0; c < $children.length; c++) {
        var $child = $($children[c]);

        var child = this.item($child);

        children.push(child);
      }

      data.children = children;
    }

    data = this._normalizeItem(data);
    data.element = $option[0];

    $.data($option[0], 'data', data);

    return data;
  };

  SelectAdapter.prototype._normalizeItem = function (item) {
    if (!$.isPlainObject(item)) {
      item = {
        id: item,
        text: item
      };
    }

    item = $.extend({}, {
      text: ''
    }, item);

    var defaults = {
      selected: false,
      disabled: false
    };

    if (item.id != null) {
      item.id = item.id.toString();
    }

    if (item.text != null) {
      item.text = item.text.toString();
    }

    if (item._resultId == null && item.id) {
      item._resultId = this.generateResultId(this.container, item);
    }

    return $.extend({}, defaults, item);
  };

  SelectAdapter.prototype.matches = function (params, data) {
    var matcher = this.options.get('matcher');

    return matcher(params, data);
  };

  return SelectAdapter;
});

S2.define('select2/data/array',[
  './select',
  '../utils',
  'jquery'
], function (SelectAdapter, Utils, $) {
  function ArrayAdapter ($element, options) {
    var data = options.get('data') || [];

    ArrayAdapter.__super__.constructor.call(this, $element, options);

    this.addOptions(this.convertToOptions(data));
  }

  Utils.Extend(ArrayAdapter, SelectAdapter);

  ArrayAdapter.prototype.select = function (data) {
    var $option = this.$element.find('option').filter(function (i, elm) {
      return elm.value == data.id.toString();
    });

    if ($option.length === 0) {
      $option = this.option(data);

      this.addOptions($option);
    }

    ArrayAdapter.__super__.select.call(this, data);
  };

  ArrayAdapter.prototype.convertToOptions = function (data) {
    var self = this;

    var $existing = this.$element.find('option');
    var existingIds = $existing.map(function () {
      return self.item($(this)).id;
    }).get();

    var $options = [];

    // Filter out all items except for the one passed in the argument
    function onlyItem (item) {
      return function () {
        return $(this).val() == item.id;
      };
    }

    for (var d = 0; d < data.length; d++) {
      var item = this._normalizeItem(data[d]);

      // Skip items which were pre-loaded, only merge the data
      if ($.inArray(item.id, existingIds) >= 0) {
        var $existingOption = $existing.filter(onlyItem(item));

        var existingData = this.item($existingOption);
        var newData = $.extend(true, {}, item, existingData);

        var $newOption = this.option(newData);

        $existingOption.replaceWith($newOption);

        continue;
      }

      var $option = this.option(item);

      if (item.children) {
        var $children = this.convertToOptions(item.children);

        Utils.appendMany($option, $children);
      }

      $options.push($option);
    }

    return $options;
  };

  return ArrayAdapter;
});

S2.define('select2/data/ajax',[
  './array',
  '../utils',
  'jquery'
], function (ArrayAdapter, Utils, $) {
  function AjaxAdapter ($element, options) {
    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

    if (this.ajaxOptions.processResults != null) {
      this.processResults = this.ajaxOptions.processResults;
    }

    AjaxAdapter.__super__.constructor.call(this, $element, options);
  }

  Utils.Extend(AjaxAdapter, ArrayAdapter);

  AjaxAdapter.prototype._applyDefaults = function (options) {
    var defaults = {
      data: function (params) {
        return $.extend({}, params, {
          q: params.term
        });
      },
      transport: function (params, success, failure) {
        var $request = $.ajax(params);

        $request.then(success);
        $request.fail(failure);

        return $request;
      }
    };

    return $.extend({}, defaults, options, true);
  };

  AjaxAdapter.prototype.processResults = function (results) {
    return results;
  };

  AjaxAdapter.prototype.query = function (params, callback) {
    var matches = [];
    var self = this;

    if (this._request != null) {
      // JSONP requests cannot always be aborted
      if ($.isFunction(this._request.abort)) {
        this._request.abort();
      }

      this._request = null;
    }

    var options = $.extend({
      type: 'GET'
    }, this.ajaxOptions);

    if (typeof options.url === 'function') {
      options.url = options.url.call(this.$element, params);
    }

    if (typeof options.data === 'function') {
      options.data = options.data.call(this.$element, params);
    }

    function request () {
      var $request = options.transport(options, function (data) {
        var results = self.processResults(data, params);

        if (self.options.get('debug') && window.console && console.error) {
          // Check to make sure that the response included a `results` key.
          if (!results || !results.results || !$.isArray(results.results)) {
            console.error(
              'Select2: The AJAX results did not return an array in the ' +
              '`results` key of the response.'
            );
          }
        }

        callback(results);
      }, function () {
        // Attempt to detect if a request was aborted
        // Only works if the transport exposes a status property
        if ($request.status && $request.status === '0') {
          return;
        }

        self.trigger('results:message', {
          message: 'errorLoading'
        });
      });

      self._request = $request;
    }

    if (this.ajaxOptions.delay && params.term != null) {
      if (this._queryTimeout) {
        window.clearTimeout(this._queryTimeout);
      }

      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
    } else {
      request();
    }
  };

  return AjaxAdapter;
});

S2.define('select2/data/tags',[
  'jquery'
], function ($) {
  function Tags (decorated, $element, options) {
    var tags = options.get('tags');

    var createTag = options.get('createTag');

    if (createTag !== undefined) {
      this.createTag = createTag;
    }

    var insertTag = options.get('insertTag');

    if (insertTag !== undefined) {
        this.insertTag = insertTag;
    }

    decorated.call(this, $element, options);

    if ($.isArray(tags)) {
      for (var t = 0; t < tags.length; t++) {
        var tag = tags[t];
        var item = this._normalizeItem(tag);

        var $option = this.option(item);

        this.$element.append($option);
      }
    }
  }

  Tags.prototype.query = function (decorated, params, callback) {
    var self = this;

    this._removeOldTags();

    if (params.term == null || params.page != null) {
      decorated.call(this, params, callback);
      return;
    }

    function wrapper (obj, child) {
      var data = obj.results;

      for (var i = 0; i < data.length; i++) {
        var option = data[i];

        var checkChildren = (
          option.children != null &&
          !wrapper({
            results: option.children
          }, true)
        );

        var optionText = (option.text || '').toUpperCase();
        var paramsTerm = (params.term || '').toUpperCase();

        var checkText = optionText === paramsTerm;

        if (checkText || checkChildren) {
          if (child) {
            return false;
          }

          obj.data = data;
          callback(obj);

          return;
        }
      }

      if (child) {
        return true;
      }

      var tag = self.createTag(params);

      if (tag != null) {
        var $option = self.option(tag);
        $option.attr('data-select2-tag', true);

        self.addOptions([$option]);

        self.insertTag(data, tag);
      }

      obj.results = data;

      callback(obj);
    }

    decorated.call(this, params, wrapper);
  };

  Tags.prototype.createTag = function (decorated, params) {
    var term = $.trim(params.term);

    if (term === '') {
      return null;
    }

    return {
      id: term,
      text: term
    };
  };

  Tags.prototype.insertTag = function (_, data, tag) {
    data.unshift(tag);
  };

  Tags.prototype._removeOldTags = function (_) {
    var tag = this._lastTag;

    var $options = this.$element.find('option[data-select2-tag]');

    $options.each(function () {
      if (this.selected) {
        return;
      }

      $(this).remove();
    });
  };

  return Tags;
});

S2.define('select2/data/tokenizer',[
  'jquery'
], function ($) {
  function Tokenizer (decorated, $element, options) {
    var tokenizer = options.get('tokenizer');

    if (tokenizer !== undefined) {
      this.tokenizer = tokenizer;
    }

    decorated.call(this, $element, options);
  }

  Tokenizer.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    this.$search =  container.dropdown.$search || container.selection.$search ||
      $container.find('.select2-search__field');
  };

  Tokenizer.prototype.query = function (decorated, params, callback) {
    var self = this;

    function createAndSelect (data) {
      // Normalize the data object so we can use it for checks
      var item = self._normalizeItem(data);

      // Check if the data object already exists as a tag
      // Select it if it doesn't
      var $existingOptions = self.$element.find('option').filter(function () {
        return $(this).val() === item.id;
      });

      // If an existing option wasn't found for it, create the option
      if (!$existingOptions.length) {
        var $option = self.option(item);
        $option.attr('data-select2-tag', true);

        self._removeOldTags();
        self.addOptions([$option]);
      }

      // Select the item, now that we know there is an option for it
      select(item);
    }

    function select (data) {
      self.trigger('select', {
        data: data
      });
    }

    params.term = params.term || '';

    var tokenData = this.tokenizer(params, this.options, createAndSelect);

    if (tokenData.term !== params.term) {
      // Replace the search term if we have the search box
      if (this.$search.length) {
        this.$search.val(tokenData.term);
        this.$search.focus();
      }

      params.term = tokenData.term;
    }

    decorated.call(this, params, callback);
  };

  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
    var separators = options.get('tokenSeparators') || [];
    var term = params.term;
    var i = 0;

    var createTag = this.createTag || function (params) {
      return {
        id: params.term,
        text: params.term
      };
    };

    while (i < term.length) {
      var termChar = term[i];

      if ($.inArray(termChar, separators) === -1) {
        i++;

        continue;
      }

      var part = term.substr(0, i);
      var partParams = $.extend({}, params, {
        term: part
      });

      var data = createTag(partParams);

      if (data == null) {
        i++;
        continue;
      }

      callback(data);

      // Reset the term to not include the tokenized portion
      term = term.substr(i + 1) || '';
      i = 0;
    }

    return {
      term: term
    };
  };

  return Tokenizer;
});

S2.define('select2/data/minimumInputLength',[

], function () {
  function MinimumInputLength (decorated, $e, options) {
    this.minimumInputLength = options.get('minimumInputLength');

    decorated.call(this, $e, options);
  }

  MinimumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (params.term.length < this.minimumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooShort',
        args: {
          minimum: this.minimumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MinimumInputLength;
});

S2.define('select2/data/maximumInputLength',[

], function () {
  function MaximumInputLength (decorated, $e, options) {
    this.maximumInputLength = options.get('maximumInputLength');

    decorated.call(this, $e, options);
  }

  MaximumInputLength.prototype.query = function (decorated, params, callback) {
    params.term = params.term || '';

    if (this.maximumInputLength > 0 &&
        params.term.length > this.maximumInputLength) {
      this.trigger('results:message', {
        message: 'inputTooLong',
        args: {
          maximum: this.maximumInputLength,
          input: params.term,
          params: params
        }
      });

      return;
    }

    decorated.call(this, params, callback);
  };

  return MaximumInputLength;
});

S2.define('select2/data/maximumSelectionLength',[

], function (){
  function MaximumSelectionLength (decorated, $e, options) {
    this.maximumSelectionLength = options.get('maximumSelectionLength');

    decorated.call(this, $e, options);
  }

  MaximumSelectionLength.prototype.query =
    function (decorated, params, callback) {
      var self = this;

      this.current(function (currentData) {
        var count = currentData != null ? currentData.length : 0;
        if (self.maximumSelectionLength > 0 &&
          count >= self.maximumSelectionLength) {
          self.trigger('results:message', {
            message: 'maximumSelected',
            args: {
              maximum: self.maximumSelectionLength
            }
          });
          return;
        }
        decorated.call(self, params, callback);
      });
  };

  return MaximumSelectionLength;
});

S2.define('select2/dropdown',[
  'jquery',
  './utils'
], function ($, Utils) {
  function Dropdown ($element, options) {
    this.$element = $element;
    this.options = options;

    Dropdown.__super__.constructor.call(this);
  }

  Utils.Extend(Dropdown, Utils.Observable);

  Dropdown.prototype.render = function () {
    var $dropdown = $(
      '<span class="select2-dropdown">' +
        '<span class="select2-results"></span>' +
      '</span>'
    );

    $dropdown.attr('dir', this.options.get('dir'));

    this.$dropdown = $dropdown;

    return $dropdown;
  };

  Dropdown.prototype.bind = function () {
    // Should be implemented in subclasses
  };

  Dropdown.prototype.position = function ($dropdown, $container) {
    // Should be implmented in subclasses
  };

  Dropdown.prototype.destroy = function () {
    // Remove the dropdown from the DOM
    this.$dropdown.remove();
  };

  return Dropdown;
});

S2.define('select2/dropdown/search',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function Search () { }

  Search.prototype.render = function (decorated) {
    var $rendered = decorated.call(this);

    var $search = $(
      '<span class="select2-search select2-search--dropdown">' +
        '<input class="select2-search__field" type="text" tabindex="-1"' +
        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
        ' spellcheck="false" role="combobox" aria-autocomplete="list" aria-expanded="true" />' +
      '</span>'
    );

    this.$searchContainer = $search;
    this.$search = $search.find('input');

    $rendered.prepend($search);

    return $rendered;
  };

  Search.prototype.bind = function (decorated, container, $container) {
    var self = this;
    var resultsId = container.id + '-results';

    decorated.call(this, container, $container);

    this.$search.on('keydown', function (evt) {
      self.trigger('keypress', evt);

      self._keyUpPrevented = evt.isDefaultPrevented();
    });

    // Workaround for browsers which do not support the `input` event
    // This will prevent double-triggering of events for browsers which support
    // both the `keyup` and `input` events.
    this.$search.on('input', function (evt) {
      // Unbind the duplicated `keyup` event
      $(this).off('keyup');
    });

    this.$search.on('keyup input', function (evt) {
      self.handleSearch(evt);
    });

    container.on('open', function () {
      self.$search.attr('tabindex', 0);
      self.$search.attr('aria-owns', resultsId);
      self.$search.focus();

      window.setTimeout(function () {
        self.$search.focus();
      }, 0);
    });

    container.on('close', function () {
      self.$search.attr('tabindex', -1);
      self.$search.removeAttr('aria-activedescendant');
      self.$search.removeAttr('aria-owns');
      self.$search.val('');
    });

    container.on('focus', function () {
      if (container.isOpen()) {
        self.$search.focus();
      }
    });

    container.on('results:all', function (params) {
      if (params.query.term == null || params.query.term === '') {
        var showSearch = self.showSearch(params);

        if (showSearch) {
          self.$searchContainer.removeClass('select2-search--hide');
        } else {
          self.$searchContainer.addClass('select2-search--hide');
        }
      }
    });

    container.on('results:focus', function (params) {
      self.$search.attr('aria-activedescendant', params.data._resultId);
    });
  };

  Search.prototype.handleSearch = function (evt) {
    if (!this._keyUpPrevented) {
      var input = this.$search.val();

      this.trigger('query', {
        term: input
      });
    }

    this._keyUpPrevented = false;
  };

  Search.prototype.showSearch = function (_, params) {
    return true;
  };

  return Search;
});

S2.define('select2/dropdown/hidePlaceholder',[

], function () {
  function HidePlaceholder (decorated, $element, options, dataAdapter) {
    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

    decorated.call(this, $element, options, dataAdapter);
  }

  HidePlaceholder.prototype.append = function (decorated, data) {
    data.results = this.removePlaceholder(data.results);

    decorated.call(this, data);
  };

  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
    if (typeof placeholder === 'string') {
      placeholder = {
        id: '',
        text: placeholder
      };
    }

    return placeholder;
  };

  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
    var modifiedData = data.slice(0);

    for (var d = data.length - 1; d >= 0; d--) {
      var item = data[d];

      if (this.placeholder.id === item.id) {
        modifiedData.splice(d, 1);
      }
    }

    return modifiedData;
  };

  return HidePlaceholder;
});

S2.define('select2/dropdown/infiniteScroll',[
  'jquery'
], function ($) {
  function InfiniteScroll (decorated, $element, options, dataAdapter) {
    this.lastParams = {};

    decorated.call(this, $element, options, dataAdapter);

    this.$loadingMore = this.createLoadingMore();
    this.loading = false;
  }

  InfiniteScroll.prototype.append = function (decorated, data) {
    this.$loadingMore.remove();
    this.loading = false;

    decorated.call(this, data);

    if (this.showLoadingMore(data)) {
      this.$results.append(this.$loadingMore);
    }
  };

  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('query', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    container.on('query:append', function (params) {
      self.lastParams = params;
      self.loading = true;
    });

    this.$results.on('scroll', function () {
      var isLoadMoreVisible = $.contains(
        document.documentElement,
        self.$loadingMore[0]
      );

      if (self.loading || !isLoadMoreVisible) {
        return;
      }

      var currentOffset = self.$results.offset().top +
        self.$results.outerHeight(false);
      var loadingMoreOffset = self.$loadingMore.offset().top +
        self.$loadingMore.outerHeight(false);

      if (currentOffset + 50 >= loadingMoreOffset) {
        self.loadMore();
      }
    });
  };

  InfiniteScroll.prototype.loadMore = function () {
    this.loading = true;

    var params = $.extend({}, {page: 1}, this.lastParams);

    params.page++;

    this.trigger('query:append', params);
  };

  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
    return data.pagination && data.pagination.more;
  };

  InfiniteScroll.prototype.createLoadingMore = function () {
    var $option = $(
      '<li ' +
      'class="select2-results__option select2-results__option--load-more"' +
      'role="option" aria-disabled="true"></li>'
    );

    var message = this.options.get('translations').get('loadingMore');

    $option.html(message(this.lastParams));

    return $option;
  };

  return InfiniteScroll;
});

S2.define('select2/dropdown/attachBody',[
  'jquery',
  '../utils'
], function ($, Utils) {
  function AttachBody (decorated, $element, options) {
    this.$dropdownParent = options.get('dropdownParent') || $(document.body);

    decorated.call(this, $element, options);
  }

  AttachBody.prototype.bind = function (decorated, container, $container) {
    var self = this;

    var setupResultsEvents = false;

    decorated.call(this, container, $container);

    container.on('open', function () {
      self._showDropdown();
      self._attachPositioningHandler(container);

      if (!setupResultsEvents) {
        setupResultsEvents = true;

        container.on('results:all', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });

        container.on('results:append', function () {
          self._positionDropdown();
          self._resizeDropdown();
        });
      }
    });

    container.on('close', function () {
      self._hideDropdown();
      self._detachPositioningHandler(container);
    });

    this.$dropdownContainer.on('mousedown', function (evt) {
      evt.stopPropagation();
    });
  };

  AttachBody.prototype.destroy = function (decorated) {
    decorated.call(this);

    this.$dropdownContainer.remove();
  };

  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
    // Clone all of the container classes
    $dropdown.attr('class', $container.attr('class'));

    $dropdown.removeClass('select2');
    $dropdown.addClass('select2-container--open');

    $dropdown.css({
      position: 'absolute',
      top: -999999
    });

    this.$container = $container;
  };

  AttachBody.prototype.render = function (decorated) {
    var $container = $('<span></span>');

    var $dropdown = decorated.call(this);
    $container.append($dropdown);

    this.$dropdownContainer = $container;

    return $container;
  };

  AttachBody.prototype._hideDropdown = function (decorated) {
    this.$dropdownContainer.detach();
  };

  AttachBody.prototype._attachPositioningHandler =
      function (decorated, container) {
    var self = this;

    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.each(function () {
      $(this).data('select2-scroll-position', {
        x: $(this).scrollLeft(),
        y: $(this).scrollTop()
      });
    });

    $watchers.on(scrollEvent, function (ev) {
      var position = $(this).data('select2-scroll-position');
      $(this).scrollTop(position.y);
    });

    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
      function (e) {
      self._positionDropdown();
      self._resizeDropdown();
    });
  };

  AttachBody.prototype._detachPositioningHandler =
      function (decorated, container) {
    var scrollEvent = 'scroll.select2.' + container.id;
    var resizeEvent = 'resize.select2.' + container.id;
    var orientationEvent = 'orientationchange.select2.' + container.id;

    var $watchers = this.$container.parents().filter(Utils.hasScroll);
    $watchers.off(scrollEvent);

    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
  };

  AttachBody.prototype._positionDropdown = function () {
    var $window = $(window);

    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

    var newDirection = null;

    var offset = this.$container.offset();

    offset.bottom = offset.top + this.$container.outerHeight(false);

    var container = {
      height: this.$container.outerHeight(false)
    };

    container.top = offset.top;
    container.bottom = offset.top + container.height;

    var dropdown = {
      height: this.$dropdown.outerHeight(false)
    };

    var viewport = {
      top: $window.scrollTop(),
      bottom: $window.scrollTop() + $window.height()
    };

    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

    var css = {
      left: offset.left,
      top: container.bottom
    };

    // Determine what the parent element is to use for calciulating the offset
    var $offsetParent = this.$dropdownParent;

    // For statically positoned elements, we need to get the element
    // that is determining the offset
    if ($offsetParent.css('position') === 'static') {
      $offsetParent = $offsetParent.offsetParent();
    }

    var parentOffset = $offsetParent.offset();

    css.top -= parentOffset.top;
    css.left -= parentOffset.left;

    if (!isCurrentlyAbove && !isCurrentlyBelow) {
      newDirection = 'below';
    }

    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
      newDirection = 'above';
    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
      newDirection = 'below';
    }

    if (newDirection == 'above' ||
      (isCurrentlyAbove && newDirection !== 'below')) {
      css.top = container.top - parentOffset.top - dropdown.height;
    }

    if (newDirection != null) {
      this.$dropdown
        .removeClass('select2-dropdown--below select2-dropdown--above')
        .addClass('select2-dropdown--' + newDirection);
      this.$container
        .removeClass('select2-container--below select2-container--above')
        .addClass('select2-container--' + newDirection);
    }

    this.$dropdownContainer.css(css);
  };

  AttachBody.prototype._resizeDropdown = function () {
    var css = {
      width: this.$container.outerWidth(false) + 'px'
    };

    if (this.options.get('dropdownAutoWidth')) {
      css.minWidth = css.width;
      css.position = 'relative';
      css.width = 'auto';
    }

    this.$dropdown.css(css);
  };

  AttachBody.prototype._showDropdown = function (decorated) {
    this.$dropdownContainer.appendTo(this.$dropdownParent);

    this._positionDropdown();
    this._resizeDropdown();
  };

  return AttachBody;
});

S2.define('select2/dropdown/minimumResultsForSearch',[

], function () {
  function countResults (data) {
    var count = 0;

    for (var d = 0; d < data.length; d++) {
      var item = data[d];

      if (item.children) {
        count += countResults(item.children);
      } else {
        count++;
      }
    }

    return count;
  }

  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

    if (this.minimumResultsForSearch < 0) {
      this.minimumResultsForSearch = Infinity;
    }

    decorated.call(this, $element, options, dataAdapter);
  }

  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
    if (countResults(params.data.results) < this.minimumResultsForSearch) {
      return false;
    }

    return decorated.call(this, params);
  };

  return MinimumResultsForSearch;
});

S2.define('select2/dropdown/selectOnClose',[

], function () {
  function SelectOnClose () { }

  SelectOnClose.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('close', function (params) {
      self._handleSelectOnClose(params);
    });
  };

  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
    if (params && params.originalSelect2Event != null) {
      var event = params.originalSelect2Event;

      // Don't select an item if the close event was triggered from a select or
      // unselect event
      if (event._type === 'select' || event._type === 'unselect') {
        return;
      }
    }

    var $highlightedResults = this.getHighlightedResults();

    // Only select highlighted results
    if ($highlightedResults.length < 1) {
      return;
    }

    var data = $highlightedResults.data('data');

    // Don't re-select already selected resulte
    if (
      (data.element != null && data.element.selected) ||
      (data.element == null && data.selected)
    ) {
      return;
    }

    this.trigger('select', {
        data: data
    });
  };

  return SelectOnClose;
});

S2.define('select2/dropdown/closeOnSelect',[

], function () {
  function CloseOnSelect () { }

  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
    var self = this;

    decorated.call(this, container, $container);

    container.on('select', function (evt) {
      self._selectTriggered(evt);
    });

    container.on('unselect', function (evt) {
      self._selectTriggered(evt);
    });
  };

  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
    var originalEvent = evt.originalEvent;

    // Don't close if the control key is being held
    if (originalEvent && originalEvent.ctrlKey) {
      return;
    }

    this.trigger('close', {
      originalEvent: originalEvent,
      originalSelect2Event: evt
    });
  };

  return CloseOnSelect;
});

S2.define('select2/i18n/en',[],function () {
  // English
  return {
    errorLoading: function () {
      return 'The results could not be loaded.';
    },
    inputTooLong: function (args) {
      var overChars = args.input.length - args.maximum;

      var message = 'Please delete ' + overChars + ' character';

      if (overChars != 1) {
        message += 's';
      }

      return message;
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;

      var message = 'Please enter ' + remainingChars + ' or more characters';

      return message;
    },
    loadingMore: function () {
      return 'Loading more results…';
    },
    maximumSelected: function (args) {
      var message = 'You can only select ' + args.maximum + ' item';

      if (args.maximum != 1) {
        message += 's';
      }

      return message;
    },
    noResults: function () {
      return 'No results found';
    },
    searching: function () {
      return 'Searching…';
    }
  };
});

S2.define('select2/defaults',[
  'jquery',
  'require',

  './results',

  './selection/single',
  './selection/multiple',
  './selection/placeholder',
  './selection/allowClear',
  './selection/search',
  './selection/eventRelay',

  './utils',
  './translation',
  './diacritics',

  './data/select',
  './data/array',
  './data/ajax',
  './data/tags',
  './data/tokenizer',
  './data/minimumInputLength',
  './data/maximumInputLength',
  './data/maximumSelectionLength',

  './dropdown',
  './dropdown/search',
  './dropdown/hidePlaceholder',
  './dropdown/infiniteScroll',
  './dropdown/attachBody',
  './dropdown/minimumResultsForSearch',
  './dropdown/selectOnClose',
  './dropdown/closeOnSelect',

  './i18n/en'
], function ($, require,

             ResultsList,

             SingleSelection, MultipleSelection, Placeholder, AllowClear,
             SelectionSearch, EventRelay,

             Utils, Translation, DIACRITICS,

             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

             EnglishTranslation) {
  function Defaults () {
    this.reset();
  }

  Defaults.prototype.apply = function (options) {
    options = $.extend(true, {}, this.defaults, options);

    if (options.dataAdapter == null) {
      if (options.ajax != null) {
        options.dataAdapter = AjaxData;
      } else if (options.data != null) {
        options.dataAdapter = ArrayData;
      } else {
        options.dataAdapter = SelectData;
      }

      if (options.minimumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MinimumInputLength
        );
      }

      if (options.maximumInputLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumInputLength
        );
      }

      if (options.maximumSelectionLength > 0) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          MaximumSelectionLength
        );
      }

      if (options.tags) {
        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
      }

      if (options.tokenSeparators != null || options.tokenizer != null) {
        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Tokenizer
        );
      }

      if (options.query != null) {
        var Query = require(options.amdBase + 'compat/query');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          Query
        );
      }

      if (options.initSelection != null) {
        var InitSelection = require(options.amdBase + 'compat/initSelection');

        options.dataAdapter = Utils.Decorate(
          options.dataAdapter,
          InitSelection
        );
      }
    }

    if (options.resultsAdapter == null) {
      options.resultsAdapter = ResultsList;

      if (options.ajax != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          InfiniteScroll
        );
      }

      if (options.placeholder != null) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          HidePlaceholder
        );
      }

      if (options.selectOnClose) {
        options.resultsAdapter = Utils.Decorate(
          options.resultsAdapter,
          SelectOnClose
        );
      }
    }

    if (options.dropdownAdapter == null) {
      if (options.multiple) {
        options.dropdownAdapter = Dropdown;
      } else {
        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

        options.dropdownAdapter = SearchableDropdown;
      }

      if (options.minimumResultsForSearch !== 0) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          MinimumResultsForSearch
        );
      }

      if (options.closeOnSelect) {
        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          CloseOnSelect
        );
      }

      if (
        options.dropdownCssClass != null ||
        options.dropdownCss != null ||
        options.adaptDropdownCssClass != null
      ) {
        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

        options.dropdownAdapter = Utils.Decorate(
          options.dropdownAdapter,
          DropdownCSS
        );
      }

      options.dropdownAdapter = Utils.Decorate(
        options.dropdownAdapter,
        AttachBody
      );
    }

    if (options.selectionAdapter == null) {
      if (options.multiple) {
        options.selectionAdapter = MultipleSelection;
      } else {
        options.selectionAdapter = SingleSelection;
      }

      // Add the placeholder mixin if a placeholder was specified
      if (options.placeholder != null) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          Placeholder
        );
      }

      if (options.allowClear) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          AllowClear
        );
      }

      if (options.multiple) {
        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          SelectionSearch
        );
      }

      if (
        options.containerCssClass != null ||
        options.containerCss != null ||
        options.adaptContainerCssClass != null
      ) {
        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

        options.selectionAdapter = Utils.Decorate(
          options.selectionAdapter,
          ContainerCSS
        );
      }

      options.selectionAdapter = Utils.Decorate(
        options.selectionAdapter,
        EventRelay
      );
    }

    if (typeof options.language === 'string') {
      // Check if the language is specified with a region
      if (options.language.indexOf('-') > 0) {
        // Extract the region information if it is included
        var languageParts = options.language.split('-');
        var baseLanguage = languageParts[0];

        options.language = [options.language, baseLanguage];
      } else {
        options.language = [options.language];
      }
    }

    if ($.isArray(options.language)) {
      var languages = new Translation();
      options.language.push('en');

      var languageNames = options.language;

      for (var l = 0; l < languageNames.length; l++) {
        var name = languageNames[l];
        var language = {};

        try {
          // Try to load it with the original name
          language = Translation.loadPath(name);
        } catch (e) {
          try {
            // If we couldn't load it, check if it wasn't the full path
            name = this.defaults.amdLanguageBase + name;
            language = Translation.loadPath(name);
          } catch (ex) {
            // The translation could not be loaded at all. Sometimes this is
            // because of a configuration problem, other times this can be
            // because of how Select2 helps load all possible translation files.
            if (options.debug && window.console && console.warn) {
              console.warn(
                'Select2: The language file for "' + name + '" could not be ' +
                'automatically loaded. A fallback will be used instead.'
              );
            }

            continue;
          }
        }

        languages.extend(language);
      }

      options.translations = languages;
    } else {
      var baseTranslation = Translation.loadPath(
        this.defaults.amdLanguageBase + 'en'
      );
      var customTranslation = new Translation(options.language);

      customTranslation.extend(baseTranslation);

      options.translations = customTranslation;
    }

    return options;
  };

  Defaults.prototype.reset = function () {
    function stripDiacritics (text) {
      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
      function match(a) {
        return DIACRITICS[a] || a;
      }

      return text.replace(/[^\u0000-\u007E]/g, match);
    }

    function matcher (params, data) {
      // Always return the object if there is nothing to compare
      if ($.trim(params.term) === '') {
        return data;
      }

      // Do a recursive check for options with children
      if (data.children && data.children.length > 0) {
        // Clone the data object if there are children
        // This is required as we modify the object to remove any non-matches
        var match = $.extend(true, {}, data);

        // Check each child of the option
        for (var c = data.children.length - 1; c >= 0; c--) {
          var child = data.children[c];

          var matches = matcher(params, child);

          // If there wasn't a match, remove the object in the array
          if (matches == null) {
            match.children.splice(c, 1);
          }
        }

        // If any children matched, return the new object
        if (match.children.length > 0) {
          return match;
        }

        // If there were no matching children, check just the plain object
        return matcher(params, match);
      }

      var original = stripDiacritics(data.text).toUpperCase();
      var term = stripDiacritics(params.term).toUpperCase();

      // Check if the text contains the term
      if (original.indexOf(term) > -1) {
        return data;
      }

      // If it doesn't contain the term, don't return anything
      return null;
    }

    this.defaults = {
      amdBase: './',
      amdLanguageBase: './i18n/',
      closeOnSelect: true,
      debug: false,
      dropdownAutoWidth: false,
      escapeMarkup: Utils.escapeMarkup,
      language: EnglishTranslation,
      matcher: matcher,
      minimumInputLength: 0,
      maximumInputLength: 0,
      maximumSelectionLength: 0,
      minimumResultsForSearch: 0,
      selectOnClose: false,
      sorter: function (data) {
        return data;
      },
      templateResult: function (result) {
        return result.text;
      },
      templateSelection: function (selection) {
        return selection.text;
      },
      theme: 'default',
      width: 'resolve'
    };
  };

  Defaults.prototype.set = function (key, value) {
    var camelKey = $.camelCase(key);

    var data = {};
    data[camelKey] = value;

    var convertedData = Utils._convertData(data);

    $.extend(this.defaults, convertedData);
  };

  var defaults = new Defaults();

  return defaults;
});

S2.define('select2/options',[
  'require',
  'jquery',
  './defaults',
  './utils'
], function (require, $, Defaults, Utils) {
  function Options (options, $element) {
    this.options = options;

    if ($element != null) {
      this.fromElement($element);
    }

    this.options = Defaults.apply(this.options);

    if ($element && $element.is('input')) {
      var InputCompat = require(this.get('amdBase') + 'compat/inputData');

      this.options.dataAdapter = Utils.Decorate(
        this.options.dataAdapter,
        InputCompat
      );
    }
  }

  Options.prototype.fromElement = function ($e) {
    var excludedData = ['select2'];

    if (this.options.multiple == null) {
      this.options.multiple = $e.prop('multiple');
    }

    if (this.options.disabled == null) {
      this.options.disabled = $e.prop('disabled');
    }

    if (this.options.language == null) {
      if ($e.prop('lang')) {
        this.options.language = $e.prop('lang').toLowerCase();
      } else if ($e.closest('[lang]').prop('lang')) {
        this.options.language = $e.closest('[lang]').prop('lang');
      }
    }

    if (this.options.dir == null) {
      if ($e.prop('dir')) {
        this.options.dir = $e.prop('dir');
      } else if ($e.closest('[dir]').prop('dir')) {
        this.options.dir = $e.closest('[dir]').prop('dir');
      } else {
        this.options.dir = 'ltr';
      }
    }

    $e.prop('disabled', this.options.disabled);
    $e.prop('multiple', this.options.multiple);

    if ($e.data('select2Tags')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-select2-tags` attribute has been changed to ' +
          'use the `data-data` and `data-tags="true"` attributes and will be ' +
          'removed in future versions of Select2.'
        );
      }

      $e.data('data', $e.data('select2Tags'));
      $e.data('tags', true);
    }

    if ($e.data('ajaxUrl')) {
      if (this.options.debug && window.console && console.warn) {
        console.warn(
          'Select2: The `data-ajax-url` attribute has been changed to ' +
          '`data-ajax--url` and support for the old attribute will be removed' +
          ' in future versions of Select2.'
        );
      }

      $e.attr('ajax--url', $e.data('ajaxUrl'));
      $e.data('ajax--url', $e.data('ajaxUrl'));
    }

    var dataset = {};

    // Prefer the element's `dataset` attribute if it exists
    // jQuery 1.x does not correctly handle data attributes with multiple dashes
    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
      dataset = $.extend(true, {}, $e[0].dataset, $e.data());
    } else {
      dataset = $e.data();
    }

    var data = $.extend(true, {}, dataset);

    data = Utils._convertData(data);

    for (var key in data) {
      if ($.inArray(key, excludedData) > -1) {
        continue;
      }

      if ($.isPlainObject(this.options[key])) {
        $.extend(this.options[key], data[key]);
      } else {
        this.options[key] = data[key];
      }
    }

    return this;
  };

  Options.prototype.get = function (key) {
    return this.options[key];
  };

  Options.prototype.set = function (key, val) {
    this.options[key] = val;
  };

  return Options;
});

S2.define('select2/core',[
  'jquery',
  './options',
  './utils',
  './keys'
], function ($, Options, Utils, KEYS) {
  var Select2 = function ($element, options) {
    if ($element.data('select2') != null) {
      $element.data('select2').destroy();
    }

    this.$element = $element;

    this.id = this._generateId($element);

    options = options || {};

    this.options = new Options(options, $element);

    Select2.__super__.constructor.call(this);

    // Set up the tabindex

    var tabindex = $element.attr('tabindex') || 0;
    $element.data('old-tabindex', tabindex);
    $element.attr('tabindex', '-1');

    // Set up containers and adapters

    var DataAdapter = this.options.get('dataAdapter');
    this.dataAdapter = new DataAdapter($element, this.options);

    var $container = this.render();

    this._placeContainer($container);

    var SelectionAdapter = this.options.get('selectionAdapter');
    this.selection = new SelectionAdapter($element, this.options);
    this.$selection = this.selection.render();

    this.selection.position(this.$selection, $container);

    var DropdownAdapter = this.options.get('dropdownAdapter');
    this.dropdown = new DropdownAdapter($element, this.options);
    this.$dropdown = this.dropdown.render();

    this.dropdown.position(this.$dropdown, $container);

    var ResultsAdapter = this.options.get('resultsAdapter');
    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
    this.$results = this.results.render();

    this.results.position(this.$results, this.$dropdown);

    // Bind events

    var self = this;

    // Bind the container to all of the adapters
    this._bindAdapters();

    // Register any DOM event handlers
    this._registerDomEvents();

    // Register any internal event handlers
    this._registerDataEvents();
    this._registerSelectionEvents();
    this._registerDropdownEvents();
    this._registerResultsEvents();
    this._registerEvents();

    // Set the initial state
    this.dataAdapter.current(function (initialData) {
      self.trigger('selection:update', {
        data: initialData
      });
    });

    // Hide the original select
    $element.addClass('select2-hidden-accessible');
    $element.attr('aria-hidden', 'true');

    // Synchronize any monitored attributes
    this._syncAttributes();

    $element.data('select2', this);
  };

  Utils.Extend(Select2, Utils.Observable);

  Select2.prototype._generateId = function ($element) {
    var id = '';

    if ($element.attr('id') != null) {
      id = $element.attr('id');
    } else if ($element.attr('name') != null) {
      id = $element.attr('name') + '-' + Utils.generateChars(2);
    } else {
      id = Utils.generateChars(4);
    }

    id = id.replace(/(:|\.|\[|\]|,)/g, '');
    id = 'select2-' + id;

    return id;
  };

  Select2.prototype._placeContainer = function ($container) {
    $container.insertAfter(this.$element);

    var width = this._resolveWidth(this.$element, this.options.get('width'));

    if (width != null) {
      $container.css('width', width);
    }
  };

  Select2.prototype._resolveWidth = function ($element, method) {
    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

    if (method == 'resolve') {
      var styleWidth = this._resolveWidth($element, 'style');

      if (styleWidth != null) {
        return styleWidth;
      }

      return this._resolveWidth($element, 'element');
    }

    if (method == 'element') {
      var elementWidth = $element.outerWidth(false);

      if (elementWidth <= 0) {
        return 'auto';
      }

      return elementWidth + 'px';
    }

    if (method == 'style') {
      var style = $element.attr('style');

      if (typeof(style) !== 'string') {
        return null;
      }

      var attrs = style.split(';');

      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
        var attr = attrs[i].replace(/\s/g, '');
        var matches = attr.match(WIDTH);

        if (matches !== null && matches.length >= 1) {
          return matches[1];
        }
      }

      return null;
    }

    return method;
  };

  Select2.prototype._bindAdapters = function () {
    this.dataAdapter.bind(this, this.$container);
    this.selection.bind(this, this.$container);

    this.dropdown.bind(this, this.$container);
    this.results.bind(this, this.$container);
  };

  Select2.prototype._registerDomEvents = function () {
    var self = this;

    this.$element.on('change.select2', function () {
      self.dataAdapter.current(function (data) {
        self.trigger('selection:update', {
          data: data
        });
      });
    });

    this.$element.on('focus.select2', function (evt) {
      self.trigger('focus', evt);
    });

    this._syncA = Utils.bind(this._syncAttributes, this);
    this._syncS = Utils.bind(this._syncSubtree, this);

    if (this.$element[0].attachEvent) {
      this.$element[0].attachEvent('onpropertychange', this._syncA);
    }

    var observer = window.MutationObserver ||
      window.WebKitMutationObserver ||
      window.MozMutationObserver
    ;

    if (observer != null) {
      this._observer = new observer(function (mutations) {
        $.each(mutations, self._syncA);
        $.each(mutations, self._syncS);
      });
      this._observer.observe(this.$element[0], {
        attributes: true,
        childList: true,
        subtree: false
      });
    } else if (this.$element[0].addEventListener) {
      this.$element[0].addEventListener(
        'DOMAttrModified',
        self._syncA,
        false
      );
      this.$element[0].addEventListener(
        'DOMNodeInserted',
        self._syncS,
        false
      );
      this.$element[0].addEventListener(
        'DOMNodeRemoved',
        self._syncS,
        false
      );
    }
  };

  Select2.prototype._registerDataEvents = function () {
    var self = this;

    this.dataAdapter.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerSelectionEvents = function () {
    var self = this;
    var nonRelayEvents = ['toggle', 'focus'];

    this.selection.on('toggle', function () {
      self.toggleDropdown();
    });

    this.selection.on('focus', function (params) {
      self.focus(params);
    });

    this.selection.on('*', function (name, params) {
      if ($.inArray(name, nonRelayEvents) !== -1) {
        return;
      }

      self.trigger(name, params);
    });
  };

  Select2.prototype._registerDropdownEvents = function () {
    var self = this;

    this.dropdown.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerResultsEvents = function () {
    var self = this;

    this.results.on('*', function (name, params) {
      self.trigger(name, params);
    });
  };

  Select2.prototype._registerEvents = function () {
    var self = this;

    this.on('open', function () {
      self.$container.addClass('select2-container--open');
    });

    this.on('close', function () {
      self.$container.removeClass('select2-container--open');
    });

    this.on('enable', function () {
      self.$container.removeClass('select2-container--disabled');
    });

    this.on('disable', function () {
      self.$container.addClass('select2-container--disabled');
    });

    this.on('blur', function () {
      self.$container.removeClass('select2-container--focus');
    });

    this.on('query', function (params) {
      if (!self.isOpen()) {
        self.trigger('open', {});
      }

      this.dataAdapter.query(params, function (data) {
        self.trigger('results:all', {
          data: data,
          query: params
        });
      });
    });

    this.on('query:append', function (params) {
      this.dataAdapter.query(params, function (data) {
        self.trigger('results:append', {
          data: data,
          query: params
        });
      });
    });

    this.on('keypress', function (evt) {
      var key = evt.which;

      if (self.isOpen()) {
        if (key === KEYS.ESC || key === KEYS.TAB ||
            (key === KEYS.UP && evt.altKey)) {
          self.close();

          evt.preventDefault();
        } else if (key === KEYS.ENTER) {
          self.trigger('results:select', {});

          evt.preventDefault();
        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
          self.trigger('results:toggle', {});

          evt.preventDefault();
        } else if (key === KEYS.UP) {
          self.trigger('results:previous', {});

          evt.preventDefault();
        } else if (key === KEYS.DOWN) {
          self.trigger('results:next', {});

          evt.preventDefault();
        }
      } else {
        if (key === KEYS.ENTER || key === KEYS.SPACE ||
            (key === KEYS.DOWN && evt.altKey)) {
          self.open();

          evt.preventDefault();
        }
      }
    });
  };

  Select2.prototype._syncAttributes = function () {
    this.options.set('disabled', this.$element.prop('disabled'));

    if (this.options.get('disabled')) {
      if (this.isOpen()) {
        this.close();
      }

      this.trigger('disable', {});
    } else {
      this.trigger('enable', {});
    }
  };

  Select2.prototype._syncSubtree = function (evt, mutations) {
    var changed = false;
    var self = this;

    // Ignore any mutation events raised for elements that aren't options or
    // optgroups. This handles the case when the select element is destroyed
    if (
      evt && evt.target && (
        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
      )
    ) {
      return;
    }

    if (!mutations) {
      // If mutation events aren't supported, then we can only assume that the
      // change affected the selections
      changed = true;
    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
      for (var n = 0; n < mutations.addedNodes.length; n++) {
        var node = mutations.addedNodes[n];

        if (node.selected) {
          changed = true;
        }
      }
    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
      changed = true;
    }

    // Only re-pull the data if we think there is a change
    if (changed) {
      this.dataAdapter.current(function (currentData) {
        self.trigger('selection:update', {
          data: currentData
        });
      });
    }
  };

  /**
   * Override the trigger method to automatically trigger pre-events when
   * there are events that can be prevented.
   */
  Select2.prototype.trigger = function (name, args) {
    var actualTrigger = Select2.__super__.trigger;
    var preTriggerMap = {
      'open': 'opening',
      'close': 'closing',
      'select': 'selecting',
      'unselect': 'unselecting'
    };

    if (args === undefined) {
      args = {};
    }

    if (name in preTriggerMap) {
      var preTriggerName = preTriggerMap[name];
      var preTriggerArgs = {
        prevented: false,
        name: name,
        args: args
      };

      actualTrigger.call(this, preTriggerName, preTriggerArgs);

      if (preTriggerArgs.prevented) {
        args.prevented = true;

        return;
      }
    }

    actualTrigger.call(this, name, args);
  };

  Select2.prototype.toggleDropdown = function () {
    if (this.options.get('disabled')) {
      return;
    }

    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };

  Select2.prototype.open = function () {
    if (this.isOpen()) {
      return;
    }

    this.trigger('query', {});
  };

  Select2.prototype.close = function () {
    if (!this.isOpen()) {
      return;
    }

    this.trigger('close', {});
  };

  Select2.prototype.isOpen = function () {
    return this.$container.hasClass('select2-container--open');
  };

  Select2.prototype.hasFocus = function () {
    return this.$container.hasClass('select2-container--focus');
  };

  Select2.prototype.focus = function (data) {
    // No need to re-trigger focus events if we are already focused
    if (this.hasFocus()) {
      return;
    }

    this.$container.addClass('select2-container--focus');
    this.trigger('focus', {});
  };

  Select2.prototype.enable = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("enable")` method has been deprecated and will' +
        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
        ' instead.'
      );
    }

    if (args == null || args.length === 0) {
      args = [true];
    }

    var disabled = !args[0];

    this.$element.prop('disabled', disabled);
  };

  Select2.prototype.data = function () {
    if (this.options.get('debug') &&
        arguments.length > 0 && window.console && console.warn) {
      console.warn(
        'Select2: Data can no longer be set using `select2("data")`. You ' +
        'should consider setting the value instead using `$element.val()`.'
      );
    }

    var data = [];

    this.dataAdapter.current(function (currentData) {
      data = currentData;
    });

    return data;
  };

  Select2.prototype.val = function (args) {
    if (this.options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `select2("val")` method has been deprecated and will be' +
        ' removed in later Select2 versions. Use $element.val() instead.'
      );
    }

    if (args == null || args.length === 0) {
      return this.$element.val();
    }

    var newVal = args[0];

    if ($.isArray(newVal)) {
      newVal = $.map(newVal, function (obj) {
        return obj.toString();
      });
    }

    this.$element.val(newVal).trigger('change');
  };

  Select2.prototype.destroy = function () {
    this.$container.remove();

    if (this.$element[0].detachEvent) {
      this.$element[0].detachEvent('onpropertychange', this._syncA);
    }

    if (this._observer != null) {
      this._observer.disconnect();
      this._observer = null;
    } else if (this.$element[0].removeEventListener) {
      this.$element[0]
        .removeEventListener('DOMAttrModified', this._syncA, false);
      this.$element[0]
        .removeEventListener('DOMNodeInserted', this._syncS, false);
      this.$element[0]
        .removeEventListener('DOMNodeRemoved', this._syncS, false);
    }

    this._syncA = null;
    this._syncS = null;

    this.$element.off('.select2');
    this.$element.attr('tabindex', this.$element.data('old-tabindex'));

    this.$element.removeClass('select2-hidden-accessible');
    this.$element.attr('aria-hidden', 'false');
    this.$element.removeData('select2');

    this.dataAdapter.destroy();
    this.selection.destroy();
    this.dropdown.destroy();
    this.results.destroy();

    this.dataAdapter = null;
    this.selection = null;
    this.dropdown = null;
    this.results = null;
  };

  Select2.prototype.render = function () {
    var $container = $(
      '<span class="select2 select2-container">' +
        '<span class="selection"></span>' +
        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
      '</span>'
    );

    $container.attr('dir', this.options.get('dir'));

    this.$container = $container;

    this.$container.addClass('select2-container--' + this.options.get('theme'));

    $container.data('element', this.$element);

    return $container;
  };

  return Select2;
});

S2.define('select2/compat/utils',[
  'jquery'
], function ($) {
  function syncCssClasses ($dest, $src, adapter) {
    var classes, replacements = [], adapted;

    classes = $.trim($dest.attr('class'));

    if (classes) {
      classes = '' + classes; // for IE which returns object

      $(classes.split(/\s+/)).each(function () {
        // Save all Select2 classes
        if (this.indexOf('select2-') === 0) {
          replacements.push(this);
        }
      });
    }

    classes = $.trim($src.attr('class'));

    if (classes) {
      classes = '' + classes; // for IE which returns object

      $(classes.split(/\s+/)).each(function () {
        // Only adapt non-Select2 classes
        if (this.indexOf('select2-') !== 0) {
          adapted = adapter(this);

          if (adapted != null) {
            replacements.push(adapted);
          }
        }
      });
    }

    $dest.attr('class', replacements.join(' '));
  }

  return {
    syncCssClasses: syncCssClasses
  };
});

S2.define('select2/compat/containerCss',[
  'jquery',
  './utils'
], function ($, CompatUtils) {
  // No-op CSS adapter that discards all classes by default
  function _containerAdapter (clazz) {
    return null;
  }

  function ContainerCSS () { }

  ContainerCSS.prototype.render = function (decorated) {
    var $container = decorated.call(this);

    var containerCssClass = this.options.get('containerCssClass') || '';

    if ($.isFunction(containerCssClass)) {
      containerCssClass = containerCssClass(this.$element);
    }

    var containerCssAdapter = this.options.get('adaptContainerCssClass');
    containerCssAdapter = containerCssAdapter || _containerAdapter;

    if (containerCssClass.indexOf(':all:') !== -1) {
      containerCssClass = containerCssClass.replace(':all:', '');

      var _cssAdapter = containerCssAdapter;

      containerCssAdapter = function (clazz) {
        var adapted = _cssAdapter(clazz);

        if (adapted != null) {
          // Append the old one along with the adapted one
          return adapted + ' ' + clazz;
        }

        return clazz;
      };
    }

    var containerCss = this.options.get('containerCss') || {};

    if ($.isFunction(containerCss)) {
      containerCss = containerCss(this.$element);
    }

    CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);

    $container.css(containerCss);
    $container.addClass(containerCssClass);

    return $container;
  };

  return ContainerCSS;
});

S2.define('select2/compat/dropdownCss',[
  'jquery',
  './utils'
], function ($, CompatUtils) {
  // No-op CSS adapter that discards all classes by default
  function _dropdownAdapter (clazz) {
    return null;
  }

  function DropdownCSS () { }

  DropdownCSS.prototype.render = function (decorated) {
    var $dropdown = decorated.call(this);

    var dropdownCssClass = this.options.get('dropdownCssClass') || '';

    if ($.isFunction(dropdownCssClass)) {
      dropdownCssClass = dropdownCssClass(this.$element);
    }

    var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');
    dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;

    if (dropdownCssClass.indexOf(':all:') !== -1) {
      dropdownCssClass = dropdownCssClass.replace(':all:', '');

      var _cssAdapter = dropdownCssAdapter;

      dropdownCssAdapter = function (clazz) {
        var adapted = _cssAdapter(clazz);

        if (adapted != null) {
          // Append the old one along with the adapted one
          return adapted + ' ' + clazz;
        }

        return clazz;
      };
    }

    var dropdownCss = this.options.get('dropdownCss') || {};

    if ($.isFunction(dropdownCss)) {
      dropdownCss = dropdownCss(this.$element);
    }

    CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);

    $dropdown.css(dropdownCss);
    $dropdown.addClass(dropdownCssClass);

    return $dropdown;
  };

  return DropdownCSS;
});

S2.define('select2/compat/initSelection',[
  'jquery'
], function ($) {
  function InitSelection (decorated, $element, options) {
    if (options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `initSelection` option has been deprecated in favor' +
        ' of a custom data adapter that overrides the `current` method. ' +
        'This method is now called multiple times instead of a single ' +
        'time when the instance is initialized. Support will be removed ' +
        'for the `initSelection` option in future versions of Select2'
      );
    }

    this.initSelection = options.get('initSelection');
    this._isInitialized = false;

    decorated.call(this, $element, options);
  }

  InitSelection.prototype.current = function (decorated, callback) {
    var self = this;

    if (this._isInitialized) {
      decorated.call(this, callback);

      return;
    }

    this.initSelection.call(null, this.$element, function (data) {
      self._isInitialized = true;

      if (!$.isArray(data)) {
        data = [data];
      }

      callback(data);
    });
  };

  return InitSelection;
});

S2.define('select2/compat/inputData',[
  'jquery'
], function ($) {
  function InputData (decorated, $element, options) {
    this._currentData = [];
    this._valueSeparator = options.get('valueSeparator') || ',';

    if ($element.prop('type') === 'hidden') {
      if (options.get('debug') && console && console.warn) {
        console.warn(
          'Select2: Using a hidden input with Select2 is no longer ' +
          'supported and may stop working in the future. It is recommended ' +
          'to use a `<select>` element instead.'
        );
      }
    }

    decorated.call(this, $element, options);
  }

  InputData.prototype.current = function (_, callback) {
    function getSelected (data, selectedIds) {
      var selected = [];

      if (data.selected || $.inArray(data.id, selectedIds) !== -1) {
        data.selected = true;
        selected.push(data);
      } else {
        data.selected = false;
      }

      if (data.children) {
        selected.push.apply(selected, getSelected(data.children, selectedIds));
      }

      return selected;
    }

    var selected = [];

    for (var d = 0; d < this._currentData.length; d++) {
      var data = this._currentData[d];

      selected.push.apply(
        selected,
        getSelected(
          data,
          this.$element.val().split(
            this._valueSeparator
          )
        )
      );
    }

    callback(selected);
  };

  InputData.prototype.select = function (_, data) {
    if (!this.options.get('multiple')) {
      this.current(function (allData) {
        $.map(allData, function (data) {
          data.selected = false;
        });
      });

      this.$element.val(data.id);
      this.$element.trigger('change');
    } else {
      var value = this.$element.val();
      value += this._valueSeparator + data.id;

      this.$element.val(value);
      this.$element.trigger('change');
    }
  };

  InputData.prototype.unselect = function (_, data) {
    var self = this;

    data.selected = false;

    this.current(function (allData) {
      var values = [];

      for (var d = 0; d < allData.length; d++) {
        var item = allData[d];

        if (data.id == item.id) {
          continue;
        }

        values.push(item.id);
      }

      self.$element.val(values.join(self._valueSeparator));
      self.$element.trigger('change');
    });
  };

  InputData.prototype.query = function (_, params, callback) {
    var results = [];

    for (var d = 0; d < this._currentData.length; d++) {
      var data = this._currentData[d];

      var matches = this.matches(params, data);

      if (matches !== null) {
        results.push(matches);
      }
    }

    callback({
      results: results
    });
  };

  InputData.prototype.addOptions = function (_, $options) {
    var options = $.map($options, function ($option) {
      return $.data($option[0], 'data');
    });

    this._currentData.push.apply(this._currentData, options);
  };

  return InputData;
});

S2.define('select2/compat/matcher',[
  'jquery'
], function ($) {
  function oldMatcher (matcher) {
    function wrappedMatcher (params, data) {
      var match = $.extend(true, {}, data);

      if (params.term == null || $.trim(params.term) === '') {
        return match;
      }

      if (data.children) {
        for (var c = data.children.length - 1; c >= 0; c--) {
          var child = data.children[c];

          // Check if the child object matches
          // The old matcher returned a boolean true or false
          var doesMatch = matcher(params.term, child.text, child);

          // If the child didn't match, pop it off
          if (!doesMatch) {
            match.children.splice(c, 1);
          }
        }

        if (match.children.length > 0) {
          return match;
        }
      }

      if (matcher(params.term, data.text, data)) {
        return match;
      }

      return null;
    }

    return wrappedMatcher;
  }

  return oldMatcher;
});

S2.define('select2/compat/query',[

], function () {
  function Query (decorated, $element, options) {
    if (options.get('debug') && window.console && console.warn) {
      console.warn(
        'Select2: The `query` option has been deprecated in favor of a ' +
        'custom data adapter that overrides the `query` method. Support ' +
        'will be removed for the `query` option in future versions of ' +
        'Select2.'
      );
    }

    decorated.call(this, $element, options);
  }

  Query.prototype.query = function (_, params, callback) {
    params.callback = callback;

    var query = this.options.get('query');

    query.call(null, params);
  };

  return Query;
});

S2.define('select2/dropdown/attachContainer',[

], function () {
  function AttachContainer (decorated, $element, options) {
    decorated.call(this, $element, options);
  }

  AttachContainer.prototype.position =
    function (decorated, $dropdown, $container) {
    var $dropdownContainer = $container.find('.dropdown-wrapper');
    $dropdownContainer.append($dropdown);

    $dropdown.addClass('select2-dropdown--below');
    $container.addClass('select2-container--below');
  };

  return AttachContainer;
});

S2.define('select2/dropdown/stopPropagation',[

], function () {
  function StopPropagation () { }

  StopPropagation.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    var stoppedEvents = [
    'blur',
    'change',
    'click',
    'dblclick',
    'focus',
    'focusin',
    'focusout',
    'input',
    'keydown',
    'keyup',
    'keypress',
    'mousedown',
    'mouseenter',
    'mouseleave',
    'mousemove',
    'mouseover',
    'mouseup',
    'search',
    'touchend',
    'touchstart'
    ];

    this.$dropdown.on(stoppedEvents.join(' '), function (evt) {
      evt.stopPropagation();
    });
  };

  return StopPropagation;
});

S2.define('select2/selection/stopPropagation',[

], function () {
  function StopPropagation () { }

  StopPropagation.prototype.bind = function (decorated, container, $container) {
    decorated.call(this, container, $container);

    var stoppedEvents = [
      'blur',
      'change',
      'click',
      'dblclick',
      'focus',
      'focusin',
      'focusout',
      'input',
      'keydown',
      'keyup',
      'keypress',
      'mousedown',
      'mouseenter',
      'mouseleave',
      'mousemove',
      'mouseover',
      'mouseup',
      'search',
      'touchend',
      'touchstart'
    ];

    this.$selection.on(stoppedEvents.join(' '), function (evt) {
      evt.stopPropagation();
    });
  };

  return StopPropagation;
});

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof S2.define === 'function' && S2.define.amd ) {
        // AMD. Register as an anonymous module.
        S2.define('jquery-mousewheel',['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));

S2.define('jquery.select2',[
  'jquery',
  'jquery-mousewheel',

  './select2/core',
  './select2/defaults'
], function ($, _, Select2, Defaults) {
  if ($.fn.selectWoo == null) {
    // All methods that should return the element
    var thisMethods = ['open', 'close', 'destroy'];

    $.fn.selectWoo = function (options) {
      options = options || {};

      if (typeof options === 'object') {
        this.each(function () {
          var instanceOptions = $.extend(true, {}, options);

          var instance = new Select2($(this), instanceOptions);
        });

        return this;
      } else if (typeof options === 'string') {
        var ret;
        var args = Array.prototype.slice.call(arguments, 1);

        this.each(function () {
          var instance = $(this).data('select2');

          if (instance == null && window.console && console.error) {
            console.error(
              'The select2(\'' + options + '\') method was called on an ' +
              'element that is not using Select2.'
            );
          }

          ret = instance[options].apply(instance, args);
        });

        // Check if we should be returning `this`
        if ($.inArray(options, thisMethods) > -1) {
          return this;
        }

        return ret;
      } else {
        throw new Error('Invalid arguments for Select2: ' + options);
      }
    };
  }

  if ($.fn.select2 != null && $.fn.select2.defaults != null) {
    $.fn.selectWoo.defaults = $.fn.select2.defaults;
  }

  if ($.fn.selectWoo.defaults == null) {
    $.fn.selectWoo.defaults = Defaults;
  }

  // Also register selectWoo under select2 if select2 is not already present.
  $.fn.select2 = $.fn.select2 || $.fn.selectWoo;

  return Select2;
});

  // Return the AMD loader configuration so it can be used outside of this file
  return {
    define: S2.define,
    require: S2.require
  };
}());

  // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe
  var select2 = S2.require('jquery.select2');

  // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.
  jQuery.fn.select2.amd = S2;
  jQuery.fn.selectWoo.amd = S2;

  // Return the Select2 instance for anyone who is importing it.
  return select2;
}));
;
/*jshint browser:true */
/*!
* FitVids 1.1
*
* Copyright 2013, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com
* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/
* Released under the WTFPL license - http://sam.zoy.org/wtfpl/
*
*/

;(function( $ ){

  'use strict';

  $.fn.fitVids = function( options ) {
    var settings = {
      customSelector: null,
      ignore: null
    };

    if(!document.getElementById('fit-vids-style')) {
      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js
      var head = document.head || document.getElementsByTagName('head')[0];
      var css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';
      var div = document.createElement("div");
      div.innerHTML = '<p>x</p><style id="fit-vids-style">' + css + '</style>';
      head.appendChild(div.childNodes[1]);
    }

    if ( options ) {
      $.extend( settings, options );
    }

    return this.each(function(){
      var selectors = [
        'iframe[src*="player.vimeo.com"]',
        'iframe[src*="youtube.com"]',
        'iframe[src*="youtube-nocookie.com"]',
        'iframe[src*="kickstarter.com"][src*="video.html"]',
        'object',
        'embed'
      ];

      if (settings.customSelector) {
        selectors.push(settings.customSelector);
      }

      var ignoreList = '.fitvidsignore';

      if(settings.ignore) {
        ignoreList = ignoreList + ', ' + settings.ignore;
      }

      var $allVideos = $(this).find(selectors.join(','));
      $allVideos = $allVideos.not('object object'); // SwfObj conflict patch
      $allVideos = $allVideos.not(ignoreList); // Disable FitVids on this video.

      $allVideos.each(function(){
        var $this = $(this);
        if($this.parents(ignoreList).length > 0) {
          return; // Disable FitVids on this video.
        }
        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }
        if ((!$this.css('height') && !$this.css('width')) && (isNaN($this.attr('height')) || isNaN($this.attr('width'))))
        {
          $this.attr('height', 9);
          $this.attr('width', 16);
        }
        var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') && !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),
            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),
            aspectRatio = height / width;
        if(!$this.attr('name')){
          var videoName = 'fitvid' + $.fn.fitVids._count;
          $this.attr('name', videoName);
          $.fn.fitVids._count++;
        }
        $this.wrap('<div class="fluid-width-video-wrapper"></div>').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+'%');
        $this.removeAttr('height').removeAttr('width');
      });
    });
  };

  // Internal counter for unique video names.
  $.fn.fitVids._count = 0;

// Works with either jQuery or Zepto
})( window.jQuery || window.Zepto );
;
/* global CG */
(function ($) {
  $(document).ready(function () {
    // show redirect bar if user have no cookie
    function showRedirectBar () {
      geo_redirect_to = getCookie('geo_redirect_to')
      if (geo_redirect_to) {
        return
      }
      $('.redirect_bar').slideDown()
    }
    showRedirectBar()

    // redirect bar buttons
    $('.redirect_bar__button--default').on('click', function (e) {
      e.preventDefault()
      setCookie('geo_redirect_to', window.location.href, 3650)
      $('.redirect_bar').slideUp()
    })

    $('.redirect_bar__button--change').on('click', function (e) {
      e.preventDefault()
      lastFocus = $(this)
      $('body').addClass('nooverflow')
      $('.header__window--locations').fadeIn().attr('tabindex', -1).focus()
      $('.redirect_bar').hide()
    })

    $('.redirect_bar__close').on('click', function (e) {
      e.preventDefault()
      $('.redirect_bar').slideUp()
    })

    // --- Main header navigation ---

    var lastFocus,
      submenuButton = $('<button />', { 'class': 'submenu-open-link' }),
      submenuIcon = $('<svg xmlns="http://www.w3.org/2000/svg" width="10" height="15" viewBox="0 0 10 15"><title>Read more</title><path fill="none" fill-rule="evenodd" stroke="#0070ad" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1.455 1l7 6.5-7 6.5"/></svg>') // $( '<i />', { 'class': 'icon-ios-arrow-right' } )

    // add arrows for items with submenu
    $('.menu-all-pages-container .menu-item-has-children > a').after(submenuButton.append(submenuIcon))

    // add two columns class when submenu has at least 8 items
    setTimeout(function () {
      twoColumnsSubmenu()
    }, 300)

    // Close all header windows on hitting ESC

    $(document).keydown(function (e) {
      if ($('.header__window').is(':visible') && e.keyCode === 27) {
        $('.header__window').fadeOut()
        $('body').removeClass('nooverflow')
        $('.header__locations').removeClass('active-color active-arrow')
        if (lastFocus.length) {
          lastFocus.focus()
        }
      }
    })

    // change arrow-icon on close-icon

    $('.header__locations').on('click', function (e) {
      e.preventDefault()
      $(this).toggleClass('opened-locations')
      $(this).toggleClass('active-arrow')
      $(this).toggleClass('active-color')
      $('.header__window--locations').slideToggle(function () {
        if (!$(this).hasClass('opened-locations')) {
        }
      })
      if (window.hj) {
        hj('trigger', 'global_languages');
      }
    })

    function twoColumnsSubmenu () {
      $('.menu-all-pages-container .menu > .menu-item > .sub-menu').each(function () {
        if ($(this).children('.menu-item').length > 10) {
          $(this).css('width', '')
          var width = $(this).width()
          $(this).addClass('sub-menu-2col').width(width * 2)
        }
      })
    }


    // show locations menu on "Locations" footer link click

    $('.footer__nav--locations').on('click', function (e) {
      e.preventDefault()
      lastFocus = $(this)
      $('body').addClass('nooverflow')
      $('.header__locations').addClass('active-color active-arrow')
      $('.header__window--locations').fadeIn().attr('tabindex', -1).focus()
    })

    $('.header__locations-button').on('click', function (e) {
      e.preventDefault()
      $(this).toggleClass('open-location')
      if ($(this).hasClass('open-location')) {
        $(this).find('.icons__button--locations').removeClass('icon-ios-arrow-left').addClass('icon-android-close')
      } else {
        $(this).find('.icons__button--locations').removeClass('icon-android-close').addClass(' icon-ios-arrow-left')
      }
    })


    // Show/hide the hot topics list.
    $('.header__window--search #mainsearch').on('keyup', function () {
      if ($(this).val()) {
        $('.mainsearch__placeholding').hide()
        $('.mainsearch__results').show()
        searchListingHeight()
      } else {
        $('.mainsearch__placeholding').show()
        $('.mainsearch__results').hide()
      }
    })

    $('.button-search').on('click', function() {
      var uri = window.location.href.toString();
      if (uri.indexOf('?') > 0) {
        var clean_uri = uri.substring(0, uri.indexOf('page'));
        window.history.replaceState({}, document.title, clean_uri);
      }
    })

    // Focus on search on load
    if($('section').hasClass('search_results') ){
      $("input:text:visible:first").focus();
    }



    // Serach results - show / hide filters (mobile)
    $('.mainsearch__show-checkboxes > a').on('click', function (event) {
      event.preventDefault()
      $('.mainsearch__checkboxes').slideDown()
      $('.mainsearch__show-checkboxes').toggle()
      $('.mainsearch__hide-checkboxes').toggle()
    })
    $('.mainsearch__hide-checkboxes > a').on('click', function (event) {
      event.preventDefault()
      $('.mainsearch__checkboxes').slideUp()
      $('.mainsearch__show-checkboxes').toggle()
      $('.mainsearch__hide-checkboxes').toggle()
    })

    // Menu - desktop menu
    var isMobileMenu = false

    function openSubmenu2nd (submenu) {
      var parentMenuHeight = submenu.parents('.sub-menu').last().outerHeight(),
        height = Math.max(submenu.outerHeight(), parentMenuHeight)

      submenu.parents('.sub-menu').last().outerHeight(height)
      submenu.outerHeight(height).animate({ width: 'show'}, 400)
    }

    function closeSubmenu2nd (submenu) {
      submenu.stop(true, true).animate({ width: 'hide' }, 0, function () {
        submenu.parents('.sub-menu').last().css('height', '')
      })
    }


    // third submenu open on left side
    function widthSubmenu3rd (parent, submenu){

      var parentOffset = parent.offset().left,
        dropdownWidth = submenu.width(),
        windowWidth = $(window).width(),
        subsubmenuWidth = $(submenu).find('.menu-item-has-children .sub-menu').width()
        maxSubsubmenuWidth = 0;

        $(submenu).find('.menu-item-has-children .sub-menu').each(function(){
           $element = $(this);
           if($element.width() > maxSubsubmenuWidth){
             maxSubsubmenuWidth = $element.width();
           }
        });

        if (parentOffset + dropdownWidth + maxSubsubmenuWidth > windowWidth) {
          $(submenu).find('.menu-item-has-children .sub-menu').addClass('subsub-menu--right')
        }

      submenu.stop(true, true).slideDown(250)
    }


    // determine if dropdown should be aligned right
    function alignSubmenu (parent, submenu) {
      var parentOffset = parent.offset().left,
        dropdownWidth = submenu.width(),
        windowWidth = $(window).width()

      if (parentOffset + dropdownWidth + 24 > windowWidth) {
        // center if dropdown is exceeding left side of screen
        if (parentOffset - dropdownWidth < 0) {
          var centered = windowWidth / 2 - parentOffset
          submenu.css('left', centered).addClass('sub-menu--centered')
        } else {
          // align to parent's right edge if dropdown is exceeding right side of screen
          $(submenu).css('left', '').removeClass('sub-menu--centered').addClass('sub-menu--right')
          $(submenu).find('.menu-item-has-children .sub-menu').addClass('subsub-menu--right')
        }
      } else {
        // default - align to parent's left edge
        $(submenu).css('left', '').removeClass('sub-menu--centered').removeClass('sub-menu--right')
        $(submenu).find('.menu-item-has-children .sub-menu').removeClass('subsub-menu--right')
      }
      submenu.stop(true, true).slideDown(250)
    }

    // take care of submenus levels separately to avoid conflicts: first level submenus
    $('.header__nav .menu > .menu-item-has-children').hover(function () {
      if (!isMobileMenu && !$(this).hasClass('hovered')) {
        $(this).addClass('hovered')

        var submenu = $(this).find('> .sub-menu').first()
        alignSubmenu($(this), submenu)
        widthSubmenu3rd($(this), submenu)

        // HotJar triggers inside the top navigation
        if (window.hj) {
          if (typeof hj === 'function') {
            $('.hotjar_top_nav_industries').mouseover(function () {
              hj('trigger', 'top_nav_industries')
            })
            $('.hotjar_top_nav_services').mouseover(function () {
              hj('trigger', 'top_nav_services')
            })
            $('.hotjar_top_nav_partners').mouseover(function () {
              hj('trigger', 'top_nav_partners')
            })
            $('.hotjar_top_nav_about').mouseover(function () {
              hj('trigger', 'top_nav_about')
            })
            $('.hotjar_top_nav_careers').mouseover(function () {
              hj('trigger', 'top_nav_careers')
            })
            $('.hotjar_top_nav_services_bo').mouseover(function () {
              hj('trigger', 'top_nav_services_bo')
            })
          }
        }
      }
    }, function () {
      if (!isMobileMenu) {
        var parent = $(this),
          submenu = $(this).find('> .sub-menu').first()

        setTimeout(function () {
          parent.removeClass('hovered')
        }, 100)

        submenu.finish().slideUp(130, function () {
          submenu.css('height', '')
        })
      }
    })


    // second level submenus

    $('.header__nav .sub-menu .menu-item-has-children').hover(function () {
      if (!isMobileMenu) {
        openSubmenu2nd($(this).find('> .sub-menu').first())
      }
    }, function () {
      if (!isMobileMenu) {
        closeSubmenu2nd($(this).find('> .sub-menu').first())
      }
    })

    // Menu - mobile menu

    var menuItemHeadersDone = false

    function createMenuItemHeaders () {
      var menuItemHeader
      $('.sub-menu').each(function () {
        menuItemHeader = $(this).parent().find('> a').text()
        var $gobackSpan = $('<span />', { 'class': 'sr-only' }).text('Go back'),
          $buttonIcon = $('<svg xmlns="http://www.w3.org/2000/svg" width="10" height="15" viewBox="0 0 10 15"><path fill="none" fill-rule="evenodd" stroke="#0070ad" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 1l-6.5 6.5 6.5 6.5"/></svg>'),
          $button = $('<button />').text(menuItemHeader),
          $li = $('<li />', { 'class': 'menu-item-header hidden-lg-up' })
        $(this).prepend($li.prepend($button.prepend($gobackSpan)).prepend($button.prepend($buttonIcon)))
      })
      menuItemHeadersDone = true

      $('.menu-item-header button').click(function () {
        var myParent = $(this).parents('.sub-menu').first(),
          pos = parseInt($('.header__nav .menu').css('left'), 10) - $(this).parents().eq(3).offset().left
        $('.header__nav .menu').stop(true, true).animate({ left: pos }, 300, function () { myParent.hide() })
      })
    }

    if ($(window).width() < 991) {
      isMobileMenu = true
      createMenuItemHeaders()
    }

    $('.header__nav__mobile').click(function (e) {
      e.preventDefault()
      $(this).toggleClass('opened')
      $('.header__nav .menu-all-pages-container').slideToggle(function () {
        if (!$(this).hasClass('opened')) {
          $('.header__nav .menu').attr('style', '')
        }
      })
      $(this).find('i').toggleClass('icon-android-menu icon-android-close')
    })

    $('.header__nav .menu-item .submenu-open-link').click(function (e) {
      var mySubmenu = $(this).next('.sub-menu')
      if (mySubmenu.length > 0) {
        if ($(window).width() < 991) {
          e.preventDefault()
          mySubmenu.show()
          var menuOffset = parseInt($('.header__nav .menu').css('left'), 10) || 0,
            pos = mySubmenu.offset().left - menuOffset
          $('.header__nav .menu').stop(true, true).animate({ left: -pos }, 300)
        }
      }
    })

    // Menu - focus
    $('.header__nav .menu-item a').focus(function () {
      if (!isMobileMenu) {
        var focused = $(this).first().parent().find('> .sub-menu'),
          focusedParents = $(this).first().parents('.sub-menu')

        // 1st level menus
        if (!focusedParents.length) {
          $('.header__nav .sub-menu').each(function () {
            if (!$(this).is(focused)) {
              $(this).slideUp()
            }
          })
          focused.slideDown(400)
        } else {
          // 2nd level menus
          $('.header__nav .sub-menu .sub-menu').each(function () {
            if (!$(this).is(focused) && focusedParents.length === 1) {
              closeSubmenu2nd($(this))
            }
          })
          openSubmenu2nd(focused)
        }
      }
    })

    // close all submenus when focus is on external element
    $('.header__locations').focus(function () {
      if (!isMobileMenu) {
        $('.header__nav .sub-menu').slideUp()
      }
    })


    // Resizing header

    function resizeHeader () {

      if ($(window).width() < 991) {
        isMobileMenu = true
        // create headers for mobile nav
        if (!menuItemHeadersDone) {
          createMenuItemHeaders()
        }
        // reset dropdowns position
        $('.header__nav .menu > .menu-item-has-children > .sub-menu').css({ left: '', right: '' })
      }

      if ($(window).width() >= 991) {
        isMobileMenu = false
        twoColumnsSubmenu()

        // reset mobile menu
        $('.header__nav .menu-item').removeClass('active')
        $('.header__nav__mobile i').removeClass('icon-android-close').addClass('icon-android-menu')
      }
    }

    $(window).resize(lodash.debounce(resizeHeader, 100))

    // --- Main header navigation - end ---

    // Cards

    $('.card__media-overlapping__title a').hover(function () {
      $(this).parents('.card__media-overlapping').find('.card__media-overlapping__media').addClass('hover')
    }, function () {
      $(this).parents('.card__media-overlapping').find('.card__media-overlapping__media').removeClass('hover')
    })

    $('.card__media__title a').hover(function () {
      $(this).parents('.card__media').find('.card__media__media').addClass('hover')
    }, function () {
      $(this).parents('.card__media').find('.card__media__media').removeClass('hover')
    })

    $('.card__media-overlapping__media').hover(function () {
      $(this).parents('.card__media-overlapping').find('.card__media-overlapping__title').addClass('hover')
    }, function () {
      $(this).parents('.card__media-overlapping').find('.card__media-overlapping__title').removeClass('hover')
    })

    $('.card__media__media').hover(function () {
      $(this).parents('.card__media').find('.card__media__title').addClass('hover')
    }, function () {
      $(this).parents('.card__media').find('.card__media__title').removeClass('hover')
    })

    // Scroll links

    $('.smooth-scroll-link').on('click', function () {
      var pos = $($(this).attr('href')).offset().top
      $('html, body').stop(true, true).animate({ scrollTop: pos }, 400)
    })

    // Videos in article text section

    $('.article-text, .article-text').fitVids()

    // Cookies

    showCookieInfo()
    showFooterBanner()
  })

  function setCookie (cname, cvalue, exdays) {
    var d = new Date()
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000)
    var expires = null
    if (exdays !== 'session') {
      expires = 'expires=' + d.toUTCString()
    }
    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/'
  }

  function getCookie (cname) {
    var name = cname + '=',
      ca = document.cookie.split(';')
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i]
      while (c.charAt(0) === ' ') {
        c = c.substring(1)
      }
      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length)
      }
    }
    return ''
  }

  function getCookieByMatch (regex) {
    var cs = document.cookie.split(/;\s*/), ret = [], i
    for (i = 0; i < cs.length; i++) {
      if (cs[i].match(regex)) {
        ret.push(cs[i])
      }
    }
    return ret
  };

  function showCookieInfo () {
    var info = getCookie('cookie_info')
    if (info !== 'true') {
      $('.section__cookies').css('display', 'flex')

      $('.section__button--cookies').on('click', function () {
        $('.section__cookies').hide()
        setCookie('cookie_info', true, 3650)
        showFooterBanner()
      })
    }
  }

  function showFooterBanner () {
    var cookieInfo = getCookie('cookie_info'),
      bannerInfo = sessionStorage.getItem('banner_info')
    if (bannerInfo !== 'true' && cookieInfo === 'true') {
      $('.footer__banner').css('display', 'flex')
    }

    $('.footer__banner-link, .footer__banner-close').on('click', function () {
      $('.footer__banner').hide()
      sessionStorage.setItem('banner_info', 'true')
    })
  }

  function hideCookies () {
    if (getCookie('cookie_info') === 'true') {
      $('.section__cookies').css('display', 'none')
    }
  }

  hideCookies()

  function generateRandomBlock () {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)
  };

  function generateGaUuid () {
    return generateRandomBlock() + generateRandomBlock() + '-' + generateRandomBlock() + '-' + generateRandomBlock() + '-' + generateRandomBlock() + '-' + generateRandomBlock() + generateRandomBlock() + generateRandomBlock()
  }

  // Height tags on card_default

  var height = 0

  $('.row--horizontal').each(function () {
    $(this).find('.card_default__tags').each(function () {
      if ($(this).height() > height) {
        height = $(this).height()
      }
    })

    $(this).find('.card_default__tags').height(height)

    height = 0
  })

  // hover on title and excerpt on hero full
  $('.hero_full__title .inner, .hero_full__link_bg, .hero_full__text span').mouseover(function () {
    $('.hero_full__title a, .hero_full__link_bg a, .hero_full__text a').addClass('hover')
  })
  $('.hero_full__title .inner, .hero_full__link_bg, .hero_full__text span').mouseout( function () {
    $('.hero_full__title a, .hero_full__link_bg a, .hero_full__text a').removeClass('hover')
  });

  // add GTM page_type when page is Invent
  if (typeof dataLayer !== 'undefined') {

    if (typeof CG_GTM_INFO !== 'undefined' && CG_GTM_INFO.tags) {
      dataLayer.push({ 'blogtag': CG_GTM_INFO.tags })
    }
  }

  // disable WordPress image and gallery link
  $( ".gallery-icon" ).click(function( event ) {
    event.preventDefault();
  });

})(jQuery)
;
(function ( $ ) {
	var Forms = {

		init: function ( $form, isNinja ) {

			// Empty class

			$( 'input, textarea, select', $form ).each( function () {
				if ( ! $( this ).val() ) {
					$( this ).addClass( 'empty' )
				}

				// Aria described by
				$( this ).attr( 'aria-describedby', 'nf-error-' + $( this ).parents( '.form__block' ).find( '.field-wrap' ).data( 'field-id' ) )
			} )

			// Focus out

			$( 'input, textarea', $form ).focusout( function () {
				$( this ).toggleClass( 'empty', ! $( this ).val() )
			} )

			$( 'select', $form ).attr( 'aria-hidden', false )
			$( '.select2', $form ).attr( 'aria-hidden', true )

			$( 'select', $form ).on( 'select2:open', function ( e ) {
				var $field     = $( this ).parents( '.form__block' ),
				    iconSearch = $( '<i />', { "class": "icon-ios-search-strong", "aria-hidden": "true" } )
				$( '.select2-search__field', $field ).attr( 'placeholder', 'Search' )
				$( '.select2-search--dropdown', $field ).append( iconSearch )

			} )

			if ($( 'body' ).hasClass( 'custom-archive-client-story' ) ) {
				// if select is empty, add recent asc label
				if( !$('select', $form).val() ) {
					$('select', $form ).val('recent').trigger('change.select2')
				}
			}

			// Select
			function select2Setup() {
				var $select  = $( this ),
				    $select2 = $select.next( '.select2' ),
				    $clear   = $select2.find( '.select-clear' )

				if ( $( this ).val() ) {

					if ( ! $clear.length && $select2.find( '.select2-selection--multiple' ).length === 0 ) {
						var iconClose = $( '<i />', { "class": "select-clear icon-android-close", "aria-hidden": "true" } )
						$select2.prepend( iconClose )
					}

					$( this ).removeClass( 'empty' )
				} else {
					$( this ).addClass( 'empty' )
					$clear.remove()
				}
			}

			$( 'select', $form ).each( select2Setup ).change( select2Setup )

			// Clear
			$form.on( 'click', '.select-clear', function( e ) {
				e.preventDefault()
				var $select = $( this ).parents( '.form__block' ).find( 'select' )
				$select.val( $select.find( 'option:first' ).attr( 'value' ) ).change()
				$select.select2( 'close' )
				$( this ).remove()
			} )

			// Textarea

			$( 'textarea', $form ).keyup( function () {
				if ( ! isNinja ) {
					$( this ).parent().find( '.form__chars-number span' ).text( $( this ).val().length )
				}

				$( this ).height( 'auto' )
				var textareaH,
				    maxScrollHeight = 350,
				    offset          = 15
				if ( $( this ).prop( 'scrollHeight' ) <= maxScrollHeight ) {
					textareaH = $( this ).prop( 'scrollHeight' ) - offset
				} else {
					textareaH = maxScrollHeight
				}
				$( this ).height( textareaH )
			} )
		},
		nfInit: function( $form ) {
			var channel = 'form-' + $form.data( 'form-id' )

			$form.find( '.form__sent' ).hide()

			// Listen to form submit, hide fields and show progress bar.

			nfRadio.channel( channel ).on( 'submit:response', function ( response ) {
				var interval  = 1000,
				    $progress = $form.find( '.form__progress' ),
				    $filled   = $form.find( '.form__progress__filled' ),
				    $success  = $form.find( '.form__sent' ),
				    $response = $form.find( '.nf-response-msg' )

				// Check if it was an unsuccessful submit, this a patch for recaptcha.
				if ( response.errors && response.errors.fields && Object.keys( response.errors.fields ).length ) {
					$.each( response.errors.fields, function ( i, field ) {
						$( '<div/>', { "class": "form__error-info" } )
							.text( field[ 0 ] )
							.appendTo( $form.find( '.nf-form-errors' ) )
					} )
					return;
				}

				$response.hide()
				$progress.show()
				$filled.animate(
					{ width: '100%' },
					{
						duration: 900,
						step:     function ( now, fx ) {
							var data = parseInt( now, 10 )
							$filled.attr( 'aria-valuenow', data )
						},
					}
				)
				setInterval( function () {
					$progress.hide()
					$success.attr( 'aria-hidden', 'false' ).show().css( 'display', 'inline-block' )
					$response.show()
				}, interval )
			} )

			this.init( $form, true )
		}
	}

	$( document ).on( 'nfFormReady', function ( e, form ) {
		// Setup custom form behaviour.
		Forms.nfInit( form.$el.find( '.form' ) )
	} )

	$( document ).ready( function() {
		$( '.form' ).each( function() {
			// fire this only when form gets action attr appended, prevent actions on not ready forms
			if ( $( this ).attr( 'action' ) ) {
				Forms.init( $( this ) )
			}
		} )
	} )

	// Select2 resize behaviour.

	function resizeForms (){
		$( '.form select' ).each( function () {
			var newWidth = $(this).width();
			if(newWidth === lastWindowWidth) {
				return;
			}
			lastWindowWidth = newWidth;

			var $form = $( this ).parents( '.form' )

			$( this ).select2( 'destroy' )
			$( this ).width( $( this ).parent().width() )
			$( this ).select2( { dropdownParent: $form } )

			$( 'select', $form ).attr( 'aria-hidden', false )
			$( '.select2', $form ).attr( 'aria-hidden', true )

			if ( $( this ).val() ) {
				if ( $( this ).next( '.select2' ).find( '.select2-selection--multiple' ).length === 0 && $( this ).next( '.select2' ).find( '.select-clear' ).length <= 0 ) {
					var iconClose = $( '<i />', { "class": "select-clear icon-android-close", "aria-hidden": "true" } )
					$( this ).next( '.select2' ).prepend( iconClose )
				}
			}
		} )
		$( '.popup__overlay' ).find( 'select' ).each( function () {
			$( this ).select2()
		} )
	}
	var lastWindowWidth = $(window).width();
	$( window ).resize( lodash.debounce( resizeForms, 100 ) )
})( jQuery )
;
( function ( $ ){

  var moveInputs = function (){
    if ( $( window ).width() <= 767 ){
      $( '.single-input__checkboxes' ).each( function (){
        $( this ).insertAfter( $( this ).parents( '.single-input__inner' ) )
      } )
    } else {
      $( '.single-input__checkboxes' ).each( function (){
        $( this ).insertAfter( $( this ).parent().find( '.single-input__inner .single-input__input' ) )
      } )
    }
  }

  $( '.single-input' ).on( 'click', function (){
    $( this ).addClass( 'focus' )
  } )
  $( '.single-input' ).focusin( function (){
    $( this ).addClass( 'focus' )
  } )
  $( '.single-input' ).focusout( function (){
    var _this = $( this );
    if ( _this.find( 'input' ).val() === ''){
      setTimeout(function () {
        if ( ! _this.find(':focus').length ) {
          _this.removeClass( 'focus' )
        }
      }, 100 );
    }
  } )

  $( '.single-input .form__filters select' ).on( 'change', function() {

    if ($("form").hasClass("single-input__job")) {
      return
    }

    $( this ).parents( 'form' ).submit()
  } );

  $( document ).mouseup( function ( e ){
    if ( ! $( '.single-input' ).is( e.target ) && ! $( '.single-input' ).has( e.target ).length && !
    $( '.form__filters .select2' ).hasClass( 'select2-container--focus' ) ){
      $( 'body' ).find( '.single-input' ).each( function(){
        if ( $( this ).find( 'input' ).val() === ''){
          $( this ).removeClass( 'focus' )
        }
      })
    }
  } )

  $( document ).ready( function (){
    $( '.single-input__filter-submit' ).hide()
    moveInputs()

    if ( location.href.indexOf( '?search_term' ) != -1 ) {
      $( 'html,body' ).animate({ scrollTop: $( '.single-input__job.form' ).offset().top },'slow' );
    }
  } )

  $( window ).resize( lodash.debounce( moveInputs, 100 ) )

	$('select').each(function () {
    $(this).select2({
      placeholder: 'Please select',
      minimumResultsForSearch: -1,
      dropdownParent: $(this).parent()
    })
  })

  // --- Filters ---
  function filters (mySelect) {
    if (mySelect.parent().find('.select2-selection__choice').length > 1) {
      var choiceNumber = mySelect.parent().find('.select2-selection__choice').length - 1
      mySelect.parent().find('.select2-selection__rendered .select2-search').before('<li class="select2-selection__number">+ '.concat(choiceNumber, '</li>'))
    }

    var filterBox = mySelect.parents('.filters')

    filterBox.find('.filters-tags').empty()

    filterBox.find('.select2-selection__choice').each(function () {
      var tagName = $(this).attr('title')
      var tagValue = $(this).parents('.select2').prev().find('option').filter(function () { return $(this).html().replace('&amp;', '&') == tagName }).val()

			//create new element
			var divBox = $('<div>', {
				class:'filters-tag',
				text: tagName,
				attr: { 'data-title': tagValue }
			}
			).appendTo('.filters-tags');

			//create one more element
			var buttonRemove = $('<button>', {
				class:'icon-android-close'
			}
			).appendTo(divBox);

    })

    // Remove filter tag
    $('.icon-android-close').click(function () {
      var filterTag = $(this).parents('.filters-tag')
      filterBox.find('select option[value="' + filterTag.attr('data-title') + '"]').prop('selected', false).trigger('change')
      filterTag.remove()
    })
  }

  $('.filters select').each(function (e) {
    filters($(this))
  })

  $('.filters select').on('change', function (e) {
    if(! $(this).parents('.filters').hasClass('filters-search')){
      var selection = ''

      var i = 0

      var filterName

      var optionValue
      $('.filters select').each(function () {
        filterName = $(this).parent().attr('data-filter'),
        optionValue = $(this).val().forEach(function (item) {
          if (i > 0) {
            selection += '&'
          }
          selection += filterName + '=' + item
          i++
        })
        i++
      })

    } else {
      if ($('.filters-top input[name="'.concat($(this).attr('data-name'), '"]')).length > 0) {
        $('.filters-top input[name="'.concat($(this).attr('data-name'), '"]')).val($(this).val())
        $('.single-input--job-search .filters-search-submit').click()
        $('.select2-search--inline').removeClass('notempty')
      } else {
        $('.filters-search-submit').after('<input type="hidden" name="'.concat($(this).attr('data-name'), '" value="', $(this).val(), '">'))
        $('.single-input--job-search .filters-search-submit').click()
        $('.select2-search--inline').addClass('notempty')
      }
    }

    filters($(this))
  })


} )( jQuery );
;
( function ( $ ) {

	var SocialButtons = {
		init: function () {
			this.followScroll( $( window ).scrollTop() )
		},
		recalculate: function () {
			this.buttons = $( '.social-buttons:not(.inactive)' )
			this.followElement = this.buttons.parents( this.buttons.data( 'stick-to' ) )
			var OFFSET = 40
			if ( this.followElement.length ){
				this.fixStart = this.followElement.offset().top - OFFSET
				this.fixEnd = this.fixStart + this.followElement.height() - this.buttons.height()
			}
		},
		followScroll: function ( scrollDistance ) {
			this.recalculate()
			if ( scrollDistance >= this.fixEnd ) {
				this.buttons
				.removeClass( 'social-buttons--fixed' )
				.addClass( 'social-buttons--fixed-bottom' )
			} else if ( scrollDistance >= this.fixStart ) {
				this.buttons
				.removeClass( 'social-buttons--fixed-bottom' )
				.addClass( 'social-buttons--fixed' )
			} else {
				this.buttons
				.removeClass( 'social-buttons--fixed' )
				.removeClass( 'social-buttons--fixed-bottom' )
			}
		},
	}

	$( document ).ready( function () {
		if ( $( '.social-buttons' ).length && ( $( '.expandable-panels--btb' ).length === 0 || $( window ).width() > 767 ) ) {
			SocialButtons.init()
		}
	} )

	$( window ).scroll( function () {
		if ( $( '.social-buttons' ).length && ( $( '.expandable-panels--btb' ).length === 0 || $( window ).width() > 767 ) ) {
			SocialButtons.followScroll( $( this ).scrollTop() )
		}
	} )

	function resizeSocials (){
		if ( $( '.social-buttons' ).length && ( $( '.expandable-panels--btb' ).length === 0 || $( window ).width() > 767 ) ) {
			SocialButtons.init()
			SocialButtons.followScroll( $( this ).scrollTop() )
		}
	}

	$( window ).resize( lodash.debounce( resizeSocials, 100 ) )

} )( jQuery );
;
( function ( $ ){
	if ( $( '.expandable-panels' ).length !== 0 ){

		$( '.panel__content' ).hide()

		$( '.panel__link' ).on( 'click', function (){
			if ( $( this ).attr( 'aria-expanded' ) === 'false' ){
				if ( $( this ).parents( '.expandable-panels--btb' ).length !== 0 ){
					$( '.panel__link' ).attr( 'aria-expanded', 'false' )
					$( '.panel__content' ).attr( 'aria-hidden', 'true' ).slideUp()
					$( '.panel' ).removeClass( 'active' )
					$( '.panel .social-buttons' ).addClass( 'inactive' )
					$( '.panel__link i' ).text( '+' )
					$( '.panel__link span' ).text( CG.expandString )
				}

				$( this ).attr( 'aria-expanded', 'true' )
				$( this ).parents( '.panel' ).find( '.panel__content' ).attr( 'aria-hidden', 'false' ).slideDown( function (){
					var pos = $( this ).parents( '.panel' ).offset().top
					$( 'html, body' ).animate( { scrollTop: pos }, 500 )
					window.location.hash = $(this).parents('.panel').attr( 'id' )
				} )
				$( this ).parents( '.panel' ).addClass( 'active' )
				$( this ).parents( '.panel' ).find( '.social-buttons' ).removeClass( 'inactive' )

				if ( $( this ).parents( '.expandable-panels--btb' ).length !== 0 ){
					$( this ).find( 'i' ).text( '–' )
					$( this ).find( 'span' ).text( CG.collapseString )
				}
			} else {
				$( this ).attr( 'aria-expanded', 'false' )
				$( this ).parents( '.panel' ).find( '.panel__content' ).attr( 'aria-hidden', true ).slideUp()
				$( this ).parents( '.panel' ).removeClass( 'active' )

				if ( $( this ).parents( '.expandable-panels--btb' ).length !== 0 ){
					$( this ).find( 'i' ).text( '+' )
					$( this ).find( 'span' ).text( CG.expandString )
				}
			}
		} )

		// Hash on href
		$( document ).ready( function (){
			$( window.location.hash ).find('button').click()
		} )

		// BTB

		if ( $( '.expandable-panels--btb' ).length !== 0 ){
			$( '.panel__prev:not(.inactive)' ).on( 'click', function ( e ){
				e.preventDefault()
				$( this ).parents( '.panel' ).prev( '.panel' ).first().find( '.panel__link' ).click()
			} )

			$( '.panel__next:not(.inactive)' ).on( 'click', function ( e ){
				e.preventDefault()
				$( this ).parents( '.panel' ).next( '.panel' ).first().find( '.panel__link' ).click()
			} )

			$( document ).ready( function (){
				if ( $( window ).width() <= 767 ){
					$( '.panel__content__text .social-buttons' ).each( function (){
						$( this ).appendTo( $( this ).parents( '.panel__content' ).find( '.panel__nav' ) )
					} )
				} else {
					$( '.panel__content .social-buttons' ).each( function (){
						$( this ).prependTo( $( this ).parent().find( '.panel__content__text .row' ) )
					} )
				}
			} )

			function resizePanels (){
				if ( $( window ).width() <= 767 ){
					$( '.social-buttons' ).removeClass( 'social-buttons--fixed social-buttons--fixed-bottom' )
					$( '.panel__content__text .social-buttons' ).each( function (){
						$( this ).appendTo( $( this ).parents( '.panel__content' ).find( '.panel__nav' ) )
					} )
				} else {
					$( '.panel__nav .social-buttons' ).each( function (){
						$( this ).prependTo( $( this ).parents( '.panel__content' ).find( '.panel__content__text .row' ) )
					} )
				}
			}

			function mobileNavFix (){
				if ( $( window ).width() <= 767 ){
					$( '.panel.active .panel__content' ).each( function (){
						if ( $( this ).offset().top <= $( window ).scrollTop() && $( window ).scrollTop() < $( this ).offset().top + $( this ).outerHeight() - $( this ).find( '.panel__nav' ).outerHeight() ){
							$( this ).find( '.panel__nav' ).addClass( 'fixed' )
							var textP = $( this ).find( '.panel__nav' ).outerHeight() + 48
							$( this ).find( '.panel__content__text' ).css( 'padding-top', textP )
						} else {
							$( this ).find( '.panel__nav' ).removeClass( 'fixed' )
							$( this ).find( '.panel__content__text' ).attr( 'style', '' )
						}
					} )
				} else {
					$( '.panel__nav' ).removeClass( 'fixed' )
					$( '.panel__content__text' ).attr( 'style', '' )
				}
			}

			$( window ).resize( lodash.debounce( resizePanels, 100 ) )
			$( window ).scroll( lodash.debounce( mobileNavFix, 100 ) )
		}

	}
} )( jQuery );
;
/* global SC */

(function($) {
  "use strict";

  try {
    // initWidget is called when a SoundCloud iframe is found on the page
    var initWidget = function(w) {
      var currentSound, act, lab;
      var cat = 'SoundCloud';
      var widget = SC.Widget(w);
      
      // Events.READY is dispatched when the widget has been loaded
      widget.bind(SC.Widget.Events.READY, function() {
        
        // Get the title of the currently playing sound
        widget.getCurrentSound(function(cs) { 
          lab = cs['title']; 
        });
        
        // Fire a dataLayer event when Events.PLAY is dispatched
        widget.bind(SC.Widget.Events.PLAY, function() { 
          act = 'Play'; 
          sendDl(cat, act, lab); 
        });
      });
    };
    
    // Generic method for pushing the dataLayer event
    // Use a Custom Event Trigger with "scEvent" as the event name
    // Remember to create Data Layer Variables for eventCategory, eventAction, and eventLabel
    var sendDl = function(cat, act, lab) {
      window.dataLayer.push({
        'event' : 'scEvent',
        'eventCategory' : cat,
        'eventAction' : act,
        'eventLabel' : lab
      });
    };

    // For each SoundCloud iFrame, initiate the API integration
    var i,len;
    var iframes = document.querySelectorAll('iframe[src*="api.soundcloud.com"]');
    for (i = 0, len = iframes.length; i < len; i += 1) {
      initWidget(iframes[i]);
    }
  } catch(e) { console.log('Error with SoundCloud API: ' + e.message); }
})();;
jQuery(document).ready(function ($) {
  /**
   * MAIN PROPER FORMS CONTROLLER
   */

  var ProperForms = new function (e) {

    var self = this

    self.field = ''
    self.formElement = ''
    self.formSuccessBox = ''
    self.formErrorBox = ''
    self.formWrapper = ''


    self.init = function ($formEl) {

      self.formElement = $formEl
      self.formName = $( '.pf_form__title', $formEl ).val()

      self.bindFileUploads()
      self.bindSubmit()

      if (typeof jQuery('select2') !== 'undefined') {
        self.selectDropdown()
      }
    }

    /**
     * Process file uploads asynchronously
     * The file should be uploaded immediately after being selected by user and store as encrypted blob
     * It will be marked as draft in WP and deleted if the submission is not sent successfully
     * After successful form submission file post will get published and binded to submission post.
     */
    self.bindFileUploads = function () {
      var fileFields = self.formElement.find('.pf_field--file')

      fileFields.each(function () {
        var upload = new PFFileUpload()
        upload.init($(this))
      })
    }

    /**
     * Proccess form on submit
     */
    self.bindSubmit = function () {
      // add error validation after click submit button
      var myForm

      self.formElement.find('.pf_field--submit').on('click', function () {
        myForm = $(this).closest('.pf_form__form')
        myForm.find('.pf-required input, .pf-required textarea, .pf_field select, .pf_field ul li radio, .pf_fileupload_callback_id').focus().focusout()
      })
      // Submit form
      self.formElement.submit(function (e) {
        e.preventDefault()

        var hasErrors = 0
        // Validate all fields again on submit
        myForm.find('.pf_field input, .pf_field textarea, .pf_field select, .pf_field ul li radio, .pf_fileupload_callback_id').each(function () {
          if (PFValidator.init($(this)) === false) {
            hasErrors = 1
          }
        })

        if (hasErrors) {
          return
        }

        var i = 0

        $('.pf_field--recaptcha').each(function () {
          if ($(this).parents('.pf_form__form').attr('id') === myForm.attr('id')) {
            return false
          }
          i++
        })

        var data = {
          action: 'pf_submit_form',
          nonce_pf_submit: PF.ajaxNonce,
          recaptcha_response: grecaptcha.getResponse(i),
          form_data: {}
        }

        var fields = myForm.find(':input', $(this)).serializeArray()

        $.each(fields, function (i, field) {
          // skip undefined
          if (!field.name) {
            return
          }

          // treat multiple inputs with same names[] as array of values, similar to PHP
          if (field.name.slice(-2) === '[]') {
            var realName = field.name.slice(0, -2)

            if (Array.isArray(data.form_data[ realName ])) {
              data.form_data[ realName ].push(field.value)
            } else {
              data.form_data[ realName ] = [ field.value ]
            }
          } else { // singular values
            data.form_data[ field.name ] = field.value
          }
        })

        data.form_data = JSON.stringify(data.form_data)


        $.ajax({
          url: PF.ajaxURL,
          method: 'post',
          action: 'pf_submit_form',
          nonce_pf_submit: PF.ajaxNonce,
          data: data
        }).done(function (response) {
          if (!response.success) {
            self.onFailure()

            return
          }

          self.onSuccess( response.data, myForm.attr('id') )

        }).fail(function (response ) {
          self.onFailure( response.data, response.responseJSON.data, myForm.attr('id') )

        })
      })
    }

    // selec2 for select dropdowns
    self.selectDropdown = function () {
      var selects = self.formElement.find('select')

      selects.each(function () {
        $(this).select2({
          dropdownParent: self.formElement,
          width: 'style'
        })
      })

      selects.attr('aria-hidden', false)
      $('.select2').attr('aria-hidden', true)

      selects.on('select2:open', function (e) {
        iconSearch = $('<i />', { 'class': 'icon-ios-search-strong', 'aria-hidden': 'true' })
        $('.select2-search__field', self.formElement).attr('placeholder', 'Search')
        $('.select2-search--dropdown', self.formElement).append(iconSearch)
      })

      self.formElement.on('click', '.select-clear', function (e) {
        e.preventDefault()
        var $select = $(this).parents('.pf_field').find('select')
        $select.val($select.find('option:first').attr('value')).change()
        $select.select2('close')
        $(this).remove()
      })
    }

    configPF = function() {

      var form_ID = $('input[name=form_id]').val()
      var config  = PF_CONFIG[form_ID]

      return config

    }

    /**
     * After succesful submission
     */
    self.onSuccess = function (data, formID) {

      var formToHide = document.getElementById(formID);

      this.formSuccessBox = $(formToHide).siblings('.pf_form__success')
      this.formErrorBox = $(formToHide).siblings('.pf_form__errors')

      var formRedirect = configPF()

      if  ( typeof formRedirect !== 'undefined' && typeof formRedirect.redirect !== 'undefined' && formRedirect.redirect.length ) {

        this.formSuccessBox.hide()
        self.redirect(formRedirect.redirect)

      } else {

        $(formToHide).hide()
        this.formErrorBox.hide()
        this.formSuccessBox.show()
    }

      self.sendAnalyticsData()

    }

    /**

     * After submission fail
     */
    self.onFailure = function (data, captchaResponse, formID) {

      var formToHide = document.getElementById(formID);

      this.formSuccessBox = $(formToHide).siblings('.pf_form__success')
      this.formErrorBox = $(formToHide).siblings('.pf_form__errors')

      this.formSuccessBox.hide()

      if (captchaResponse !== null ) {
        this.formErrorBox.text(captchaResponse).css('color', 'red')
      }

      this.formErrorBox.show()
    }

    self.sendAnalyticsData = function() {
      window.dataLayer = window.dataLayer || [];
      window.dataLayer.push( {
        'event'    : 'FormSubmission',
        'formID'   : self.formId,
        'formTitle' : self.formName,
      } )
    }

    self.redirect = function(redirectUrl) {

    window.location.href = redirectUrl

    }

  }()

  /**
   * AJAX FILE UPLOAD FIELDS CONTROLLER
   */
  function PFFileUpload () {
    var self = this

    // Field wrapper element
    self.parent = ''

    // File input to proccess
    self.input = ''

    // WP Ajax url with callback action query string
    self.ajaxURL = PF.ajaxURL + '?action=pf_fileupload'

    // Parent Proper Form Form ID - to retrieve field settings from
    self.formId = ''

    // Proper Forms field ID
    self.fieldId = ''

    // WP Nonce
    self.nonce = ''

    // Hidden input to update with file ID after successful upload to WP
    self.wpFileInput = ''

    self.init = function ($fieldEl) {
      // Populate properties
      self.parent = $fieldEl
      self.button = $fieldEl.find('.pf_fileupload_btn')
      self.input = $fieldEl.find('input[type="file"]')
      self.nonce = $fieldEl.find('input.pf_fileupload_nonce').val()
      self.wpRestNonce = $fieldEl.closest('form').find('.pf_form__wp_rest_nonce').val()
      self.formId = $fieldEl.closest('form').find('input.pf_form__id').val()
      self.fieldId = self.input.attr('id')
      self.wpFileInput = $fieldEl.find('input.pf_fileupload_callback_id')

      // Kick it off
      self.bindUploadClicks()
    }

    self.bindUploadClicks = function () {
      self.button.off().on('click', function (e) {
        e.preventDefault()
        self.input.click()
      })

      self.input.on('change', function (e) {
        // no file selected, do nothing
        if (!self.input[0] || !self.input[0].files || !self.input[0].files.length) {
          return
        }

        self.prepare()
      })
    }

    self.prepare = function () {
      var file = self.input[0].files
      var uploadData = new FormData()

      self.parent.find('.pf_error').remove()

      uploadData.append('form_id', self.formId)
      uploadData.append('field_id', self.fieldId)
      uploadData.append('nonce', self.nonce)

      $.each(file, function (key, value) {
        uploadData.append('file_' + self.fieldId, value)
      })

      self.uploadFile(uploadData)
    }

    self.uploadFile = function (uploadData) {
      $.ajax({
        url: self.ajaxURL,
        type: 'POST',
        data: uploadData,
        cache: false,
        dataType: 'json',
        processData: false,
        contentType: false,
        beforeSend: function (jqXhr) {
          self.button.text(PF.strings.uploading)
        },
        success: function (result, textStatus, jqXHR) {
          if (!result.data || !result.success || !result.data.file_post_id || !result.data.file_data) {
            self.fail(result.data)
            return
          }
          self.success(result.data)
        }
      })
    }

    self.fail = function (data) {
      var $error = $('<span>', { class: 'pf_error', text: data })

      $error.appendTo(self.parent)
      self.button.text(PF.strings.select_file)
    }

    self.reset = function () {
      self.parent.find('.pf_fileupload__uploaded').remove()
      self.wpFileInput.val('')
      self.input.val('')
      self.button.text(PF.strings.select_file)
      self.enable()
    }

    self.disable = function () {
      self.input.prop('disabled', true)
      self.parent.addClass('pf_disabled')
    }

    self.enable = function () {
      self.input.prop('disabled', false)
      self.parent.removeClass('pf_disabled')
    }

    /**
     * Adds WP file post ID back to the form
     * Shows uploaded file name to user
     * Disables the field until the file is removed
     */
    self.success = function (result) {
      self.wpFileInput.val(result.file_post_id)
      self.appendUploaded(result.file_data)
      self.button.text(PF.strings.file_selected)
      self.disable()
    }

    /**
     * Appends HTML with uploaded file name and removal link
     */
    self.appendUploaded = function (fileData) {
      var removeEl = $('<span>').text(PF.strings.remove_file).addClass('pf_fileupload__remove')
      var uploadedInfo = $('<p/>').text(fileData.name).addClass('pf_fileupload__uploaded')
      removeEl.appendTo(uploadedInfo)
      uploadedInfo.appendTo(self.parent)

      removeEl.on('click', function () {
        self.reset()
      })
    }
  }

  /**
   * PROPER FORMS VALIDATOR
   */
  var PFValidator = new function () {
    var self = this

    self.field = ''
    self.parent = ''
    self.formEl = ''
    self.fieldType = ''
    self.fieldValue = ''
    self.hasErrors = 0

    self.init = function ($fieldEl) {
      // Bail out early if globals from localized scripts are not present
      if (!PF_CONFIG || !PF) {
        return
      }

      self.field = $fieldEl
      self.parent = $fieldEl.closest('.pf_field')
      self.formEl = $fieldEl.closest('.pf_form')
      self.validationType = self.parent.data('validate')

      self.cleanErrors()

      self.getFieldValue()

      return self.validate()

    }

    self.validate = function () {

      if ( self.field.hasClass('select2-search__field') ) {
        return true
      }

      if ( self.validationType === 'multiselect'){

        if ( self.isRequired() && self.fieldValue.length === 0 ) {
          self.hasErrors = 1
          self.outputError(PF.strings.required_error)
          return false
        }

      } else {
        // check if required fields are filled before even trying to check values
        if (self.isRequired() &&  ( !self.fieldValue || self.field.val() === '' ) ) {

          self.hasErrors = 1
          self.outputError(PF.strings.required_error)
          return false
        }
      }


      // validate data based on validation type provided in HTML's data attribute
      var errorMsg = ''
      switch (self.validationType) {
        case 'email' :
          var regex = /[a-z0-9\._%+!$&*=^|~#%'`?{}/\-]+@([a-z0-9\-]+\.){1,}([a-z]{2,16})/

          if (!self.fieldValue.match(regex)) {
            self.hasErrors = 1
            errorMsg = PF.strings.email_error
          }
          break

        case 'date' :

          var formatToRegex = {
            'dd/mm/yy': /\d{2}\/\d{2}\/\d{4}/,
            'dd-mm-yy': /\d{2}\-\d{2}\-\d{4}/,
            'dd.mm.yy': /\d{2}\.\d{2}\.\d{4}/,
            'mm/dd/yy': /\d{2}\/\d{2}\/\d{4}/,
            'mm-dd-yy': /\d{2}\-\d{2}\-\d{4}/,
            'mm.dd.yy': /\d{2}\.\d{2}\.\d{4}/,
            'yy-mm-dd': /\d{4}\-\d{2}\-\d{2}/,
            'yy/mm/dd': /\d{4}\/\d{2}\/\d{2}/,
            'yy.mm.dd': /\d{4}\.\d{2}\.\d{2}/
          }

          var regex = formatToRegex[ self.parent.data('format') ] || /\d{2}\/\d{2}\/\d{4}/

          if (!self.fieldValue.match(regex) && ( $('.datepicker').val().length !== 0)) {

            self.hasErrors = 1
            errorMsg = PF.strings.date_format_error
          }

          break
      }

      if (self.hasErrors) {
        self.outputError(self.getErrorMsg(self.field.attr('id'), errorMsg))
        return false
      }

      return true
    }

    /**
     * Gets current value from field or set of fields according to field type
     */
    self.getFieldValue = function () {
      switch (self.validationType) {
        case 'checkboxes':
          var vals = []
          self.parent.find('input:checked').each(function () {
            vals.push($(this).val())
          })
          self.fieldValue = vals.join(',')
          break
        case 'radio':
          self.fieldValue = self.parent.find('input:checked').first().val()
          break
        default:
          self.fieldValue = self.field.val()
          break
      }
    }

    /**
     * Checks if field element is marked as required in HTML
     */
    self.isRequired = function () {
      if (self.field.prop('required') || self.parent.hasClass('pf-required')) {
        return true
      }

      return false
    }

    /**
     * Gets error message, customized if possible. Strings are passed through wp_localize_script in shortcode callback.
     *
     * 1. Looks for field's custom message if set in form WP admin screen (passed in PF_ERR global),
     * 2. First fallback is a string provided as function param
     * 3. Second fallback: generic localized string in PF global,
     * 3. Ultimate fallback: hardcoded english string. Lo siento pero no comprendo, señor.
     */
    self.getErrorMsg = function (fieldId, defaultMsg) {

      var formConfig = configPF()

      if (!formConfig.errors || !formConfig.errors[fieldId]) {
        // Fallback: return msg probivided as param
        if (defaultMsg) {
          return defaultMsg
        }

        // Fallback: return hardcoded value if nothing else is present
        if (!PF || !PF.strings || !PF.strings.default_error) {
          return 'This field\'s value is invalid!' // Default hardcoded message, displayed only if wp_localize_script() fails
        }

        // Return localized default message if present
        return PF.strings.default_error
      }

      return formConfig.errors[fieldId]
    }

    /**
     * Adds error classes to HTML and prints span element with custom error message
     */
    self.outputError = function (msg) {

      if ( (self.parent).hasClass('pf_field--checkboxes')
        || (self.parent).hasClass('pf_field--radios')
      ) {

      fieldVal = self.parent.attr('id')

      } else if( (self.parent).hasClass('pf_field--file') ) {

        fieldVal = self.field.attr('name')
      } else if( (self.parent).hasClass('pf_field--multiselect') ) {

        fieldVal = self.parent.attr('name')

      } else {

        fieldVal = self.field.attr('id')
      }

      var errorEl = $('<span>', {
        class: 'pf_error',
        text: self.getErrorMsg(fieldVal)
      })

      self.field.addClass('pf_error_shadow')
      self.parent.addClass('pf_has_errors')
      self.formEl.addClass('pf_has_errors')

      errorEl.appendTo(self.parent)
    }

    /**
     * Resets error messages and validator state
     */
    self.cleanErrors = function () {
      self.parent.removeClass('pf_has_errors')
      self.formEl.removeClass('pf_has_errors')
      self.field.removeClass('pf_error_shadow')
      self.parent.find('.pf_error').remove()
      self.hasErrors = 0
    }

    $('.pf_form__form').on('submit', function () {
      self.validate()
    })
  }()

  // KICK IT OFF!

  // Init main controller on every form on the page
  $('.pf_form__form').each(function () {
    ProperForms.init($(this))
  })

  // Init validator when field's value change
  $('.pf_field input, .pf_field textarea, .pf_field select, .pf_field ul li radio, .pf_fileupload_callback_id').on(' change focus', function (e) {
    var check = PFValidator.init($(this))
  })

    $('.pf_field--date').each(function() {

      var customFormat = $(this).data('format');

      $('.datepicker').datepicker({
        dateFormat: customFormat,
        changeYear: true,
        changeMonth: true,
        yearRange: '-100:+100'
       }).off('focus')
        .click(function () {
         $(this).datepicker('show');
       });
    });

// TODO add as main controller's method

  function resizeForms () {
    $('.pf_form__form select').each(function () {
      var newWidth = $(this).width()
      if (newWidth === lastWindowWidth) {
        return
      }
      lastWindowWidth = newWidth

      var $form = $(this).parents('.pf_form__form')

      $(this).select2('destroy')
      $(this).width($(this).parent().width())
      $(this).select2({ dropdownParent: $form })

      $('select', $form).attr('aria-hidden', false)
      $('.select2', $form).attr('aria-hidden', true)
    })
    $('.popup__overlay').find('select').each(function () {
      $(this).select2()
    })
  }

  var lastWindowWidth = $(window).width()
  $(window).resize(lodash.debounce(resizeForms, 100))

})
;
